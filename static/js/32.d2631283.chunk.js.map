{"version":3,"sources":["components/Formik/CheckboxGroupField/index.tsx","components/Formik/ComboBoxField/index.tsx","components/Formik/DateField/index.tsx","components/Formik/InfoField/index.tsx","components/Formik/EditorField/index.tsx","components/Formik/CheckboxField/index.tsx","components/Formik/DateTimeField/index.tsx","components/Formik/TimeField/index.tsx","components/FormikCustom/PhoneField/index.tsx","components/FormikCustom/PostcodeField/index.tsx","components/Formik/Formik.stories.tsx","components/FormikCustom/MoneyField/index.tsx","../node_modules/@material-ui/icons/YouTube.js"],"names":["CheckboxGroupField","name","label","options","disabled","readOnly","display","color","maxHeight","classes","useStyles","isSubmitting","useFormikContext","useField","field","meta","setValue","error","touched","isError","Boolean","fieldValue","value","fieldValueString","JSON","stringify","optionsString","currentState","React","useMemo","map","id","includes","style","overflow","component","className","root","row","key","control","checked","onChange","newFieldValue","s","filter","handleChange","helperText","String","makeStyles","width","alignItems","justifyContent","transform","switch","marginLeft","marginRight","ComboBoxField","multiple","fullWidth","loading","startAdornment","props","helpers","useState","optionString","useEffect","length","currentValue","option","find","e","selected","x","disableCloseOnSelect","filterSelectedOptions","getOptionLabel","groupBy","group","renderInput","params","mappedStartAdornment","InputProps","mappedEndAdornment","height","endAdornment","flexWrap","renderTags","join","margin","paddingLeft","whiteSpace","textOverflow","renderOption","Fragment","icon","fontSize","checkedIcon","DateField","variant","DatePicker","inputVariant","format","placeholder","position","FormikInfoField","rowsMax","multiline","InputLabelProps","shrink","borderBottom","initialValue","RichTextEditor","createValueFromString","createEmptyValue","toolbarConfig","INLINE_STYLE_BUTTONS","BLOCK_TYPE_DROPDOWN","BLOCK_TYPE_BUTTONS","toString","setTouched","FormikSwitch","onClick","DateTimeField","DateTimePicker","TimeField","TimePicker","PhoneField","TextField","inputComponent","PhoneFormat","inputProps","autoComplete","inputRef","allowNegative","decimalScale","getInputRef","onValueChange","values","target","floatValue","PostcodeField","title","Default","renderField","Comp","xs","Grid","item","renderGroup","items","Typography","gutterBottom","marginTop","container","spacing","d","utils","DateFnsUtils","Paper","padding","onSubmit","console","log","initialValues","text","textarea","select","money","phone","postcode","info","date","time","datetime","combo","comboMulti","editor","file","checkbox","checkboxgroup","InfoField","MoneyField","TextAreaField","rows","SelectField","SwitchField","FileField","CheckboxField","EditorField","fixedDecimal","MoneyFormat","fixedDecimalScale","_interopRequireDefault","require","Object","defineProperty","exports","default","_react","_default","createElement"],"mappings":"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","file":"static/js/32.d2631283.chunk.js","sourcesContent":["import React from 'react'\nimport { FormControl, makeStyles, FormGroup, FormLabel, FormHelperText, FormControlLabel, Checkbox } from '@material-ui/core'\nimport { useField, useFormikContext } from 'formik'\n\nexport type CheckboxGroupFieldProps = {\n  name: string\n  label?: string\n  options?: Option[] | null\n  disabled?: boolean\n  readOnly?: boolean\n\n  display?: 'grid' | 'flex'\n  color?: 'primary' | 'secondary' | 'default'\n  maxHeight?: string\n}\ntype Option = {\n  label?: string\n  value: string\n}\nconst CheckboxGroupField: React.FC<CheckboxGroupFieldProps> = ({\n  name, label,\n  options,\n  disabled = false, readOnly = false,\n  display = 'grid', color = 'primary',\n  maxHeight = '100%',\n}) => {\n  const classes = useStyles()\n\n  const { isSubmitting } = useFormikContext()\n  const [field, meta, { setValue }] = useField(name)\n\n  const { error, touched } = meta\n  const isError = Boolean(touched && error)\n\n  const fieldValue = field.value\n  const fieldValueString = JSON.stringify(fieldValue)\n  const optionsString = JSON.stringify(options)\n  const currentState: any = React.useMemo(\n    () => options?.map(({ label, value }) => ({ label, id: value, value: fieldValue.includes(value) })),\n    // TODO\n    // eslint-disable-next-line\n    [fieldValueString, optionsString]\n  )\n\n  const handleChange = (value: any) => {\n    const newState = currentState.map((s: any) => {\n      if (s.id === value) return { ...s, value: !s.value}\n      return s\n    })\n    const newFieldValue = newState.filter(({ value }: any) => value).map(({ id }: any) => id)\n    setValue(newFieldValue)\n  }\n\n  return (\n    <div style={{ maxHeight, overflow: 'auto' }}>\n      <FormControl component='fieldset' className={classes.root} error={isError} disabled={isSubmitting || disabled || readOnly}>\n        <FormLabel component='legend' className={classes.label}>\n          {label}\n        </FormLabel>\n        <FormGroup row className={classes.root} style={{ display: display }}>\n          {options?.map(({ label, value }) => (\n            <FormControlLabel\n              key={value}\n              label={label}\n              control={(\n                <Checkbox\n                  {...field}\n                  value={value}\n                  checked={fieldValue.includes(value)}\n                  onChange={() => handleChange(value)}\n                  disabled={isSubmitting || disabled || readOnly}\n                  color={color}\n                />\n              )}\n            />\n          ))}\n        </FormGroup>\n        {isError && (\n          <FormHelperText className={classes.helperText}>\n            {String(error)}\n          </FormHelperText>\n        )}\n      </FormControl>\n    </div>\n  )\n}\nexport default CheckboxGroupField\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n    // display: 'grid',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  label: {\n    transform: 'scale(0.75)'\n  },\n  switch: {\n    marginLeft: 'calc(50% - 31px)'\n  },\n  helperText: {\n    marginLeft: 14,\n    marginRight: 14\n  }\n})","import React from 'react'\n\nimport { useField, useFormikContext } from 'formik'\nimport Autocomplete from '@material-ui/lab/Autocomplete' // , { AutocompleteProps }\nimport { TextField, Checkbox, TextFieldProps, CircularProgress } from '@material-ui/core' // InputAdornment\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank'\nimport CheckBoxIcon from '@material-ui/icons/CheckBox'\n\nexport type ComboBoxFieldProps =\n  // AutocompleteProps &\n  TextFieldProps &\n  {\n    startAdornment?: React.ReactElement\n    options?: ComboBoxFieldOption[]\n    name: string\n    multiple?: boolean\n    readOnly?: boolean\n    loading?: boolean\n  }\nexport type ComboBoxFieldOption = {\n  label?: string\n  value: string\n  group?: string\n}\nconst ComboBoxField: React.FC<ComboBoxFieldProps> = ({ options = [], name, multiple = false, disabled, readOnly, fullWidth, loading, startAdornment, ...props }) => {\n  const { isSubmitting } = useFormikContext()\n\n  const [field, meta, helpers] = useField(name)\n  const [value, setValue] = React.useState<any>('')\n  const fieldValue = field.value\n  const optionString = JSON.stringify(options)\n  React.useEffect(() => {\n    if(options && options.length) {\n      // TODO\n      const currentValue = multiple\n        // eslint-disable-next-line\n        ? options.filter(option => fieldValue.includes(option.value))\n        // eslint-disable-next-line\n        : options.find(option => option.value == fieldValue)\n\n      setValue(currentValue)\n    }\n    // eslint-disable-next-line\n  }, [fieldValue, multiple, optionString]) // optionString\n  const handleValueChange = (e: any, selected: any) => {\n    if (!selected) return helpers.setValue('')\n\n    const value = !multiple\n      ? selected.value\n      : selected.map((x: any) => x.value)\n    helpers.setValue(value)\n  }\n\n  const { error, touched } = meta\n  const isError = Boolean(touched && error)\n\n  return (\n    // @ts-ignore\n    <Autocomplete\n      {...props}\n      value={value}\n      onChange={handleValueChange}\n\n      disabled={loading || disabled || readOnly || isSubmitting}\n\n      multiple={multiple}\n      disableCloseOnSelect={multiple}\n      filterSelectedOptions={!multiple}\n\n      // @ts-ignore\n      options={options}\n      getOptionLabel={(option: any) => option.label || ''}\n      groupBy={(option: any) => option.group}\n      renderInput={params => {\n        const mappedStartAdornment = multiple ? params.InputProps.startAdornment :\n          startAdornment ? startAdornment :\n          null\n\n        const mappedEndAdornment = loading\n          ? <CircularProgress style={{ width: 30, height: 30 }} />\n          : params.InputProps.endAdornment\n\n        return (\n          // @ts-ignore\n          <TextField\n            error={isError}\n            helperText={isError ? error : null}\n            fullWidth={fullWidth}\n            // {...field}\n            {...props}\n            {...params}\n            InputProps={{\n              ...params.InputProps,\n              style: { flexWrap: 'nowrap' },\n              startAdornment: mappedStartAdornment,\n              endAdornment: mappedEndAdornment,\n            }}\n          />\n        )\n      }}\n      renderTags={(value: any) => {\n        const label = value.map(({ label }: any) => label).join(', ')\n\n        return (\n          <p style={{\n            margin: 0, paddingLeft: 6,\n            whiteSpace: 'nowrap',\n            overflow: 'hidden',\n            textOverflow: 'ellipsis'\n          }}>\n            {label}\n          </p>\n        )\n      }}\n      renderOption={(option: any, { selected }) => (\n        <React.Fragment key={option.value}>\n          {multiple && (\n            <Checkbox\n              icon={<CheckBoxOutlineBlankIcon fontSize='small' />}\n              checkedIcon={<CheckBoxIcon fontSize='small' />}\n              style={{ marginRight: 8 }}\n              checked={selected}\n            />\n          )}\n          {option.label}\n        </React.Fragment>\n      )}\n    />\n  )\n}\nexport default ComboBoxField","import React from 'react'\n\nimport { Field } from 'formik'\nimport { DatePicker } from 'formik-material-ui-pickers'\nimport { DatePickerProps } from '@material-ui/pickers'\nimport { InputAdornment } from '@material-ui/core'\n\nexport type DateFieldProps = Omit<DatePickerProps, 'variant'> & {\n  name: string\n\n  variant: 'standard' | 'outlined' | 'filled'\n  startAdornment?: React.ReactElement\n  endAdornment?: React.ReactElement,\n}\n\nconst DateField: React.FC<DateFieldProps> = ({ variant, startAdornment, endAdornment, ...props }) => {\n  return (\n    <Field component={DatePicker}\n      {...props}\n      variant='inline'\n      inputVariant={variant}\n      format='dd/MM/yyyy'\n      placeholder='DD/MM/YYYY'\n\n      InputProps={{\n        ...props.InputProps,\n        startAdornment: !startAdornment ? null : (\n          <InputAdornment position='start'>\n            {startAdornment}\n          </InputAdornment>\n        ),\n        endAdornment: !endAdornment ? null : (\n          <InputAdornment position='end'>\n            {endAdornment}\n          </InputAdornment>\n        )\n      }}\n    />\n  )\n}\nexport default DateField","import React from 'react'\n\nimport TextField, { FormikTextFieldProps } from 'components/Formik/TextField'\nimport { makeStyles } from '@material-ui/core'\n\nexport type FormikInfoFieldProps = FormikTextFieldProps\n\nconst FormikInfoField: React.FC<FormikInfoFieldProps> = ({ InputProps, rowsMax = 3, className, variant, ...props }) => {\n  const classes = useStyles()\n\n  return (\n    <TextField {...props}\n      className={`${className} ${classes.root}`}\n      multiline\n      rowsMax={rowsMax}\n      InputProps={{\n        ...InputProps,\n        readOnly: true\n      }}\n      InputLabelProps={{ shrink: true }}\n    />\n  )\n}\nexport default FormikInfoField\n\nconst useStyles = makeStyles({\n  root: {\n    '& .MuiInput-underline:before': {\n      borderBottom: 'none'\n    }\n  }\n})","import React from 'react'\n\nimport { useField, useFormikContext } from 'formik'\nimport RichTextEditor from 'react-rte'\nimport FormControl from '@material-ui/core/FormControl'\nimport FormHelperText from '@material-ui/core/FormHelperText'\n\nexport default ({ name, label, placeholder, disabled, ...props }: any) => {\n  const { isSubmitting } = useFormikContext()\n\n  const [field, meta, helpers] = useField(name)\n  const { error, touched } = meta\n  const isError = Boolean(touched && error)\n\n  const initialValue = field.value\n    ? RichTextEditor.createValueFromString(field.value, 'html')\n    : RichTextEditor.createEmptyValue()\n  const [value, setValue] = React.useState<any>(initialValue)\n\n  return (\n    <FormControl error={isError} style={{ width: '100%' }} id={field.name}>\n      <RichTextEditor\n        {...props}\n        disabled={disabled || isSubmitting}\n        placeholder={placeholder || label}\n        toolbarConfig={{\n          display: [\n            'INLINE_STYLE_BUTTONS',\n            'BLOCK_TYPE_BUTTONS',\n            'BLOCK_TYPE_DROPDOWN',\n            'HISTORY_BUTTONS'\n          ],\n          INLINE_STYLE_BUTTONS: [\n            { label: 'Bold', style: 'BOLD', className: 'custom-css-class' },\n            { label: 'Italic', style: 'ITALIC' },\n            { label: 'Underline', style: 'UNDERLINE' }\n          ],\n          BLOCK_TYPE_DROPDOWN: [\n            { label: 'Normal', style: 'unstyled' },\n            { label: 'Heading Large', style: 'header-one' },\n            { label: 'Heading Medium', style: 'header-two' },\n            { label: 'Heading Small', style: 'header-three' }\n          ],\n          BLOCK_TYPE_BUTTONS: [\n            { label: 'UL', style: 'unordered-list-item' },\n            { label: 'OL', style: 'ordered-list-item' }\n          ]\n        }}\n        value={value}\n        onChange={(value: any) => {\n          setValue(value)\n          helpers.setValue(value.toString('html'))\n          helpers.setTouched(true)\n        }}\n      />\n      {isError && (\n        <FormHelperText style={{ marginLeft: 14, marginRight: 14 }}>\n          {error}\n        </FormHelperText>\n      )}\n    </FormControl>\n  )\n}","import React from 'react'\n\nimport {\n  Checkbox, CheckboxProps,\n  makeStyles,\n  FormControl, FormLabel, FormGroup, FormHelperText\n} from '@material-ui/core'\nimport { useField, useFormikContext } from 'formik'\n\ntype FormikCheckboxProps = CheckboxProps & {\n  name: string\n  label?: string\n}\nconst FormikSwitch: React.FC<FormikCheckboxProps> = ({ label, disabled, readOnly, ...props }) => {\n  const classes = useStyles()\n\n  const { isSubmitting } = useFormikContext()\n\n  const [field, meta, helpers] = useField(props.name)\n  const { error, touched } = meta\n  const isError = Boolean(touched && error)\n\n  return (\n    <FormControl component='fieldset' className={classes.root} error={isError}\n      disabled={disabled || readOnly || isSubmitting}\n    >\n      <FormLabel component='legend' className={classes.label}>\n        {label}\n      </FormLabel>\n      <FormGroup row className={classes.root}>\n        <Checkbox\n          {...props}\n          disabled={disabled || readOnly || isSubmitting}\n          checked={field.value}\n          onClick={() => helpers.setValue(!field.value)}\n        />\n      </FormGroup>\n      {isError && (\n        <FormHelperText className={classes.helperText}>\n          {String(error)}\n        </FormHelperText>\n      )}\n    </FormControl>\n  )\n}\nexport default FormikSwitch\n\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  label: {\n    transform: 'scale(0.75)'\n  },\n  helperText: {\n    marginLeft: 14,\n    marginRight: 14\n  }\n})","import React from 'react'\n\nimport { Field } from 'formik'\nimport { DateTimePicker } from 'formik-material-ui-pickers'\nimport { DateTimePickerProps } from '@material-ui/pickers'\nimport { InputAdornment } from '@material-ui/core'\n\nexport type DateTimeFieldProps = Omit<DateTimePickerProps, 'variant'> & {\n  name: string\n\n  variant: 'standard' | 'outlined' | 'filled'\n  startAdornment?: React.ReactElement\n  endAdornment?: React.ReactElement,\n}\n\nconst DateTimeField: React.FC<DateTimeFieldProps> = ({ variant, startAdornment, endAdornment, ...props }) => {\n  return (\n    <Field component={DateTimePicker}\n      {...props}\n      variant='inline'\n      inputVariant={variant}\n      format='dd/MM/yyyy hh:mm a'\n\n      InputProps={{\n        ...props.InputProps,\n        startAdornment: !startAdornment ? null : (\n          <InputAdornment position='start'>\n            {startAdornment}\n          </InputAdornment>\n        ),\n        endAdornment: !endAdornment ? null : (\n          <InputAdornment position='end'>\n            {endAdornment}\n          </InputAdornment>\n        )\n      }}\n    />\n  )\n}\nexport default DateTimeField","import React from 'react'\n\nimport { Field } from 'formik'\nimport { TimePicker } from 'formik-material-ui-pickers'\nimport { TimePickerProps } from '@material-ui/pickers'\nimport { InputAdornment } from '@material-ui/core'\n\nexport type TimeFieldProps = Omit<TimePickerProps, 'variant'> & {\n  name: string\n\n  variant: 'standard' | 'outlined' | 'filled'\n  startAdornment?: React.ReactElement\n  endAdornment?: React.ReactElement,\n}\n\nconst TimeField: React.FC<TimeFieldProps> = ({ variant, startAdornment, endAdornment, ...props }) => {\n  return (\n    <Field component={TimePicker}\n      {...props}\n      variant='inline'\n      inputVariant={variant}\n\n      InputProps={{\n        ...props.InputProps,\n        startAdornment: !startAdornment ? null : (\n          <InputAdornment position='start'>\n            {startAdornment}\n          </InputAdornment>\n        ),\n        endAdornment: !endAdornment ? null : (\n          <InputAdornment position='end'>\n            {endAdornment}\n          </InputAdornment>\n        )\n      }}\n    />\n  )\n}\nexport default TimeField","import React from 'react'\n\nimport TextField, { FormikTextFieldProps } from 'components/Formik/TextField'\nimport NumberFormat from 'react-number-format'\n\ntype PhoneFieldProps = FormikTextFieldProps & {\n  format?: string\n}\nconst PhoneField: React.FC<PhoneFieldProps> = ({ format, ...props }) => {\n  return (\n    <TextField\n      {...props}\n      InputProps={{\n        inputComponent: PhoneFormat,\n        inputProps: {\n          autoComplete: 'disabled_auto_complete',\n          format\n        }\n      }}\n    />\n  )\n}\nexport default PhoneField\n\nconst PhoneFormat = ({\n  inputRef,\n  onChange, name,\n  ...props\n}: any) => {\n  return (\n    <NumberFormat\n      {...props}\n\n      allowNegative={false}\n      decimalScale={0}\n      format='#### ### ###'\n\n      name={name}\n      getInputRef={inputRef}\n      onValueChange={(values: any) => {\n        onChange({\n          target: {\n            name,\n            value: values.floatValue\n          }\n        })\n      }}\n    />\n  )\n}","import React from 'react'\n\nimport TextField, { FormikTextFieldProps } from 'components/Formik/TextField'\nimport NumberFormat from 'react-number-format'\n\ntype PostcodeFieldProps = FormikTextFieldProps & {\n  format?: string\n}\nconst PostcodeField: React.FC<PostcodeFieldProps> = ({ format, ...props }) => {\n  return (\n    <TextField\n      {...props}\n      InputProps={{\n        inputComponent: PhoneFormat,\n        inputProps: {\n          autoComplete: 'disabled_auto_complete',\n          format,\n        }\n      }}\n    />\n  )\n}\nexport default PostcodeField\n\nconst PhoneFormat = ({\n  inputRef,\n  onChange, name,\n  ...props\n}: any) => {\n  return (\n    <NumberFormat\n      {...props}\n\n      allowNegative={false}\n      decimalScale={0}\n      format='####'\n\n      name={name}\n      getInputRef={inputRef}\n      onValueChange={(values: any) => {\n        onChange({\n          target: {\n            name,\n            value: values.floatValue\n          }\n        })\n      }}\n    />\n  )\n}","import React from 'react'\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers'\nimport DateFnsUtils from '@date-io/date-fns'\nimport { Form, Formik } from 'formik'\nimport { Grid, Typography, Paper } from '@material-ui/core'\nimport YouTubeIcon from '@material-ui/icons/YouTube'\n\nimport InfoField from './InfoField'\nimport MoneyField from '../FormikCustom/MoneyField'\nimport PhoneField from '../FormikCustom/PhoneField'\nimport PostcodeField from '../FormikCustom/PostcodeField'\n\nimport TextField from './TextField'\nimport TextAreaField from './TextAreaField'\nimport SelectField from './SelectField'\nimport DateField from './DateField'\nimport TimeField from './TimeField'\nimport DateTimeField from './DateTimeField'\nimport SwitchField from './SwitchField'\nimport ComboBoxField from './ComboBoxField'\nimport EditorField from './EditorField'\nimport FileField from './FileField'\nimport CheckboxField from './CheckboxField'\nimport CheckboxGroupField from './CheckboxGroupField'\n\nexport default {\n  title: 'Formik fields',\n}\n\nexport const Default = () => {\n  const renderField = ({ component: Comp, xs = 2, ...props }: any) => {\n    return (\n      <Grid item xs={xs} key={props.name}>\n        <Comp {...props} variant='outlined' startAdornment={<YouTubeIcon />} fullWidth />\n      </Grid>\n    )\n  }\n  const renderGroup = ({ title, items }: any) => {\n    return (\n      <>\n        {title && (\n          <Typography variant='h5' gutterBottom style={{ marginTop: 16 }}>\n            {title}\n          </Typography>\n        )}\n        <Grid container spacing={2}>\n          {items.map(renderField)}\n        </Grid>\n      </>\n    )\n  }\n\n  const options = ['Red', 'Yellow', 'Green', 'Blue'].map(d => ({ label: d, value: d }))\n\n  return (\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n      <Paper style={{ padding: 16 }}>\n        <Formik\n          onSubmit={values => console.log(values)}\n          initialValues={{\n            text: 'some text',\n            textarea: 'some text',\n            select: '',\n            money: 50.20,\n            phone: '0426893799',\n            postcode: '',\n            info: 'there is some text here as info, no edit',\n            date: '',\n            time: '',\n            datetime: '',\n            switch: true,\n            combo: '',\n            comboMulti: '',\n            editor: '',\n            file: '',\n            checkbox: true,\n            checkboxgroup: ''\n          }}\n        >\n          <Form>\n            {renderGroup({\n              title: 'Text Fields',\n              items: [\n                { label: 'Info field', name: 'info', component: InfoField },\n                { label: 'Text field', name: 'text', component: TextField },\n\n                { label: 'Money field', name: 'money', component: MoneyField },\n                { label: 'Phone field', name: 'phone', component: PhoneField },\n                { label: 'Postcode field', name: 'postcode', component: PostcodeField },\n                { label: 'Text area', name: 'textarea', component: TextAreaField, rows: 3, rowsMax: 5 },\n              ]\n            })}\n            {renderGroup({\n              title: 'Combo',\n              items: [\n                { label: 'Select field no options', name: 'select', component: SelectField },\n                { label: 'Select field', name: 'select', component: SelectField, options },\n                { label: 'ComboBox', name: 'combo', component: ComboBoxField, options },\n                {\n                  component: ComboBoxField,\n                  label: 'Multi ComboBox', name: 'comboMulti',\n                  options, multiple: true\n                },\n              ]\n            })}\n            {renderGroup({\n              title: 'Date time pickers',\n              items: [\n                { label: 'Date', name: 'date', component: DateField },\n                { label: 'Time', name: 'time', component: TimeField },\n                { label: 'DateTime', name: 'datetime', component: DateTimeField },\n              ]\n            })}\n            {renderGroup({\n              title: 'Others',\n              items: [\n                { label: 'Switch', name: 'switch', component: SwitchField },\n                {\n                  component: FileField, xs: 4,\n                  label: 'File', name: 'file'\n                },\n                {\n                  component: CheckboxField,\n                  label: 'Checkbox', name: 'checkbox'\n                },\n                {\n                  component: CheckboxGroupField,\n                  label: 'Checkbox Groups', name: 'checkboxgroup',\n                  options\n                },\n                {\n                  component: EditorField, xs: 8,\n                  label: 'Editor', name: 'editor'\n                },\n              ]\n            })}\n          </Form>\n        </Formik>\n      </Paper>\n    </MuiPickersUtilsProvider>\n  )\n}","import React from 'react'\n\nimport NumberFormat from 'react-number-format'\nimport AttachMoneyIcon from '@material-ui/icons/AttachMoney'\nimport TextField, { FormikTextFieldProps } from 'components/Formik/TextField'\n\ntype MoneyFieldProps = FormikTextFieldProps & {\n  fixedDecimal?: boolean\n  decimalScale?: number\n  format?: string\n  allowNegative?: boolean\n}\nconst MoneyField: React.FC<MoneyFieldProps> = ({ fixedDecimal, decimalScale, format, allowNegative, ...props }) => {\n  return (\n    <TextField\n      {...props}\n      startAdornment={<AttachMoneyIcon />}\n      // @ts-ignore\n      InputProps={{\n        inputComponent: MoneyFormat,\n        inputProps: {\n          autoComplete: 'disabled_auto_complete',\n          fixedDecimal,\n          decimalScale,\n          format,\n          allowNegative\n        }\n      }}\n    />\n  )\n}\nexport default MoneyField\n\nconst MoneyFormat = ({\n  fixedDecimal = true,\n  decimalScale = 2,\n  allowNegative = true,\n  inputRef,\n  onChange, name,\n  ...props\n}: any) => {\n  return (\n    <NumberFormat\n      {...props}\n\n      allowNegative={allowNegative}\n      decimalScale={decimalScale}\n      fixedDecimalScale={fixedDecimal}\n\n      name={name}\n      getInputRef={inputRef}\n      onValueChange={(values: any) => {\n        onChange({\n          target: {\n            name,\n            value: values.floatValue\n          }\n        })\n      }}\n    />\n  )\n}","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M10 15l5.19-3L10 9v6m11.56-7.83c.13.47.22 1.1.28 1.9.07.8.1 1.49.1 2.09L22 12c0 2.19-.16 3.8-.44 4.83-.25.9-.83 1.48-1.73 1.73-.47.13-1.33.22-2.65.28-1.3.07-2.49.1-3.59.1L12 19c-4.19 0-6.8-.16-7.83-.44-.9-.25-1.48-.83-1.73-1.73-.13-.47-.22-1.1-.28-1.9-.07-.8-.1-1.49-.1-2.09L2 12c0-2.19.16-3.8.44-4.83.25-.9.83-1.48 1.73-1.73.47-.13 1.33-.22 2.65-.28 1.3-.07 2.49-.1 3.59-.1L12 5c4.19 0 6.8.16 7.83.44.9.25 1.48.83 1.73 1.73z\"\n}), 'YouTube');\n\nexports.default = _default;"],"sourceRoot":""}