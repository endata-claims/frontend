{"version":3,"sources":["components/Formik/TextField/index.tsx","../node_modules/@material-ui/core/esm/InputAdornment/InputAdornment.js"],"names":["Loader","position","style","marginRight","width","height","FormikTextField","startAdornment","endAdornment","InputProps","required","validate","disabled","loading","props","isDisabled","component","TextField","value","InputAdornment","React","forwardRef","ref","children","classes","className","_props$component","Component","_props$disablePointer","disablePointerEvents","_props$disableTypogra","disableTypography","variantProp","variant","other","_objectWithoutProperties","muiFormControl","useFormControl","createElement","FormControlContext","Provider","_extends","clsx","root","hiddenLabel","filled","positionStart","positionEnd","margin","marginDense","Typography","color","withStyles","display","maxHeight","alignItems","whiteSpace","marginTop","marginLeft","pointerEvents","name"],"mappings":"sLAkBMA,EAAS,WACb,OACE,kBAAC,IAAD,CAAgBC,SAAS,OACvB,kBAAC,IAAD,CAAkBC,MAAO,CAAEC,YAAa,GAAIC,MAAO,GAAIC,OAAQ,QAsCtDC,UAjCyC,SAAC,GAA2G,IAAzGC,EAAwG,EAAxGA,eAAgBC,EAAwF,EAAxFA,aAAcC,EAA0E,EAA1EA,WAAYC,EAA8D,EAA9DA,SAAUC,EAAoD,EAApDA,SAAUC,EAA0C,EAA1CA,SAA0C,IAAhCC,eAAgC,SAAZC,EAAY,yGAC3JC,EAAaF,GAAWD,EAE9B,OACE,kBAAC,IAAD,eACEI,UAAWC,KACPH,EAFN,CAGEF,SAAUG,EACVL,UAAUK,GAAqBL,EAC/BD,WAAU,eACLA,EADK,CAERF,eAAiBA,EACf,kBAAC,IAAD,CAAgBN,SAAS,SACtBM,GAF6B,KAKlCC,aACEK,EAAU,kBAACb,EAAD,MACVQ,EACE,kBAAC,IAAD,CAAgBP,SAAS,OACtBO,GAGH,OAENG,SAAU,SAACO,GAET,OAAKH,GAAcL,IADU,IAAVQ,IAAgBA,GACe,YAC9CP,EAAiBA,EAASO,QAA9B,Q,iCCtDR,6EA+CIC,EAAiBC,IAAMC,YAAW,SAAwBP,EAAOQ,GACnE,IAAIC,EAAWT,EAAMS,SACjBC,EAAUV,EAAMU,QAChBC,EAAYX,EAAMW,UAClBC,EAAmBZ,EAAME,UACzBW,OAAiC,IAArBD,EAA8B,MAAQA,EAClDE,EAAwBd,EAAMe,qBAC9BA,OAAiD,IAA1BD,GAA2CA,EAClEE,EAAwBhB,EAAMiB,kBAC9BA,OAA8C,IAA1BD,GAA2CA,EAC/D7B,EAAWa,EAAMb,SACjB+B,EAAclB,EAAMmB,QACpBC,EAAQC,YAAyBrB,EAAO,CAAC,WAAY,UAAW,YAAa,YAAa,uBAAwB,oBAAqB,WAAY,YAEnJsB,EAAiBC,eAAoB,GACrCJ,EAAUD,EAcd,OAZIA,GAAeI,EAAeH,QAQ9BG,IAAmBH,IACrBA,EAAUG,EAAeH,SAGpBb,IAAMkB,cAAcC,IAAmBC,SAAU,CACtDtB,MAAO,MACNE,IAAMkB,cAAcX,EAAWc,YAAS,CACzChB,UAAWiB,YAAKlB,EAAQmB,KAAMlB,EAAWI,GAAwBL,EAAQK,qBAAsBO,EAAeQ,aAAepB,EAAQoB,YAAyB,WAAZX,GAAwBT,EAAQqB,OAAQ,CACxL,MAASrB,EAAQsB,cACjB,IAAOtB,EAAQuB,aACf9C,GAAqC,UAA1BmC,EAAeY,QAAsBxB,EAAQyB,aAC1D3B,IAAKA,GACJY,GAA4B,kBAAbX,GAA0BQ,EAE7BR,EAFiDH,IAAMkB,cAAcY,IAAY,CAC9FC,MAAO,iBACN5B,QAqDU6B,gBAnIK,CAElBT,KAAM,CACJU,QAAS,OACThD,OAAQ,SAERiD,UAAW,MACXC,WAAY,SACZC,WAAY,UAIdX,OAAQ,CACN,oCAAqC,CACnCY,UAAW,KAKfX,cAAe,CACb3C,YAAa,GAIf4C,YAAa,CACXW,WAAY,GAId7B,qBAAsB,CACpB8B,cAAe,QAIjBf,YAAa,GAGbK,YAAa,IA8FmB,CAChCW,KAAM,qBADOR,CAEZjC","file":"static/js/69.17e79189.chunk.js","sourcesContent":["import React from 'react'\n\nimport { Field } from 'formik'\nimport { TextField } from 'formik-material-ui'\nimport { TextFieldProps, CircularProgress } from '@material-ui/core'\nimport { InputAdornment } from '@material-ui/core'\n\nexport type FormikTextFieldProps = TextFieldProps & {\n  name: string\n\n  startAdornment?: React.ReactElement\n  endAdornment?: React.ReactElement\n  readOnly?: boolean\n\n  validate?: (value: any) => string | null | undefined\n  loading?: boolean\n}\n\nconst Loader = () => {\n  return (\n    <InputAdornment position='end'>\n      <CircularProgress style={{ marginRight: 16, width: 30, height: 30 }} />\n    </InputAdornment>\n  )\n}\n\nconst FormikTextField: React.FC<FormikTextFieldProps> = ({ startAdornment, endAdornment, InputProps, required, validate, disabled, loading = false, ...props }) => {\n  const isDisabled = loading || disabled\n\n  return (\n    <Field\n      component={TextField}\n      {...props}\n      disabled={isDisabled}\n      required={isDisabled ? false : required}\n      InputProps={{\n        ...InputProps,\n        startAdornment: !startAdornment ? null : (\n          <InputAdornment position='start'>\n            {startAdornment}\n          </InputAdornment>\n        ),\n        endAdornment:\n          loading ? <Loader /> :\n          endAdornment ? (\n            <InputAdornment position='end'>\n              {endAdornment}\n            </InputAdornment>\n          )\n          : null\n      }}\n      validate={(value: any) => {\n        const emptyValue = value !== 0 && !value\n        if (!isDisabled && required && emptyValue) return 'Required!'\n        if (validate) return validate(value)\n      }}\n    />\n  )\n}\nexport default FormikTextField","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport Typography from '../Typography';\nimport withStyles from '../styles/withStyles';\nimport FormControlContext, { useFormControl } from '../FormControl/FormControlContext';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    height: '0.01em',\n    // Fix IE 11 flexbox alignment. To remove at some point.\n    maxHeight: '2em',\n    alignItems: 'center',\n    whiteSpace: 'nowrap'\n  },\n\n  /* Styles applied to the root element if `variant=\"filled\"`. */\n  filled: {\n    '&$positionStart:not($hiddenLabel)': {\n      marginTop: 16\n    }\n  },\n\n  /* Styles applied to the root element if `position=\"start\"`. */\n  positionStart: {\n    marginRight: 8\n  },\n\n  /* Styles applied to the root element if `position=\"end\"`. */\n  positionEnd: {\n    marginLeft: 8\n  },\n\n  /* Styles applied to the root element if `disablePointerEvents=true`. */\n  disablePointerEvents: {\n    pointerEvents: 'none'\n  },\n\n  /* Styles applied if the adornment is used inside <FormControl hiddenLabel />. */\n  hiddenLabel: {},\n\n  /* Styles applied if the adornment is used inside <FormControl margin=\"dense\" />. */\n  marginDense: {}\n};\nvar InputAdornment = React.forwardRef(function InputAdornment(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      _props$disablePointer = props.disablePointerEvents,\n      disablePointerEvents = _props$disablePointer === void 0 ? false : _props$disablePointer,\n      _props$disableTypogra = props.disableTypography,\n      disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra,\n      position = props.position,\n      variantProp = props.variant,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"component\", \"disablePointerEvents\", \"disableTypography\", \"position\", \"variant\"]);\n\n  var muiFormControl = useFormControl() || {};\n  var variant = variantProp;\n\n  if (variantProp && muiFormControl.variant) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (variantProp === muiFormControl.variant) {\n        console.error('Material-UI: The `InputAdornment` variant infers the variant prop ' + 'you do not have to provide one.');\n      }\n    }\n  }\n\n  if (muiFormControl && !variant) {\n    variant = muiFormControl.variant;\n  }\n\n  return React.createElement(FormControlContext.Provider, {\n    value: null\n  }, React.createElement(Component, _extends({\n    className: clsx(classes.root, className, disablePointerEvents && classes.disablePointerEvents, muiFormControl.hiddenLabel && classes.hiddenLabel, variant === 'filled' && classes.filled, {\n      'start': classes.positionStart,\n      'end': classes.positionEnd\n    }[position], muiFormControl.margin === 'dense' && classes.marginDense),\n    ref: ref\n  }, other), typeof children === 'string' && !disableTypography ? React.createElement(Typography, {\n    color: \"textSecondary\"\n  }, children) : children));\n});\nprocess.env.NODE_ENV !== \"production\" ? InputAdornment.propTypes = {\n  /**\n   * The content of the component, normally an `IconButton` or string.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * Disable pointer events on the root.\n   * This allows for the content of the adornment to focus the input on click.\n   */\n  disablePointerEvents: PropTypes.bool,\n\n  /**\n   * If children is a string then disable wrapping in a Typography component.\n   */\n  disableTypography: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  muiFormControl: PropTypes.object,\n\n  /**\n   * The position this adornment should appear relative to the `Input`.\n   */\n  position: PropTypes.oneOf(['start', 'end']),\n\n  /**\n   * The variant to use.\n   * Note: If you are using the `TextField` component or the `FormControl` component\n   * you do not have to set this manually.\n   */\n  variant: PropTypes.oneOf(['standard', 'outlined', 'filled'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiInputAdornment'\n})(InputAdornment);"],"sourceRoot":""}