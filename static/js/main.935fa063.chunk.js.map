{"version":3,"sources":["providers/ThemeProvider.tsx","providers/ApolloProvider/links/linkHttp.ts","providers/ApolloProvider/links/linkAuth.ts","providers/ApolloProvider/links/linkRefreshToken.ts","providers/ApolloProvider/localState/localSchema.ts","providers/ApolloProvider/localState/localResolvers.ts","providers/ApolloProvider/client.ts","providers/ApolloProvider/index.tsx","serviceWorker.ts","index.tsx","App.tsx","configs/index.ts"],"names":["ThemeProvider","children","overrideStyles","MuiFormLabelStyles","MuiSwitchStyles","MuiButttonStyles","MuiTabStyles","Helmet","rel","href","CssBaseline","theme","createMuiTheme","palette","primary","main","makeStyles","width","height","backgroundColor","outline","root","fontWeight","name","checked","color","thumb","label","textTransform","wrapper","HttpLink","uri","API_ENDPOINT","withToken","setContext","token","localStorage","ACCESS_TOKEN","headers","authorization","RetryLink","attempts","retryIf","error","operation","a","isTokenExpiredError","refreshToken","REFRESH_TOKEN","kickUserToLogin","fetchNewAccessToken","catch","console","log","res","accessToken","newRefreshToken","setItem","getContext","window","location","REDIRECT_URL","statusCode","rfToken","fetch","method","body","JSON","stringify","query","then","data","json","refresh","gql","Query","_states","value","_claimCategories","AuthenticatedUser","_appRoutes","_","__","client","state","routes","me","privileges","menus","map","toLowerCase","_rootRoute","rootPath","includes","_customisation","customisation","company","ClaimJob","_portfolios","hasBuilding","hasContents","hasRestoration","push","length","_requestDate","user","userType","currentUser","requestDate","building","jobSuppliers","restoration","contents","_request","request","requestType","_insuredPhone","insured","phone1","phone2","phone3","filter","x","join","_incidentAddress","incidentDetail","riskAddress","line1","suburb","postcode","_claimValue","authorisedValue","scopedValue","quote","total","_claimStatus","status","quoteStatus","statusName","claimStatus","_claimBuilder","authorisedSupplier","companyName","scopingSupplier","_claimRestorer","_allocatedBuilder","supplier","_allocatedRestorer","ClaimPortfolio","_providerAndStatus","portfolioType","toCollectExcess","excessValue","getPortfolioStatus","_portfolioTooltips","split","trim","companyPhone1","companyPhone2","ClaimNote","_privacy","private","role","excess","ApolloClient","cache","InMemoryCache","link","from","linkRefreshToken","linkHttp","typeDefs","resolvers","Provider","ApolloProvider","apolloClient","Boolean","hostname","match","ReactDOM","render","className","style","utils","DateFnsUtils","autoHideDuration","preventDuplicate","anchorOrigin","vertical","horizontal","basename","PUBLIC_URL","Suspense","fallback","exact","path","component","React","lazy","route","key","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","process","COMPANION_ENDPOINT","COMPANY_RESOURCE","REACT_APP_COMPANY_RESOURCE"],"mappings":"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","file":"static/js/main.935fa063.chunk.js","sourcesContent":["import React from 'react'\nimport { MuiThemeProvider, createMuiTheme, makeStyles } from '@material-ui/core/styles'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport { Helmet } from 'react-helmet'\n\nconst ThemeProvider: React.FC = ({ children }) => {\n  overrideStyles({})\n\n  MuiFormLabelStyles({})\n  MuiSwitchStyles({})\n  MuiButttonStyles({})\n  MuiTabStyles({})\n\n  return (\n    <>\n      <Helmet>\n        <link\n          rel='stylesheet'\n          href='https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap'\n        />\n      </Helmet>\n      <CssBaseline />\n      <MuiThemeProvider theme={theme}>\n        {children}\n      </MuiThemeProvider>\n    </>\n  )\n}\nexport default ThemeProvider\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#0f5b78'\n    }\n  },\n  // status: {\n  //   danger: 'orange',\n  // },\n})\nconst overrideStyles = makeStyles({\n  '@global': {\n    '*::-webkit-scrollbar': {\n      width: '0.4em',\n      height: '0.4em',\n    },\n    '*::-webkit-scrollbar-track': {\n      '-webkit-box-shadow': 'inset 0 0 6px rgba(0,0,0,0.00)'\n    },\n    '*::-webkit-scrollbar-thumb': {\n      backgroundColor: 'rgba(0,0,0,.1)',\n      outline: '1px solid slategrey'\n    }\n  }\n})\n\n// @ts-ignore\nconst MuiFormLabelStyles = makeStyles({\n  root: {\n    // color: 'rgba(0, 0, 0, 0.84) !important',\n    fontWeight: '600 !important'\n  }\n}, { name: 'MuiFormLabel' })\n\nconst MuiSwitchStyles = makeStyles({\n  checked: {\n    '& .MuiSwitch-thumb': {\n      color: 'green !important'\n    }\n  },\n  thumb: {\n    color: 'red'\n  }\n}, { name: 'MuiSwitch' })\n\nconst MuiButttonStyles = makeStyles({\n  label: {\n    textTransform: 'none'\n  }\n}, { name: 'MuiButton' })\n\nconst MuiTabStyles = makeStyles({\n  wrapper: {\n    textTransform: 'none'\n  }\n}, { name: 'MuiTab' })\n","import { HttpLink } from '@apollo/client'\nimport { API_ENDPOINT } from 'configs'\n\nexport default new HttpLink({\n  uri: API_ENDPOINT,\n  // credentials: 'include'\n})","\nimport { setContext } from '@apollo/link-context'\n\nexport const withToken = setContext(() => {\n  const token = localStorage.ACCESS_TOKEN\n  if(token) return {\n    headers: {\n      authorization: `Bearer ${token}`\n    }\n  }\n})","import { RetryLink } from '@apollo/link-retry'\nimport { API_ENDPOINT } from 'configs'\n\nexport default new RetryLink({\n  attempts: {\n    retryIf: async (error, operation) => {\n      if(isTokenExpiredError(error)) {\n        const refreshToken = localStorage.REFRESH_TOKEN\n        if(!refreshToken || !API_ENDPOINT) {\n          kickUserToLogin()\n          return false\n        }\n\n        const res = await fetchNewAccessToken(API_ENDPOINT, refreshToken)\n          .catch(error => console.log(error))\n        if(!res) {\n          kickUserToLogin()\n          return false\n        }\n\n        const { accessToken, refreshToken: newRefreshToken } = res\n        localStorage.setItem('ACCESS_TOKEN', accessToken)\n        localStorage.setItem('REFRESH_TOKEN', newRefreshToken)\n        operation.setContext({\n          ...operation.getContext().headers,\n          authorization: `Bearer ${accessToken}`\n        })\n\n        return true\n      }\n\n      return false\n    }\n  }\n})\n\nconst kickUserToLogin = () => {\n  window.location.href = localStorage.REDIRECT_URL || '/user/signin'\n}\n\nconst isTokenExpiredError = (error: any) => {\n  return error && error.name ==='ServerError' && 'statusCode' in error && error.statusCode === 401\n}\n\nconst fetchNewAccessToken = (uri: string, rfToken: string) => fetch(uri, {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'Authorization': `Bearer ${rfToken}`\n  },\n  body: JSON.stringify({\n    query: `\n      mutation {\n        refresh: userRenewToken {\n          accessToken\n          refreshToken\n        }\n      }\n    `,\n  }),\n})\n  .then(data => data.json())\n  .then(({ data: { refresh: { accessToken, refreshToken } } }) => {\n    return { accessToken, refreshToken }\n  })","import { gql } from '@apollo/client'\n\nexport default gql`\n  extend type Query {\n    _states: [SelectOption]!\n    _claimCategories: [SelectOption]!\n  }\n  type SelectOption {\n    label: String\n    value: ID!\n  }\n\n  extend type AuthenticatedUser {\n    _appRoutes: [String!]\n    _rootRoute: String!\n    _customisation: AppCustomization\n  }\n  type AppCustomization {\n    alias: String\n    favicon: String\n    logo: String\n    companyLogo: String\n  }\n\n  extend type ClaimJob {\n    _portfolios: [PortfolioType!]\n    _requestDate: String\n    _request: String\n    _insuredPhone: String\n    _incidentAddress: String\n    _claimValue: String\n    _claimStatus: String\n\n    _claimBuilder: String\n    _claimRestorer: String\n\n    _allocatedBuilder: String\n    _allocatedRestorer: String\n\n    # _jobNotes: _ClaimJobNoteConnection\n  }\n\n  # type _ClaimJobNoteConnection {\n  #   _isDisplayInitialCallMade: Boolean\n  # }\n\n  extend type ClaimPortfolio {\n    _providerAndStatus: String\n    _portfolioTooltips: String\n  }\n\n  extend type ClaimNote {\n    _privacy: String\n  }\n  # extend type ClaimNoteConnection {\n  #   _isDisplayInitialCallMade: Boolean\n  #   _isDisplayApointmentMade: Boolean\n  #   _isDisplayChangeApointment: Boolean\n  #   _isDisplayNewJobNote: Boolean\n  # }\n\n  # input ClaimWhereInput {\n  #   keyWords: String\n\n  #   createDateFrom: Date\n  #   createDateTo: Date\n\n  #   incidentDate: DateString\n  #   incidentDateFrom: DateString\n  #   incidentDateTo: DateString\n\n  #   managerTeams: [String]\n  #   insurers: [ID!]\n  #   managers: [ID!]\n  #   adjusters: [ID!]\n  #   buildingSuppliers: [ID!]\n  #   contentsSuppliers: [ID!]\n  #   restorationSuppliers: [ID!]\n  #   internalAssessors: [ID!]\n\n  #   catCodes: [ID!]\n  #   eventTypes: [ID!]\n  #   states: [State]\n  # }\n`","import { Resolvers, gql } from '@apollo/client'\n// import { print } from 'graphql'\n\nexport default {\n  Query: {\n    _states: () => {\n      return [\n        { label: 'ACT' , value: 'ACT' },\n        { label: 'NSW' , value: 'NSW' },\n        { label: 'NT' , value: 'NT' },\n        { label: 'QLD' , value: 'QLD' },\n        { label: 'SA' , value: 'SA' },\n        { label: 'TAS' , value: 'TAS' },\n        { label: 'VIC' , value: 'VIC' },\n        { label: 'WA' , value: 'WA' }\n      ]\n    },\n    _claimCategories: () => {\n      return [\n        { label: 'Non - Urgent' , value: 'NonUrgent' },\n        { label: 'Semi - Urgent' , value: 'SemiUrgent' },\n        { label: 'Urgent' , value: 'Urgent' },\n      ]\n    },\n  },\n  AuthenticatedUser: {\n    _appRoutes: async (_, __ , { client }) => {\n      const state = await client.query({\n        query: gql`\n          query appRoutes {\n            me {\n              privileges {\n                menus {\n                  name: nodeName\n                }\n              }\n            }\n          }\n        `\n      })\n      const routes = state?.data?.me?.privileges?.menus.map(({ name }: any) => `/app/${name.toLowerCase()}`)\n      return routes\n    },\n    _rootRoute: async (_, __, { client }) => {\n      const state = await client.query({\n        query: gql`\n          query appRoutes {\n            me {\n              privileges {\n                menus {\n                  name: nodeName\n                }\n              }\n            }\n          }\n        `\n      })\n      const routes = state?.data?.me?.privileges?.menus.map(({ name }: any) => `${name.toLowerCase()}`)\n      const rootPath =\n        routes?.includes('dashboard') ? 'dashboard' :\n        routes?.includes('claims') ? 'claims' :\n        routes?.includes('reports') ? 'reports' :\n        'settings'\n\n      return `/app/${rootPath}`\n    },\n    _customisation: async (_, __, { client }) => {\n      const state = await client.query({\n        query: gql`\n          query appRoutes {\n            me {\n              company {\n                customisation {\n                  alias: applicationAlias\n                  favicon: applicationFavicon\n                  logo: applicationLogo\n                  companyLogo: displayCompanyLogo\n                }\n              }\n            }\n          }\n        `\n      })\n      const customisation = state?.data?.me?.company?.customisation\n\n      return customisation\n    },\n    // _claims: async (root, args, { client }, info) => {\n    //   const fragmentString = info?.field.selectionSet\n    //     ? print(info.field.selectionSet)\n    //     : ''\n    //   const fragmentMap = info?.fragmentMap\n    //     ? Object.values(info.fragmentMap).map(frag => print(frag)).join(' ')\n    //     : ''\n\n    //   const state = await client.query({\n    //     query: gql`\n    //       query _claims($first: Int, $after: String, $where: ClaimJobFilter) {\n    //         claimJobs(first: $first, after: $after, where: $where) @connection(key: \"claimJobs\", filter: [\"where\"])\n    //         ${fragmentString}\n    //       }\n    //       ${fragmentMap}\n    //     `,\n    //     variables: args,\n    //     fetchPolicy: 'no-cache'\n    //   })\n\n    //   const claims = state?.data?.claimJobs\n\n    //   return claims\n    // }\n  },\n  ClaimJob: {\n    _portfolios: async ({ hasBuilding, hasContents, hasRestoration }) => {\n      const _portfolios = []\n\n      if(hasBuilding) _portfolios.push('Building')\n      if(hasContents) _portfolios.push('Contents')\n      if(hasRestoration) _portfolios.push('Restoration')\n\n      return _portfolios.length ? _portfolios : null\n    },\n    _requestDate: async (root, __, { client }) => {\n      const user = await client.query({ query: gql`query _claimValue { currentUser { userType }}`})\n      const userType = user?.data?.currentUser?.userType\n\n      const requestDate =\n        userType === 'Builder' ? root?.building?.jobSuppliers[0]?.requestDate :\n        userType === 'Restorer' ? root?.restoration?.jobSuppliers[0]?.requestDate :\n        userType === 'ContentSupplier' ? root?.contents?.jobSuppliers[0]?.requestDate :\n        '-'\n\n      return requestDate\n    },\n    _request: async (root, __, { client }) => {\n      const user = await client.query({ query: gql`query _claimValue { currentUser { userType }}`})\n      const userType = user?.data?.currentUser?.userType\n      const request =\n        userType === 'Builder' ? root?.building?.jobSuppliers[0]?.requestType :\n        userType === 'Restorer' ? root?.restoration?.jobSuppliers[0]?.requestType :\n        userType === 'ContentSupplier' ? root?.contents?.jobSuppliers[0]?.requestType :\n        '-'\n\n      return request\n    },\n    _insuredPhone: (root) => {\n      const { phone1, phone2, phone3 } = root.insured\n      return [phone1, phone2, phone3].filter(x => x).join(', ')\n    },\n    _incidentAddress: (root) => {\n      if(root?.incidentDetail?.riskAddress) {\n        const { line1, suburb, state, postcode } = root.incidentDetail.riskAddress\n        return `${line1} ${suburb} ${state}, ${postcode}`\n      }\n\n      return null\n    },\n    _claimValue: async (root, __, { client }) => {\n      const user = await client.query({ query: gql`query _claimValue { currentUser { userType }}`})\n      const userType = user?.data?.currentUser?.userType\n\n      const value =\n        userType === 'Administrator' ? (root?.building?.authorisedValue || root?.building?.scopedValue) :\n        userType === 'Builder' ? root?.building?.jobSuppliers[0]?.quote?.total :\n        userType === 'Restorer' ? root?.restoration?.jobSuppliers[0]?.quote?.total :\n        userType === 'ContentSupplier' ? root?.contents?.jobSuppliers[0]?.quote?.total :\n        '-'\n\n      return value ? `$${value}` : `-`\n    },\n    _claimStatus: async (root, __, { client }) => {\n      const user = await client.query({ query: gql`query _claimValue { currentUser { userType }}`})\n      const userType = user?.data?.currentUser?.userType\n      const status =\n        userType === 'Builder' ? (root?.building?.jobSuppliers[0]?.quote?.quoteStatus?.statusName || root?.building?.claimStatus?.statusName) :\n        userType === 'Restorer' ? (root?.restoration?.jobSuppliers[0]?.quote?.quoteStatus?.statusName || root?.restoration?.claimStatus?.statusName) :\n        userType === 'ContentSupplier' ? (root?.contents?.jobSuppliers[0]?.quote?.quoteStatus?.statusName || root?.contents?.claimStatus?.statusName) :\n        '-'\n\n      return status\n    },\n    _claimBuilder: root => {\n      return (root?.building?.authorisedSupplier?.companyName || root?.building?.scopingSupplier?.companyName) ?? '-'\n    },\n    _claimRestorer: root => {\n      return (root?.restoration?.authorisedSupplier?.companyName || root?.restoration?.scopingSupplier?.companyName) ?? '-'\n    },\n    _allocatedBuilder: async (root, __, { client }) => {\n      const user = await client.query({ query: gql`query _claimValue { currentUser { userType }}`})\n      const userType = user?.data?.currentUser?.userType\n      if(userType === 'Builder') {\n        return root?.building?.jobSuppliers?.quote?.supplier?.companyName ?? 'N/a'\n      }\n\n      return root?.building?.authorisedSupplier?.companyName || root?.building?.scopingSupplier?.companyName || 'N/a'\n    },\n    _allocatedRestorer: async (root, __, { client }) => {\n      const user = await client.query({ query: gql`query _claimValue { currentUser { userType }}`})\n      const userType = user?.data?.currentUser?.userType\n      if(userType === 'Restorer') {\n        return root?.restoration?.jobSuppliers?.quote?.supplier?.companyName ?? 'N/a'\n      }\n\n      return root?.restoration?.authorisedSupplier?.companyName || root?.restoration?.scopingSupplier?.companyName || 'N/a'\n    },\n    // _jobNotes: root => root\n  },\n  ClaimPortfolio: {\n    _providerAndStatus: async (root, __, { client }) => {\n      if(root.portfolioType === 'Contents') {\n        const { claimStatus, toCollectExcess, excessValue } = root\n        return `${claimStatus.statusName} ${toCollectExcess ? `, Excess - $${excessValue}` : ''}`\n      }\n\n      const user = await client.query({ query: gql`query _claimValue { currentUser { userType }}`})\n      const userType = user?.data?.currentUser?.userType\n      const status = getPortfolioStatus(root, userType)\n      return status\n    },\n    _portfolioTooltips: root => {\n      const supplier = root.authorisedSupplier || root.scopingSupplier || null\n      if (!supplier) return null\n\n      const name = supplier?.companyName ? `${supplier?.companyName?.split('-')[0].trim()}\\n` : ''\n      const phone1 = supplier?.companyPhone1 ? `${supplier?.companyPhone1}\\n` : ''\n      const phone2 = supplier?.companyPhone2 ? `${supplier?.companyPhone2}` : ''\n\n      return `${name}${phone1}${phone2}`\n    }\n  },\n  // ClaimNoteConnection: {\n  //   _isDisplayInitialCallMade: async (root, __, { client }) => {\n  //     const user = await client.query({ query: gql`query _claimValue { currentUser { userType }}` })\n  //     console.log(user)\n\n  //     return null\n  //   }\n  //   // _isDisplayApointmentMade\n  //   // _isDisplayChangeApointment\n  //   // _isDisplayNewJobNote\n  // },\n  ClaimNote: {\n    _privacy: root => {\n      return root?.private === 1 ? 'Private' : 'Public'\n    }\n  },\n  // _ClaimJobNoteConnection: {\n  //   _isDisplayInitialCallMade: () => {\n  //     return true\n  //   }\n  // }\n} as Resolvers\n\nconst getPortfolioStatus = (value: any, role: any) => {\n  let name, status\n  const excess = value.toCollectExcess ? `- $${value.excessValue}` : null\n  if (role === 'Restorer') {\n    name = value.jobSuppliers && value.jobSuppliers[0] && value.jobSuppliers[0].quote && value.jobSuppliers[0].quote.supplier ? value.jobSuppliers[0].quote.supplier.companyName : ''\n    status = value.jobSuppliers && value.jobSuppliers[0] && value.jobSuppliers[0].quote ? value.jobSuppliers[0].quote.quoteStatus.statusName : ''\n  }\n  else {\n    name = value.authorisedSupplier ? value.authorisedSupplier.companyName : value.scopingSupplier ? value.scopingSupplier.companyName : null\n    status = value.claimStatus.statusName\n  }\n\n  return `${name ? name : ''}${status ? `, ${status}` : ''}${excess ? `, Excess ${excess}` : ''}`\n}","import { ApolloClient, from, InMemoryCache } from '@apollo/client'\n\nimport linkHttp from './links/linkHttp'\nimport { withToken } from './links/linkAuth'\nimport linkRefreshToken from './links/linkRefreshToken'\n\nimport typeDefs from './localState/localSchema'\nimport resolvers from './localState/localResolvers'\n\nexport default new ApolloClient({\n  cache: new InMemoryCache(),\n  link: from([\n    linkRefreshToken,\n    withToken,\n    linkHttp,\n  ]),\n  typeDefs,\n  resolvers\n})","import React from 'react'\nimport { ApolloProvider } from '@apollo/client'\nimport apolloClient from './client'\n\nconst Provider: React.FC = ({ children }) => (\n  <ApolloProvider client={apolloClient}>\n    {children}\n  </ApolloProvider>\n)\nexport default Provider","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from 'App'\nimport * as serviceWorker from 'serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\nserviceWorker.unregister()\n","import React from 'react'\n\nimport { SnackbarProvider } from 'notistack'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport ThemeProvider from 'providers/ThemeProvider'\nimport ApolloProvider from 'providers/ApolloProvider'\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers'\nimport DateFnsUtils from '@date-io/date-fns'\nimport { PUBLIC_URL } from 'configs'\n\nexport default () => {\n  return (\n    <div className='App' style={{ height: '100vh' }}>\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <SnackbarProvider\n          autoHideDuration={1500}\n          preventDuplicate={true}\n          anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n        >\n          <Router basename={PUBLIC_URL}>\n            <ThemeProvider>\n              <ApolloProvider>\n                <React.Suspense fallback={null}>\n                  <Switch>\n                    {/* <Redirect path='/' to='/app' /> */}\n                    {[\n                      { exact: true, path: '/user/signin', component: React.lazy(() => import('pages/auth/Signin')) },\n                      { exact: false, path: '/user/login', component: React.lazy(() => import('pages/auth/Login')) },\n                      { exact: false, path: '/app', component: React.lazy(() => import('pages/app')) },\n                      { exact: false, path: '/', component: React.lazy(() => import('pages/app')) },\n                      { exact: true, path: '*', component: React.lazy(() => import('layouts/NotFound')) },\n                    ].map(route => (\n                      <Route key={route.path} {...route} />\n                    ))}\n                  </Switch>\n                </React.Suspense>\n              </ApolloProvider>\n            </ThemeProvider>\n          </Router>\n        </SnackbarProvider>\n      </MuiPickersUtilsProvider>\n    </div>\n  )\n}","export const API_ENDPOINT = process.env.REACT_APP_API_ENDPOINT\nexport const REDIRECT_URL = process.env.REACT_APP_DEFAULT_REDIRECT_URL || 'https://www.endataclaims.com/'\nexport const COMPANION_ENDPOINT = process.env.REACT_APP_COMPANION_ENDPOINT\n\nexport const COMPANY_RESOURCE = process.env.REACT_APP_COMPANY_RESOURCE || 'https://company-resources-edt.s3-ap-southeast-2.amazonaws.com'\nexport const PUBLIC_URL = process.env.PUBLIC_URL || ''\n"],"sourceRoot":""}