{"version":3,"sources":["components/Formik/ComboBoxField/index.tsx","../node_modules/@material-ui/core/esm/internal/SwitchBase.js","../node_modules/@material-ui/core/esm/internal/svg-icons/CheckBoxOutlineBlank.js","../node_modules/@material-ui/core/esm/internal/svg-icons/CheckBox.js","../node_modules/@material-ui/core/esm/internal/svg-icons/IndeterminateCheckBox.js","../node_modules/@material-ui/core/esm/Checkbox/Checkbox.js"],"names":["ComboBoxField","options","name","multiple","disabled","readOnly","fullWidth","loading","startAdornment","props","isSubmitting","useFormikContext","useField","field","meta","helpers","React","useState","value","setValue","fieldValue","optionString","JSON","stringify","useEffect","length","currentValue","filter","option","includes","find","error","touched","isError","Boolean","onChange","e","selected","map","x","disableCloseOnSelect","filterSelectedOptions","getOptionLabel","label","groupBy","group","renderInput","params","mappedStartAdornment","InputProps","mappedEndAdornment","style","width","height","endAdornment","helperText","flexWrap","renderTags","join","margin","paddingLeft","whiteSpace","overflow","textOverflow","renderOption","Fragment","key","icon","fontSize","checkedIcon","marginRight","checked","SwitchBase","forwardRef","ref","autoFocus","checkedProp","classes","className","defaultChecked","disabledProp","id","inputProps","inputRef","onBlur","onFocus","required","tabIndex","type","other","_objectWithoutProperties","_useControlled","useControlled","controlled","default","_useControlled2","_slicedToArray","setCheckedState","muiFormControl","useFormControl","hasLabelFor","createElement","IconButton","_extends","component","clsx","root","role","undefined","event","input","newChecked","target","withStyles","padding","cursor","position","opacity","top","left","zIndex","createSvgIcon","d","defaultCheckedIcon","CheckBoxIcon","defaultIcon","CheckBoxOutlineBlankIcon","defaultIndeterminateIcon","IndeterminateCheckBoxIcon","Checkbox","_props$checkedIcon","_props$color","color","_props$icon","_props$indeterminate","indeterminate","_props$indeterminateI","indeterminateIcon","_props$size","size","concat","capitalize","cloneElement","theme","palette","text","secondary","colorPrimary","primary","main","backgroundColor","fade","action","hoverOpacity","colorSecondary"],"mappings":"iPAkIeA,UA1GqC,SAAC,GAAgH,IAAD,IAA7GC,eAA6G,MAAnG,GAAmG,EAA/FC,EAA+F,EAA/FA,KAA+F,IAAzFC,gBAAyF,SAAvEC,EAAuE,EAAvEA,SAAUC,EAA6D,EAA7DA,SAAUC,EAAmD,EAAnDA,UAAWC,EAAwC,EAAxCA,QAASC,EAA+B,EAA/BA,eAAmBC,EAAY,0GAC1JC,EAAiBC,cAAjBD,aAD0J,EAGnIE,YAASV,GAH0H,mBAG3JW,EAH2J,KAGpJC,EAHoJ,KAG9IC,EAH8I,OAIxIC,IAAMC,SAAc,IAJoH,mBAI3JC,EAJ2J,KAIpJC,EAJoJ,KAK5JC,EAAaP,EAAMK,MACnBG,EAAeC,KAAKC,UAAUtB,GACpCe,IAAMQ,WAAU,WACd,GAAGvB,GAAWA,EAAQwB,OAAQ,CAE5B,IAAMC,EAAevB,EAEjBF,EAAQ0B,QAAO,SAAAC,GAAM,OAAIR,EAAWS,SAASD,EAAOV,UAEpDjB,EAAQ6B,MAAK,SAAAF,GAAM,OAAIA,EAAOV,OAASE,KAE3CD,EAASO,MAGV,CAACN,EAAYjB,EAAUkB,IAC1B,IASQU,EAAmBjB,EAAnBiB,MAAOC,EAAYlB,EAAZkB,QACTC,EAAUC,QAAQF,GAAWD,GAEnC,OAEE,kBAAC,IAAD,iBACMtB,EADN,CAEES,MAAOA,EACPiB,SAjBsB,SAACC,EAAQC,GACjC,IAAKA,EAAU,OAAOtB,EAAQI,SAAS,IAEvC,IAAMD,EAASf,EAEXkC,EAASC,KAAI,SAACC,GAAD,OAAYA,EAAErB,SAD3BmB,EAASnB,MAEbH,EAAQI,SAASD,IAafd,SAAUG,GAAWH,GAAYC,GAAYK,EAE7CP,SAAUA,EACVqC,qBAAsBrC,EACtBsC,uBAAwBtC,EAGxBF,QAASA,EACTyC,eAAgB,SAACd,GAAD,OAAiBA,EAAOe,OAAS,IACjDC,QAAS,SAAChB,GAAD,OAAiBA,EAAOiB,OACjCC,YAAa,SAAAC,GACX,IAAMC,EAAuB7C,EAAW4C,EAAOE,WAAWzC,eACxDA,GACA,KAEI0C,EAAqB3C,EACvB,kBAAC,IAAD,CAAkB4C,MAAO,CAAEC,MAAO,GAAIC,OAAQ,MAC9CN,EAAOE,WAAWK,aAEtB,OAEE,kBAAC,IAAD,eACEvB,MAAOE,EACPsB,WAAYtB,EAAUF,EAAQ,KAC9BzB,UAAWA,GAEPG,EACAsC,EANN,CAOEE,WAAU,eACLF,EAAOE,WADF,CAERE,MAAO,CAAEK,SAAU,UACnBhD,eAAgBwC,EAChBM,aAAcJ,QAKtBO,WAAY,SAACvC,GACX,IAAMyB,EAAQzB,EAAMoB,KAAI,qBAAGK,SAAwBe,KAAK,MAExD,OACE,uBAAGP,MAAO,CACRQ,OAAQ,EAAGC,YAAa,EACxBC,WAAY,SACZC,SAAU,SACVC,aAAc,aAEbpB,IAIPqB,aAAc,SAACpC,EAAD,OAAgBS,EAAhB,EAAgBA,SAAhB,OACZ,kBAAC,IAAM4B,SAAP,CAAgBC,IAAKtC,EAAOV,OACzBf,GACC,kBAAC,IAAD,CACEgE,KAAM,kBAAC,IAAD,CAA0BC,SAAS,UACzCC,YAAa,kBAAC,IAAD,CAAcD,SAAS,UACpCjB,MAAO,CAAEmB,YAAa,GACtBC,QAASlC,IAGZT,EAAOe,a,iCC5HlB,8FAkCI6B,EAAaxD,IAAMyD,YAAW,SAAoBhE,EAAOiE,GAC3D,IAAIC,EAAYlE,EAAMkE,UAClBC,EAAcnE,EAAM8D,QACpBF,EAAc5D,EAAM4D,YACpBQ,EAAUpE,EAAMoE,QAChBC,EAAYrE,EAAMqE,UAClBC,EAAiBtE,EAAMsE,eACvBC,EAAevE,EAAML,SACrB+D,EAAO1D,EAAM0D,KACbc,EAAKxE,EAAMwE,GACXC,EAAazE,EAAMyE,WACnBC,EAAW1E,EAAM0E,SACjBjF,EAAOO,EAAMP,KACbkF,EAAS3E,EAAM2E,OACfjD,EAAW1B,EAAM0B,SACjBkD,EAAU5E,EAAM4E,QAChBhF,EAAWI,EAAMJ,SACjBiF,EAAW7E,EAAM6E,SACjBC,EAAW9E,EAAM8E,SACjBC,EAAO/E,EAAM+E,KACbtE,EAAQT,EAAMS,MACduE,EAAQC,YAAyBjF,EAAO,CAAC,YAAa,UAAW,cAAe,UAAW,YAAa,iBAAkB,WAAY,OAAQ,KAAM,aAAc,WAAY,OAAQ,SAAU,WAAY,UAAW,WAAY,WAAY,WAAY,OAAQ,UAEnQkF,EAAiBC,YAAc,CACjCC,WAAYjB,EACZkB,QAAS5D,QAAQ6C,GACjB7E,KAAM,eAEJ6F,EAAkBC,YAAeL,EAAgB,GACjDpB,EAAUwB,EAAgB,GAC1BE,EAAkBF,EAAgB,GAElCG,EAAiBC,cA+BjB/F,EAAW4E,EAEXkB,GACsB,qBAAb9F,IACTA,EAAW8F,EAAe9F,UAI9B,IAAIgG,EAAuB,aAATZ,GAAgC,UAATA,EACzC,OAAOxE,IAAMqF,cAAcC,IAAYC,YAAS,CAC9CC,UAAW,OACX1B,UAAW2B,YAAK5B,EAAQ6B,KAAM5B,EAAWP,GAAWM,EAAQN,QAASnE,GAAYyE,EAAQzE,UACzFA,SAAUA,EACVmF,SAAU,KACVoB,UAAMC,EACNvB,QA5CgB,SAAqBwB,GACjCxB,GACFA,EAAQwB,GAGNX,GAAkBA,EAAeb,SACnCa,EAAeb,QAAQwB,IAuCzBzB,OAnCe,SAAoByB,GAC/BzB,GACFA,EAAOyB,GAGLX,GAAkBA,EAAed,QACnCc,EAAed,OAAOyB,IA8BxBnC,IAAKA,GACJe,GAAQzE,IAAMqF,cAAc,QAASE,YAAS,CAC/C5B,UAAWA,EACXJ,QAASK,EACTG,eAAgBA,EAChBD,UAAWD,EAAQiC,MACnB1G,SAAUA,EACV6E,GAAImB,GAAenB,EACnB/E,KAAMA,EACNiC,SAnCsB,SAA2B0E,GACjD,IAAIE,EAAaF,EAAMG,OAAOzC,QAC9B0B,EAAgBc,GAEZ5E,GACFA,EAAS0E,EAAOE,IA+BlB1G,SAAUA,EACVqE,IAAKS,EACLG,SAAUA,EACVC,SAAUA,EACVC,KAAMA,EACNtE,MAAOA,GACNgE,IAAcX,EAAUF,EAAcF,MA8G5B8C,gBArOK,CAClBP,KAAM,CACJQ,QAAS,GAEX3C,QAAS,GACTnE,SAAU,GACV0G,MAAO,CACLK,OAAQ,UACRC,SAAU,WACVC,QAAS,EACTjE,MAAO,OACPC,OAAQ,OACRiE,IAAK,EACLC,KAAM,EACN5D,OAAQ,EACRuD,QAAS,EACTM,OAAQ,IAqNsB,CAChCtH,KAAM,qBADO+G,CAEZzC,I,qGC5OYiD,cAAczG,IAAMqF,cAAc,OAAQ,CACvDqB,EAAG,+FACD,wBCFWD,cAAczG,IAAMqF,cAAc,OAAQ,CACvDqB,EAAG,wIACD,Y,QCFWD,cAAczG,IAAMqF,cAAc,OAAQ,CACvDqB,EAAG,kGACD,yB,gBCwDAC,EAAqB3G,IAAMqF,cAAcuB,EAAc,MACvDC,EAAc7G,IAAMqF,cAAcyB,EAA0B,MAC5DC,EAA2B/G,IAAMqF,cAAc2B,EAA2B,MAC1EC,EAAWjH,IAAMyD,YAAW,SAAkBhE,EAAOiE,GACvD,IAAIwD,EAAqBzH,EAAM4D,YAC3BA,OAAqC,IAAvB6D,EAAgCP,EAAqBO,EACnErD,EAAUpE,EAAMoE,QAChBsD,EAAe1H,EAAM2H,MACrBA,OAAyB,IAAjBD,EAA0B,YAAcA,EAChDE,EAAc5H,EAAM0D,KACpBA,OAAuB,IAAhBkE,EAAyBR,EAAcQ,EAC9CC,EAAuB7H,EAAM8H,cAC7BA,OAAyC,IAAzBD,GAA0CA,EAC1DE,EAAwB/H,EAAMgI,kBAC9BA,OAA8C,IAA1BD,EAAmCT,EAA2BS,EAClFtD,EAAazE,EAAMyE,WACnBwD,EAAcjI,EAAMkI,KACpBA,OAAuB,IAAhBD,EAAyB,SAAWA,EAC3CjD,EAAQC,YAAyBjF,EAAO,CAAC,cAAe,UAAW,QAAS,OAAQ,gBAAiB,oBAAqB,aAAc,SAE5I,OAAOO,IAAMqF,cAAc7B,IAAY+B,YAAS,CAC9Cf,KAAM,WACNX,QAAS,CACP6B,KAAMD,YAAK5B,EAAQ6B,KAAM7B,EAAQ,QAAQ+D,OAAOC,YAAWT,KAAUG,GAAiB1D,EAAQ0D,eAC9FhE,QAASM,EAAQN,QACjBnE,SAAUyE,EAAQzE,UAEpBgI,MAAOA,EACPlD,WAAYqB,YAAS,CACnB,qBAAsBgC,GACrBrD,GACHf,KAAMnD,IAAM8H,aAAaP,EAAgBE,EAAoBtE,EAAM,CACjEC,SAAmB,UAATuE,EAAmB,QAAU,YAEzCtE,YAAarD,IAAM8H,aAAaP,EAAgBE,EAAoBpE,EAAa,CAC/ED,SAAmB,UAATuE,EAAmB,QAAU,YAEzCjE,IAAKA,GACJe,OAgGUwB,iBAzLK,SAAgB8B,GAClC,MAAO,CAELrC,KAAM,CACJ0B,MAAOW,EAAMC,QAAQC,KAAKC,WAI5B3E,QAAS,GAGTnE,SAAU,GAGVmI,cAAe,GAGfY,aAAc,CACZ,YAAa,CACXf,MAAOW,EAAMC,QAAQI,QAAQC,KAC7B,UAAW,CACTC,gBAAiBC,YAAKR,EAAMC,QAAQI,QAAQC,KAAMN,EAAMC,QAAQQ,OAAOC,cAEvE,uBAAwB,CACtBH,gBAAiB,iBAIvB,aAAc,CACZlB,MAAOW,EAAMC,QAAQQ,OAAOpJ,WAKhCsJ,eAAgB,CACd,YAAa,CACXtB,MAAOW,EAAMC,QAAQE,UAAUG,KAC/B,UAAW,CACTC,gBAAiBC,YAAKR,EAAMC,QAAQE,UAAUG,KAAMN,EAAMC,QAAQQ,OAAOC,cAEzE,uBAAwB,CACtBH,gBAAiB,iBAIvB,aAAc,CACZlB,MAAOW,EAAMC,QAAQQ,OAAOpJ,cA2IF,CAChCF,KAAM,eADO+G,CAEZgB","file":"static/js/80.f0395997.chunk.js","sourcesContent":["import React from 'react'\n\nimport { useField, useFormikContext } from 'formik'\nimport Autocomplete from '@material-ui/lab/Autocomplete' // , { AutocompleteProps }\nimport { TextField, Checkbox, TextFieldProps, CircularProgress } from '@material-ui/core' // InputAdornment\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank'\nimport CheckBoxIcon from '@material-ui/icons/CheckBox'\n\nexport type ComboBoxFieldProps =\n  // AutocompleteProps &\n  TextFieldProps &\n  {\n    startAdornment?: React.ReactElement\n    options?: ComboBoxFieldOption[]\n    name: string\n    multiple?: boolean\n    readOnly?: boolean\n    loading?: boolean\n  }\nexport type ComboBoxFieldOption = {\n  label?: string\n  value: string\n  group?: string\n}\nconst ComboBoxField: React.FC<ComboBoxFieldProps> = ({ options = [], name, multiple = false, disabled, readOnly, fullWidth, loading, startAdornment, ...props }) => {\n  const { isSubmitting } = useFormikContext()\n\n  const [field, meta, helpers] = useField(name)\n  const [value, setValue] = React.useState<any>('')\n  const fieldValue = field.value\n  const optionString = JSON.stringify(options)\n  React.useEffect(() => {\n    if(options && options.length) {\n      // TODO\n      const currentValue = multiple\n        // eslint-disable-next-line\n        ? options.filter(option => fieldValue.includes(option.value))\n        // eslint-disable-next-line\n        : options.find(option => option.value == fieldValue)\n\n      setValue(currentValue)\n    }\n    // eslint-disable-next-line\n  }, [fieldValue, multiple, optionString]) // optionString\n  const handleValueChange = (e: any, selected: any) => {\n    if (!selected) return helpers.setValue('')\n\n    const value = !multiple\n      ? selected.value\n      : selected.map((x: any) => x.value)\n    helpers.setValue(value)\n  }\n\n  const { error, touched } = meta\n  const isError = Boolean(touched && error)\n\n  return (\n    // @ts-ignore\n    <Autocomplete\n      {...props}\n      value={value}\n      onChange={handleValueChange}\n\n      disabled={loading || disabled || readOnly || isSubmitting}\n\n      multiple={multiple}\n      disableCloseOnSelect={multiple}\n      filterSelectedOptions={!multiple}\n\n      // @ts-ignore\n      options={options}\n      getOptionLabel={(option: any) => option.label || ''}\n      groupBy={(option: any) => option.group}\n      renderInput={params => {\n        const mappedStartAdornment = multiple ? params.InputProps.startAdornment :\n          startAdornment ? startAdornment :\n          null\n\n        const mappedEndAdornment = loading\n          ? <CircularProgress style={{ width: 30, height: 30 }} />\n          : params.InputProps.endAdornment\n\n        return (\n          // @ts-ignore\n          <TextField\n            error={isError}\n            helperText={isError ? error : null}\n            fullWidth={fullWidth}\n            // {...field}\n            {...props}\n            {...params}\n            InputProps={{\n              ...params.InputProps,\n              style: { flexWrap: 'nowrap' },\n              startAdornment: mappedStartAdornment,\n              endAdornment: mappedEndAdornment,\n            }}\n          />\n        )\n      }}\n      renderTags={(value: any) => {\n        const label = value.map(({ label }: any) => label).join(', ')\n\n        return (\n          <p style={{\n            margin: 0, paddingLeft: 6,\n            whiteSpace: 'nowrap',\n            overflow: 'hidden',\n            textOverflow: 'ellipsis'\n          }}>\n            {label}\n          </p>\n        )\n      }}\n      renderOption={(option: any, { selected }) => (\n        <React.Fragment key={option.value}>\n          {multiple && (\n            <Checkbox\n              icon={<CheckBoxOutlineBlankIcon fontSize='small' />}\n              checkedIcon={<CheckBoxIcon fontSize='small' />}\n              style={{ marginRight: 8 }}\n              checked={selected}\n            />\n          )}\n          {option.label}\n        </React.Fragment>\n      )}\n    />\n  )\n}\nexport default ComboBoxField","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@material-ui/utils';\nimport useControlled from '../utils/useControlled';\nimport useFormControl from '../FormControl/useFormControl';\nimport withStyles from '../styles/withStyles';\nimport IconButton from '../IconButton';\nexport var styles = {\n  root: {\n    padding: 9\n  },\n  checked: {},\n  disabled: {},\n  input: {\n    cursor: 'inherit',\n    position: 'absolute',\n    opacity: 0,\n    width: '100%',\n    height: '100%',\n    top: 0,\n    left: 0,\n    margin: 0,\n    padding: 0,\n    zIndex: 1\n  }\n};\n/**\n * @ignore - internal component.\n */\n\nvar SwitchBase = React.forwardRef(function SwitchBase(props, ref) {\n  var autoFocus = props.autoFocus,\n      checkedProp = props.checked,\n      checkedIcon = props.checkedIcon,\n      classes = props.classes,\n      className = props.className,\n      defaultChecked = props.defaultChecked,\n      disabledProp = props.disabled,\n      icon = props.icon,\n      id = props.id,\n      inputProps = props.inputProps,\n      inputRef = props.inputRef,\n      name = props.name,\n      onBlur = props.onBlur,\n      onChange = props.onChange,\n      onFocus = props.onFocus,\n      readOnly = props.readOnly,\n      required = props.required,\n      tabIndex = props.tabIndex,\n      type = props.type,\n      value = props.value,\n      other = _objectWithoutProperties(props, [\"autoFocus\", \"checked\", \"checkedIcon\", \"classes\", \"className\", \"defaultChecked\", \"disabled\", \"icon\", \"id\", \"inputProps\", \"inputRef\", \"name\", \"onBlur\", \"onChange\", \"onFocus\", \"readOnly\", \"required\", \"tabIndex\", \"type\", \"value\"]);\n\n  var _useControlled = useControlled({\n    controlled: checkedProp,\n    default: Boolean(defaultChecked),\n    name: 'SwitchBase'\n  }),\n      _useControlled2 = _slicedToArray(_useControlled, 2),\n      checked = _useControlled2[0],\n      setCheckedState = _useControlled2[1];\n\n  var muiFormControl = useFormControl();\n\n  var handleFocus = function handleFocus(event) {\n    if (onFocus) {\n      onFocus(event);\n    }\n\n    if (muiFormControl && muiFormControl.onFocus) {\n      muiFormControl.onFocus(event);\n    }\n  };\n\n  var handleBlur = function handleBlur(event) {\n    if (onBlur) {\n      onBlur(event);\n    }\n\n    if (muiFormControl && muiFormControl.onBlur) {\n      muiFormControl.onBlur(event);\n    }\n  };\n\n  var handleInputChange = function handleInputChange(event) {\n    var newChecked = event.target.checked;\n    setCheckedState(newChecked);\n\n    if (onChange) {\n      onChange(event, newChecked);\n    }\n  };\n\n  var disabled = disabledProp;\n\n  if (muiFormControl) {\n    if (typeof disabled === 'undefined') {\n      disabled = muiFormControl.disabled;\n    }\n  }\n\n  var hasLabelFor = type === 'checkbox' || type === 'radio';\n  return React.createElement(IconButton, _extends({\n    component: \"span\",\n    className: clsx(classes.root, className, checked && classes.checked, disabled && classes.disabled),\n    disabled: disabled,\n    tabIndex: null,\n    role: undefined,\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    ref: ref\n  }, other), React.createElement(\"input\", _extends({\n    autoFocus: autoFocus,\n    checked: checkedProp,\n    defaultChecked: defaultChecked,\n    className: classes.input,\n    disabled: disabled,\n    id: hasLabelFor && id,\n    name: name,\n    onChange: handleInputChange,\n    readOnly: readOnly,\n    ref: inputRef,\n    required: required,\n    tabIndex: tabIndex,\n    type: type,\n    value: value\n  }, inputProps)), checked ? checkedIcon : icon);\n}); // NB: If changed, please update Checkbox, Switch and Radio\n// so that the API documentation is updated.\n\nprocess.env.NODE_ENV !== \"production\" ? SwitchBase.propTypes = {\n  /**\n   * If `true`, the `input` element will be focused during the first mount.\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is checked.\n   */\n  checkedIcon: PropTypes.node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  defaultChecked: PropTypes.bool,\n\n  /**\n   * If `true`, the switch will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is unchecked.\n   */\n  icon: PropTypes.node.isRequired,\n\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n\n  /*\n   * @ignore\n   */\n  name: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * It prevents the user from changing the value of the field\n   * (not from interacting with the field).\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * If `true`, the `input` element will be required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  tabIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * The input component prop `type`.\n   */\n  type: PropTypes.string.isRequired,\n\n  /**\n   * The value of the component.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default withStyles(styles, {\n  name: 'PrivateSwitchBase'\n})(SwitchBase);","import React from 'react';\nimport createSvgIcon from './createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon(React.createElement(\"path\", {\n  d: \"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\"\n}), 'CheckBoxOutlineBlank');","import React from 'react';\nimport createSvgIcon from './createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon(React.createElement(\"path\", {\n  d: \"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"\n}), 'CheckBox');","import React from 'react';\nimport createSvgIcon from './createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon(React.createElement(\"path\", {\n  d: \"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z\"\n}), 'IndeterminateCheckBox');","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@material-ui/utils';\nimport SwitchBase from '../internal/SwitchBase';\nimport CheckBoxOutlineBlankIcon from '../internal/svg-icons/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '../internal/svg-icons/CheckBox';\nimport { fade } from '../styles/colorManipulator';\nimport IndeterminateCheckBoxIcon from '../internal/svg-icons/IndeterminateCheckBox';\nimport capitalize from '../utils/capitalize';\nimport withStyles from '../styles/withStyles';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      color: theme.palette.text.secondary\n    },\n\n    /* Pseudo-class applied to the root element if `checked={true}`. */\n    checked: {},\n\n    /* Pseudo-class applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Pseudo-class applied to the root element if `indeterminate={true}`. */\n    indeterminate: {},\n\n    /* Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: {\n      '&$checked': {\n        color: theme.palette.primary.main,\n        '&:hover': {\n          backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),\n          // Reset on touch devices, it doesn't add specificity\n          '@media (hover: none)': {\n            backgroundColor: 'transparent'\n          }\n        }\n      },\n      '&$disabled': {\n        color: theme.palette.action.disabled\n      }\n    },\n\n    /* Styles applied to the root element if `color=\"secondary\"`. */\n    colorSecondary: {\n      '&$checked': {\n        color: theme.palette.secondary.main,\n        '&:hover': {\n          backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),\n          // Reset on touch devices, it doesn't add specificity\n          '@media (hover: none)': {\n            backgroundColor: 'transparent'\n          }\n        }\n      },\n      '&$disabled': {\n        color: theme.palette.action.disabled\n      }\n    }\n  };\n};\nvar defaultCheckedIcon = React.createElement(CheckBoxIcon, null);\nvar defaultIcon = React.createElement(CheckBoxOutlineBlankIcon, null);\nvar defaultIndeterminateIcon = React.createElement(IndeterminateCheckBoxIcon, null);\nvar Checkbox = React.forwardRef(function Checkbox(props, ref) {\n  var _props$checkedIcon = props.checkedIcon,\n      checkedIcon = _props$checkedIcon === void 0 ? defaultCheckedIcon : _props$checkedIcon,\n      classes = props.classes,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'secondary' : _props$color,\n      _props$icon = props.icon,\n      icon = _props$icon === void 0 ? defaultIcon : _props$icon,\n      _props$indeterminate = props.indeterminate,\n      indeterminate = _props$indeterminate === void 0 ? false : _props$indeterminate,\n      _props$indeterminateI = props.indeterminateIcon,\n      indeterminateIcon = _props$indeterminateI === void 0 ? defaultIndeterminateIcon : _props$indeterminateI,\n      inputProps = props.inputProps,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'medium' : _props$size,\n      other = _objectWithoutProperties(props, [\"checkedIcon\", \"classes\", \"color\", \"icon\", \"indeterminate\", \"indeterminateIcon\", \"inputProps\", \"size\"]);\n\n  return React.createElement(SwitchBase, _extends({\n    type: \"checkbox\",\n    classes: {\n      root: clsx(classes.root, classes[\"color\".concat(capitalize(color))], indeterminate && classes.indeterminate),\n      checked: classes.checked,\n      disabled: classes.disabled\n    },\n    color: color,\n    inputProps: _extends({\n      'data-indeterminate': indeterminate\n    }, inputProps),\n    icon: React.cloneElement(indeterminate ? indeterminateIcon : icon, {\n      fontSize: size === 'small' ? 'small' : 'default'\n    }),\n    checkedIcon: React.cloneElement(indeterminate ? indeterminateIcon : checkedIcon, {\n      fontSize: size === 'small' ? 'small' : 'default'\n    }),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Checkbox.propTypes = {\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is checked.\n   */\n  checkedIcon: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary', 'default']),\n\n  /**\n   * If `true`, the checkbox will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the ripple effect will be disabled.\n   */\n  disableRipple: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is unchecked.\n   */\n  icon: PropTypes.node,\n\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n\n  /**\n   * If `true`, the component appears indeterminate.\n   * This does not set the native input element to indeterminate due\n   * to inconsistent behavior across browsers.\n   * However, we set a `data-indeterminate` attribute on the input.\n   */\n  indeterminate: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is indeterminate.\n   */\n  indeterminateIcon: PropTypes.node,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * If `true`, the `input` element will be required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * The size of the checkbox.\n   * `small` is equivalent to the dense checkbox styling.\n   */\n  size: PropTypes.oneOf(['small', 'medium']),\n\n  /**\n   * The input component prop `type`.\n   */\n  type: PropTypes.string,\n\n  /**\n   * The value of the component. The DOM API casts this to a string.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCheckbox'\n})(Checkbox);"],"sourceRoot":""}