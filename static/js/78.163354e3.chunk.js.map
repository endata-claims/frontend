{"version":3,"sources":["components/Formik/EditorField/index.tsx","../node_modules/@material-ui/core/esm/FormControl/FormControlContext.js","../node_modules/@material-ui/core/esm/FormControl/useFormControl.js","../node_modules/@material-ui/core/esm/FormControl/formControlState.js","../node_modules/@material-ui/core/esm/InputBase/utils.js","../node_modules/@material-ui/core/esm/FormControl/FormControl.js","../node_modules/@material-ui/core/esm/FormHelperText/FormHelperText.js"],"names":["name","label","placeholder","disabled","props","isSubmitting","useFormikContext","useField","field","meta","helpers","error","touched","isError","Boolean","initialValue","value","RichTextEditor","createValueFromString","createEmptyValue","React","useState","setValue","style","width","id","toolbarConfig","display","INLINE_STYLE_BUTTONS","className","BLOCK_TYPE_DROPDOWN","BLOCK_TYPE_BUTTONS","onChange","toString","setTouched","marginLeft","marginRight","FormControlContext","createContext","useFormControl","useContext","formControlState","_ref","states","muiFormControl","reduce","acc","state","hasValue","Array","isArray","length","isFilled","obj","SSR","arguments","undefined","defaultValue","isAdornedStart","startAdornment","FormControl","forwardRef","ref","children","classes","_props$color","color","_props$component","component","Component","_props$disabled","_props$error","_props$fullWidth","fullWidth","_props$hiddenLabel","hiddenLabel","_props$margin","margin","_props$required","required","size","_props$variant","variant","other","_objectWithoutProperties","_React$useState","initialAdornedStart","Children","forEach","child","isMuiElement","input","adornedStart","setAdornedStart","_React$useState2","initialFilled","filled","setFilled","_React$useState3","focused","setFocused","onFilled","useCallback","childContext","onBlur","onEmpty","onFocus","registerEffect","createElement","Provider","_extends","clsx","root","concat","capitalize","withStyles","flexDirection","position","minWidth","padding","border","zIndex","verticalAlign","marginNormal","marginTop","marginBottom","marginDense","FormHelperText","fcs","contained","dangerouslySetInnerHTML","__html","theme","palette","text","secondary","typography","caption","textAlign","main"],"mappings":"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","file":"static/js/78.163354e3.chunk.js","sourcesContent":["import React from 'react'\n\nimport { useField, useFormikContext } from 'formik'\nimport RichTextEditor from 'react-rte'\nimport FormControl from '@material-ui/core/FormControl'\nimport FormHelperText from '@material-ui/core/FormHelperText'\n\nexport default ({ name, label, placeholder, disabled, ...props }: any) => {\n  const { isSubmitting } = useFormikContext()\n\n  const [field, meta, helpers] = useField(name)\n  const { error, touched } = meta\n  const isError = Boolean(touched && error)\n\n  const initialValue = field.value\n    ? RichTextEditor.createValueFromString(field.value, 'html')\n    : RichTextEditor.createEmptyValue()\n  const [value, setValue] = React.useState<any>(initialValue)\n\n  return (\n    <FormControl error={isError} style={{ width: '100%' }} id={field.name}>\n      <RichTextEditor\n        {...props}\n        disabled={disabled || isSubmitting}\n        placeholder={placeholder || label}\n        toolbarConfig={{\n          display: [\n            'INLINE_STYLE_BUTTONS',\n            'BLOCK_TYPE_BUTTONS',\n            'BLOCK_TYPE_DROPDOWN',\n            'HISTORY_BUTTONS'\n          ],\n          INLINE_STYLE_BUTTONS: [\n            { label: 'Bold', style: 'BOLD', className: 'custom-css-class' },\n            { label: 'Italic', style: 'ITALIC' },\n            { label: 'Underline', style: 'UNDERLINE' }\n          ],\n          BLOCK_TYPE_DROPDOWN: [\n            { label: 'Normal', style: 'unstyled' },\n            { label: 'Heading Large', style: 'header-one' },\n            { label: 'Heading Medium', style: 'header-two' },\n            { label: 'Heading Small', style: 'header-three' }\n          ],\n          BLOCK_TYPE_BUTTONS: [\n            { label: 'UL', style: 'unordered-list-item' },\n            { label: 'OL', style: 'ordered-list-item' }\n          ]\n        }}\n        value={value}\n        onChange={(value: any) => {\n          setValue(value)\n          helpers.setValue(value.toString('html'))\n          helpers.setTouched(true)\n        }}\n      />\n      {isError && (\n        <FormHelperText style={{ marginLeft: 14, marginRight: 14 }}>\n          {error}\n        </FormHelperText>\n      )}\n    </FormControl>\n  )\n}","import React from 'react';\n/**\n * @ignore - internal component.\n */\n\nvar FormControlContext = React.createContext();\n\nif (process.env.NODE_ENV !== 'production') {\n  FormControlContext.displayName = 'FormControlContext';\n}\n\nexport function useFormControl() {\n  return React.useContext(FormControlContext);\n}\nexport default FormControlContext;","import React from 'react';\nimport FormControlContext from './FormControlContext';\nexport default function useFormControl() {\n  return React.useContext(FormControlContext);\n}","export default function formControlState(_ref) {\n  var props = _ref.props,\n      states = _ref.states,\n      muiFormControl = _ref.muiFormControl;\n  return states.reduce(function (acc, state) {\n    acc[state] = props[state];\n\n    if (muiFormControl) {\n      if (typeof props[state] === 'undefined') {\n        acc[state] = muiFormControl[state];\n      }\n    }\n\n    return acc;\n  }, {});\n}","// Supports determination of isControlled().\n// Controlled input accepts its current value as a prop.\n//\n// @see https://facebook.github.io/react/docs/forms.html#controlled-components\n// @param value\n// @returns {boolean} true if string (including '') or number (including zero)\nexport function hasValue(value) {\n  return value != null && !(Array.isArray(value) && value.length === 0);\n} // Determine if field is empty or filled.\n// Response determines if label is presented above field or as placeholder.\n//\n// @param obj\n// @param SSR\n// @returns {boolean} False when not present or empty string.\n//                    True when any number or string with length.\n\nexport function isFilled(obj) {\n  var SSR = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return obj && (hasValue(obj.value) && obj.value !== '' || SSR && hasValue(obj.defaultValue) && obj.defaultValue !== '');\n} // Determine if an Input is adorned on start.\n// It's corresponding to the left with LTR.\n//\n// @param obj\n// @returns {boolean} False when no adornments.\n//                    True when adorned at the start.\n\nexport function isAdornedStart(obj) {\n  return obj.startAdornment;\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { isFilled, isAdornedStart } from '../InputBase/utils';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\nimport isMuiElement from '../utils/isMuiElement';\nimport FormControlContext from './FormControlContext';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'inline-flex',\n    flexDirection: 'column',\n    position: 'relative',\n    // Reset fieldset default style.\n    minWidth: 0,\n    padding: 0,\n    margin: 0,\n    border: 0,\n    zIndex: 0,\n    // Fix blur label text issue\n    verticalAlign: 'top' // Fix alignment issue on Safari.\n\n  },\n\n  /* Styles applied to the root element if `margin=\"normal\"`. */\n  marginNormal: {\n    marginTop: 16,\n    marginBottom: 8\n  },\n\n  /* Styles applied to the root element if `margin=\"dense\"`. */\n  marginDense: {\n    marginTop: 8,\n    marginBottom: 4\n  },\n\n  /* Styles applied to the root element if `fullWidth={true}`. */\n  fullWidth: {\n    width: '100%'\n  }\n};\n/**\n * Provides context such as filled/focused/error/required for form inputs.\n * Relying on the context provides high flexibility and ensures that the state always stays\n * consistent across the children of the `FormControl`.\n * This context is used by the following components:\n *\n *  - FormLabel\n *  - FormHelperText\n *  - Input\n *  - InputLabel\n *\n * You can find one composition example below and more going to [the demos](/components/text-fields/#components).\n *\n * ```jsx\n * <FormControl>\n *   <InputLabel htmlFor=\"my-input\">Email address</InputLabel>\n *   <Input id=\"my-input\" aria-describedby=\"my-helper-text\" />\n *   <FormHelperText id=\"my-helper-text\">We'll never share your email.</FormHelperText>\n * </FormControl>\n * ```\n *\n * ⚠️Only one input can be used within a FormControl.\n */\n\nvar FormControl = React.forwardRef(function FormControl(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'primary' : _props$color,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$error = props.error,\n      error = _props$error === void 0 ? false : _props$error,\n      _props$fullWidth = props.fullWidth,\n      fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,\n      _props$hiddenLabel = props.hiddenLabel,\n      hiddenLabel = _props$hiddenLabel === void 0 ? false : _props$hiddenLabel,\n      _props$margin = props.margin,\n      margin = _props$margin === void 0 ? 'none' : _props$margin,\n      _props$required = props.required,\n      required = _props$required === void 0 ? false : _props$required,\n      size = props.size,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'standard' : _props$variant,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"color\", \"component\", \"disabled\", \"error\", \"fullWidth\", \"hiddenLabel\", \"margin\", \"required\", \"size\", \"variant\"]);\n\n  var _React$useState = React.useState(function () {\n    // We need to iterate through the children and find the Input in order\n    // to fully support server-side rendering.\n    var initialAdornedStart = false;\n\n    if (children) {\n      React.Children.forEach(children, function (child) {\n        if (!isMuiElement(child, ['Input', 'Select'])) {\n          return;\n        }\n\n        var input = isMuiElement(child, ['Select']) ? child.props.input : child;\n\n        if (input && isAdornedStart(input.props)) {\n          initialAdornedStart = true;\n        }\n      });\n    }\n\n    return initialAdornedStart;\n  }),\n      adornedStart = _React$useState[0],\n      setAdornedStart = _React$useState[1];\n\n  var _React$useState2 = React.useState(function () {\n    // We need to iterate through the children and find the Input in order\n    // to fully support server-side rendering.\n    var initialFilled = false;\n\n    if (children) {\n      React.Children.forEach(children, function (child) {\n        if (!isMuiElement(child, ['Input', 'Select'])) {\n          return;\n        }\n\n        if (isFilled(child.props, true)) {\n          initialFilled = true;\n        }\n      });\n    }\n\n    return initialFilled;\n  }),\n      filled = _React$useState2[0],\n      setFilled = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      focused = _React$useState3[0],\n      setFocused = _React$useState3[1];\n\n  if (disabled && focused) {\n    setFocused(false);\n  }\n\n  var registerEffect;\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    var registeredInput = React.useRef(false);\n\n    registerEffect = function registerEffect() {\n      if (registeredInput.current) {\n        console.error(['Material-UI: there are multiple InputBase components inside a FormControl.', 'This is not supported. It might cause infinite rendering loops.', 'Only use one InputBase.'].join('\\n'));\n      }\n\n      registeredInput.current = true;\n      return function () {\n        registeredInput.current = false;\n      };\n    };\n  }\n\n  var onFilled = React.useCallback(function () {\n    setFilled(true);\n  }, []);\n  var onEmpty = React.useCallback(function () {\n    setFilled(false);\n  }, []);\n  var childContext = {\n    adornedStart: adornedStart,\n    setAdornedStart: setAdornedStart,\n    color: color,\n    disabled: disabled,\n    error: error,\n    filled: filled,\n    focused: focused,\n    fullWidth: fullWidth,\n    hiddenLabel: hiddenLabel,\n    margin: (size === 'small' ? 'dense' : undefined) || margin,\n    onBlur: function onBlur() {\n      setFocused(false);\n    },\n    onEmpty: onEmpty,\n    onFilled: onFilled,\n    onFocus: function onFocus() {\n      setFocused(true);\n    },\n    registerEffect: registerEffect,\n    required: required,\n    variant: variant\n  };\n  return React.createElement(FormControlContext.Provider, {\n    value: childContext\n  }, React.createElement(Component, _extends({\n    className: clsx(classes.root, className, margin !== 'none' && classes[\"margin\".concat(capitalize(margin))], fullWidth && classes.fullWidth),\n    ref: ref\n  }, other), children));\n});\nprocess.env.NODE_ENV !== \"production\" ? FormControl.propTypes = {\n  /**\n   * The contents of the form control.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, the label, input and helper text should be displayed in a disabled state.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the label should be displayed in an error state.\n   */\n  error: PropTypes.bool,\n\n  /**\n   * If `true`, the component will take up the full width of its container.\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * If `true`, the label will be hidden.\n   * This is used to increase density for a `FilledInput`.\n   * Be sure to add `aria-label` to the `input` element.\n   */\n  hiddenLabel: PropTypes.bool,\n\n  /**\n   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.\n   */\n  margin: PropTypes.oneOf(['none', 'dense', 'normal']),\n\n  /**\n   * If `true`, the label will indicate that the input is required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * The size of the text field.\n   */\n  size: PropTypes.oneOf(['small', 'medium']),\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['standard', 'outlined', 'filled'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiFormControl'\n})(FormControl);","import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport formControlState from '../FormControl/formControlState';\nimport useFormControl from '../FormControl/useFormControl';\nimport withStyles from '../styles/withStyles';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: _extends({\n      color: theme.palette.text.secondary\n    }, theme.typography.caption, {\n      textAlign: 'left',\n      marginTop: 3,\n      margin: 0,\n      '&$disabled': {\n        color: theme.palette.text.disabled\n      },\n      '&$error': {\n        color: theme.palette.error.main\n      }\n    }),\n\n    /* Pseudo-class applied to the root element if `error={true}`. */\n    error: {},\n\n    /* Pseudo-class applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Styles applied to the root element if `margin=\"dense\"`. */\n    marginDense: {\n      marginTop: 4\n    },\n\n    /* Styles applied to the root element if `variant=\"filled\"` or `variant=\"outlined\"`. */\n    contained: {\n      marginLeft: 14,\n      marginRight: 14\n    },\n\n    /* Pseudo-class applied to the root element if `focused={true}`. */\n    focused: {},\n\n    /* Pseudo-class applied to the root element if `filled={true}`. */\n    filled: {},\n\n    /* Pseudo-class applied to the root element if `required={true}`. */\n    required: {}\n  };\n};\nvar FormHelperText = React.forwardRef(function FormHelperText(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'p' : _props$component,\n      disabled = props.disabled,\n      error = props.error,\n      filled = props.filled,\n      focused = props.focused,\n      margin = props.margin,\n      required = props.required,\n      variant = props.variant,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"component\", \"disabled\", \"error\", \"filled\", \"focused\", \"margin\", \"required\", \"variant\"]);\n\n  var muiFormControl = useFormControl();\n  var fcs = formControlState({\n    props: props,\n    muiFormControl: muiFormControl,\n    states: ['variant', 'margin', 'disabled', 'error', 'filled', 'focused', 'required']\n  });\n  return React.createElement(Component, _extends({\n    className: clsx(classes.root, (fcs.variant === 'filled' || fcs.variant === 'outlined') && classes.contained, className, fcs.disabled && classes.disabled, fcs.error && classes.error, fcs.filled && classes.filled, fcs.focused && classes.focused, fcs.required && classes.required, fcs.margin === 'dense' && classes.marginDense),\n    ref: ref\n  }, other), children === ' ' ? // eslint-disable-next-line react/no-danger\n  React.createElement(\"span\", {\n    dangerouslySetInnerHTML: {\n      __html: '&#8203;'\n    }\n  }) : children);\n});\nprocess.env.NODE_ENV !== \"production\" ? FormHelperText.propTypes = {\n  /**\n   * The content of the component.\n   *\n   * If `' '` is provided, the component reserves one line height for displaying a future message.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, the helper text should be displayed in a disabled state.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, helper text should be displayed in an error state.\n   */\n  error: PropTypes.bool,\n\n  /**\n   * If `true`, the helper text should use filled classes key.\n   */\n  filled: PropTypes.bool,\n\n  /**\n   * If `true`, the helper text should use focused classes key.\n   */\n  focused: PropTypes.bool,\n\n  /**\n   * If `dense`, will adjust vertical spacing. This is normally obtained via context from\n   * FormControl.\n   */\n  margin: PropTypes.oneOf(['dense']),\n\n  /**\n   * If `true`, the helper text should use required classes key.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['standard', 'outlined', 'filled'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiFormHelperText'\n})(FormHelperText);"],"sourceRoot":""}