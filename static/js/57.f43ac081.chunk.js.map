{"version":3,"sources":["components/Formik/DateField/index.tsx","pages/app/Claims/ClaimDetails/tabs/JobNotes/useAppointmentMade.tsx"],"names":["DateField","variant","startAdornment","endAdornment","props","component","DatePicker","clearable","inputVariant","format","placeholder","InputProps","position","gql","claim","claimMeta","useClaimMeta","userType","me","isBuilder","React","useMemo","isRestorer","isDisplayApointmentMade","claimJob","building","progress","initialCallMade","appointmentBooked","restoration","useState","isOpen","setIsOpen","handleClose","useAppointmentMadeMutation","handleMadeAppointment","enqueueSnackbar","useSnackbar","handleAppointmentMade","ApointmentMadeDialog","open","onClose","PaperProps","style","minWidth","maxWidth","initialValues","appointmentDate","Date","onSubmit","values","a","id","variables","input","res","data","claimMakeAppointment","messages","forEach","message","success","claimDetailsRefetch","console","log","isSubmitting","container","item","xs","name","label","fullWidth","onClick","disabled","type","color"],"mappings":"mLA4CeA,UA5BkB,SAAC,GAAsE,IAAD,IAAnEC,eAAmE,MAAzD,WAAyD,EAA7CC,EAA6C,EAA7CA,eAAgBC,EAA6B,EAA7BA,aAAiBC,EAAY,2DACrG,OACE,kBAAC,IAAD,eAAOC,UAAWC,KACZF,EADN,CAGEH,QAAQ,SACRM,WAAS,EAETC,aAAcP,EACdQ,OAAO,aACPC,YAAY,aAEZC,WAAU,eACLP,EAAMO,WADD,CAERT,eAAiBA,EACf,kBAAC,IAAD,CAAgBU,SAAS,SACtBV,GAF6B,KAKlCC,aAAeA,EACb,kBAAC,IAAD,CAAgBS,SAAS,OACtBT,GAFyB,Y,0dC3BtCU,YAAG,KAYY,sBAAqB,IAAD,gBAAjBC,EAAiB,EAAjBA,MACVC,EAAYC,cACZC,EAAQ,OAAGF,QAAH,IAAGA,OAAH,YAAGA,EAAWG,UAAd,aAAG,EAAeD,SAC1BE,EAAYC,IAAMC,SAAQ,iBAAmB,YAAbJ,IAAwB,CAACA,IACzDK,EAAaF,IAAMC,SAAQ,iBAAmB,aAAbJ,IAAyB,CAACA,IAE3DM,EAEFJ,IAAS,OACNL,QADM,IACNA,OADM,YACNA,EAAOU,gBADD,uBACN,EAAiBC,gBADX,uBACN,EAA2BC,gBADrB,aACN,EAAqCC,mBACpCb,EAAMU,SAASC,SAASC,SAASE,mBAIrCN,IAAU,OACPR,QADO,IACPA,OADO,YACPA,EAAOU,gBADA,uBACP,EAAiBK,mBADV,uBACP,EAA8BH,gBADvB,aACP,EAAwCC,oBACxC,UAACb,EAAMU,SAASK,mBAAhB,aAAC,EAA4BH,SAASE,mBAhBZ,EAmBLR,IAAMU,UAAS,GAnBV,mBAmB1BC,EAnB0B,KAmBlBC,EAnBkB,KAqB3BC,EAAc,kBAAMD,GAAU,IArBH,EAsBDE,cAAzBC,EAtB0B,oBAuBzBC,EAAoBC,wBAApBD,gBAyDR,MAAO,CACLb,0BACAe,sBA9D4B,kBAAMN,GAAU,IA+D5CO,qBA3D2B,kBAC3B,kBAAC,IAAD,CAAQC,KAAMT,EAAQU,QAASR,EAAaS,WAAY,CAAEC,MAAO,CAAEC,SAAU,MAAOC,SAAU,SAC5F,kBAAC,IAAD,CACEC,cAAe,CACbC,gBAAiB,IAAIC,MAEvBC,SAAQ,uCAAE,WAAMC,GAAN,yBAAAC,EAAA,kEACLpC,QADK,IACLA,OADK,YACLA,EAAWD,aADN,aACL,EAAkBsC,IADb,gCAEYjB,EAAsB,CACtCkB,UAAW,CACTD,GAAIrC,EAAUD,MAAMsC,GACpBE,MAAOJ,KALL,OAQH,QANGK,EAFA,cAQH,IAAHA,GAAA,UAAAA,EAAKC,YAAL,mBAAWC,4BAAX,SAAiCC,SAASC,SAAQ,SAAAC,GAAO,OAAIxB,EAAgBwB,OAE7E,OAAIL,QAAJ,IAAIA,OAAJ,YAAIA,EAAKC,YAAT,uBAAI,EAAWC,4BAAf,aAAI,EAAiCI,UACnC9C,EAAU+C,sBAXN,sBAeNC,QAAQC,IAAI,oBAfN,2CAAF,wDAmBP,gBAAGC,EAAH,EAAGA,aAAH,OACC,kBAAC,IAAD,KACE,kBAAC,IAAD,yBAGA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAMC,WAAS,GACb,kBAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,IACb,kBAAC,UAAD,CACEC,KAAK,kBACLC,MAAM,mBACNrE,QAAQ,WACRsE,WAAS,OAKjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQC,QAASvC,EAAawC,SAAUR,GAAxC,UAGA,kBAAC,IAAD,CAAQS,KAAK,SAASC,MAAM,UAAUF,SAAUR,GAAhD","file":"static/js/57.f43ac081.chunk.js","sourcesContent":["import React from 'react'\n\nimport { Field } from 'formik'\nimport { DatePicker } from 'formik-material-ui-pickers' // DatePickerProps\n// import { DatePickerProps } from '@material-ui/pickers'\nimport { InputAdornment } from '@material-ui/core'\n\n// export type DateFieldProps = Omit<DatePickerProps, 'variant'>\n// & {\n//   name: string\n\n//   variant?: 'standard' | 'outlined' | 'filled'\n//   startAdornment?: React.ReactElement\n//   endAdornment?: React.ReactElement,\n// }\n\nconst DateField: React.FC<any> = ({ variant = 'standard', startAdornment, endAdornment, ...props }) => {\n  return (\n    <Field component={DatePicker}\n      {...props}\n\n      variant='dialog'\n      clearable\n\n      inputVariant={variant}\n      format='dd/MM/yyyy'\n      placeholder='DD/MM/YYYY'\n\n      InputProps={{\n        ...props.InputProps,\n        startAdornment: !startAdornment ? null : (\n          <InputAdornment position='start'>\n            {startAdornment}\n          </InputAdornment>\n        ),\n        endAdornment: !endAdornment ? null : (\n          <InputAdornment position='end'>\n            {endAdornment}\n          </InputAdornment>\n        )\n      }}\n    />\n  )\n}\nexport default DateField","import React from 'react'\nimport { useClaimMeta } from '../../ClaimMetaContext'\nimport { Dialog, Grid, Button, DialogActions, DialogContent, DialogTitle } from '@material-ui/core'\nimport { Formik, Form } from 'formik'\nimport DateField from 'components/Formik/DateField'\nimport { gql } from '@apollo/client'\nimport { useAppointmentMadeMutation } from 'generated/graphql'\nimport { useSnackbar } from 'notistack'\ngql`\n  mutation AppointmentMade($id: ID!, $input: AppointmentInput!) {\n    claimMakeAppointment(\n      where: { id: $id }\n      input: $input\n    ) {\n      success\n      messages\n    }\n  }\n`\n\nexport default ({ claim }: any) => {\n  const claimMeta = useClaimMeta()\n  const userType = claimMeta?.me?.userType\n  const isBuilder = React.useMemo(() => userType === 'Builder', [userType])\n  const isRestorer = React.useMemo(() => userType === 'Restorer', [userType])\n\n  const isDisplayApointmentMade =\n    (\n      isBuilder\n      && claim?.claimJob?.building?.progress?.initialCallMade\n      && !claim.claimJob.building.progress.appointmentBooked\n    )\n    ||\n    (\n      isRestorer\n      && claim?.claimJob?.restoration?.progress?.initialCallMade\n      && !claim.claimJob.restoration?.progress.appointmentBooked\n    )\n\n  const [isOpen, setIsOpen] = React.useState(false)\n  const handleAppointmentMade = () => setIsOpen(true)\n  const handleClose = () => setIsOpen(false)\n  const [handleMadeAppointment] = useAppointmentMadeMutation()\n  const { enqueueSnackbar } = useSnackbar()\n  const ApointmentMadeDialog = () => (\n    <Dialog open={isOpen} onClose={handleClose} PaperProps={{ style: { minWidth: '40%', maxWidth: '65%' } }}>\n      <Formik\n        initialValues={{\n          appointmentDate: new Date()\n        }}\n        onSubmit={async values => {\n          if(claimMeta?.claim?.id) {\n            const res = await handleMadeAppointment({\n              variables: {\n                id: claimMeta.claim.id,\n                input: values\n              }\n            })\n            res?.data?.claimMakeAppointment?.messages.forEach(message => enqueueSnackbar(message))\n\n            if (res?.data?.claimMakeAppointment?.success) {\n              claimMeta.claimDetailsRefetch()\n            }\n          }\n          else {\n            console.log('claim meta error')\n          }\n        }}\n      >\n        {({ isSubmitting }) => (\n          <Form>\n            <DialogTitle>\n              Appointment Made\n            </DialogTitle>\n            <DialogContent>\n              <Grid container>\n                <Grid item xs={12}>\n                  <DateField\n                    name='appointmentDate'\n                    label='Appointment Date'\n                    variant='outlined'\n                    fullWidth\n                  />\n                </Grid>\n              </Grid>\n            </DialogContent>\n            <DialogActions>\n              <Button onClick={handleClose} disabled={isSubmitting}>\n                Cancel\n              </Button>\n              <Button type='submit' color='primary' disabled={isSubmitting}>\n                Make appointment\n              </Button>\n            </DialogActions>\n          </Form>\n        )}\n      </Formik>\n    </Dialog>\n  )\n\n  return {\n    isDisplayApointmentMade,\n    handleAppointmentMade,\n    ApointmentMadeDialog\n  }\n}"],"sourceRoot":""}