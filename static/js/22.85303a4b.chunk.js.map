{"version":3,"sources":["components/Formik/EditorField/index.tsx"],"names":["name","label","placeholder","disabled","props","isSubmitting","useFormikContext","useField","field","meta","helpers","error","touched","isError","Boolean","initialValue","value","RichTextEditor","createValueFromString","createEmptyValue","React","useState","setValue","style","width","id","toolbarConfig","display","INLINE_STYLE_BUTTONS","className","BLOCK_TYPE_DROPDOWN","BLOCK_TYPE_BUTTONS","onChange","toString","setTouched","marginLeft","marginRight"],"mappings":"+LAOe,sBAA4D,IAAzDA,EAAwD,EAAxDA,KAAMC,EAAkD,EAAlDA,MAAOC,EAA2C,EAA3CA,YAAaC,EAA8B,EAA9BA,SAAaC,EAAiB,yDAChEC,EAAiBC,cAAjBD,aADgE,EAGzCE,YAASP,GAHgC,mBAGjEQ,EAHiE,KAG1DC,EAH0D,KAGpDC,EAHoD,KAIhEC,EAAmBF,EAAnBE,MAAOC,EAAYH,EAAZG,QACTC,EAAUC,QAAQF,GAAWD,GAE7BI,EAAeP,EAAMQ,MACvBC,IAAeC,sBAAsBV,EAAMQ,MAAO,QAClDC,IAAeE,mBATqD,EAU9CC,IAAMC,SAAcN,GAV0B,mBAUjEC,EAViE,KAU1DM,EAV0D,KAYxE,OACE,kBAAC,IAAD,CAAaX,MAAOE,EAASU,MAAO,CAAEC,MAAO,QAAUC,GAAIjB,EAAMR,MAC/D,kBAAC,IAAD,iBACMI,EADN,CAEED,SAAUA,GAAYE,EACtBH,YAAaA,GAAeD,EAC5ByB,cAAe,CACbC,QAAS,CACP,uBACA,qBACA,sBACA,mBAEFC,qBAAsB,CACpB,CAAE3B,MAAO,OAAQsB,MAAO,OAAQM,UAAW,oBAC3C,CAAE5B,MAAO,SAAUsB,MAAO,UAC1B,CAAEtB,MAAO,YAAasB,MAAO,cAE/BO,oBAAqB,CACnB,CAAE7B,MAAO,SAAUsB,MAAO,YAC1B,CAAEtB,MAAO,gBAAiBsB,MAAO,cACjC,CAAEtB,MAAO,iBAAkBsB,MAAO,cAClC,CAAEtB,MAAO,gBAAiBsB,MAAO,iBAEnCQ,mBAAoB,CAClB,CAAE9B,MAAO,KAAMsB,MAAO,uBACtB,CAAEtB,MAAO,KAAMsB,MAAO,uBAG1BP,MAAOA,EACPgB,SAAU,SAAChB,GACTM,EAASN,GACTN,EAAQY,SAASN,EAAMiB,SAAS,SAChCvB,EAAQwB,YAAW,OAGtBrB,GACC,kBAAC,IAAD,CAAgBU,MAAO,CAAEY,WAAY,GAAIC,YAAa,KACnDzB","file":"static/js/22.85303a4b.chunk.js","sourcesContent":["import React from 'react'\n\nimport { useField, useFormikContext } from 'formik'\nimport RichTextEditor from 'react-rte'\nimport FormControl from '@material-ui/core/FormControl'\nimport FormHelperText from '@material-ui/core/FormHelperText'\n\nexport default ({ name, label, placeholder, disabled, ...props }: any) => {\n  const { isSubmitting } = useFormikContext()\n\n  const [field, meta, helpers] = useField(name)\n  const { error, touched } = meta\n  const isError = Boolean(touched && error)\n\n  const initialValue = field.value\n    ? RichTextEditor.createValueFromString(field.value, 'html')\n    : RichTextEditor.createEmptyValue()\n  const [value, setValue] = React.useState<any>(initialValue)\n\n  return (\n    <FormControl error={isError} style={{ width: '100%' }} id={field.name}>\n      <RichTextEditor\n        {...props}\n        disabled={disabled || isSubmitting}\n        placeholder={placeholder || label}\n        toolbarConfig={{\n          display: [\n            'INLINE_STYLE_BUTTONS',\n            'BLOCK_TYPE_BUTTONS',\n            'BLOCK_TYPE_DROPDOWN',\n            'HISTORY_BUTTONS'\n          ],\n          INLINE_STYLE_BUTTONS: [\n            { label: 'Bold', style: 'BOLD', className: 'custom-css-class' },\n            { label: 'Italic', style: 'ITALIC' },\n            { label: 'Underline', style: 'UNDERLINE' }\n          ],\n          BLOCK_TYPE_DROPDOWN: [\n            { label: 'Normal', style: 'unstyled' },\n            { label: 'Heading Large', style: 'header-one' },\n            { label: 'Heading Medium', style: 'header-two' },\n            { label: 'Heading Small', style: 'header-three' }\n          ],\n          BLOCK_TYPE_BUTTONS: [\n            { label: 'UL', style: 'unordered-list-item' },\n            { label: 'OL', style: 'ordered-list-item' }\n          ]\n        }}\n        value={value}\n        onChange={(value: any) => {\n          setValue(value)\n          helpers.setValue(value.toString('html'))\n          helpers.setTouched(true)\n        }}\n      />\n      {isError && (\n        <FormHelperText style={{ marginLeft: 14, marginRight: 14 }}>\n          {error}\n        </FormHelperText>\n      )}\n    </FormControl>\n  )\n}"],"sourceRoot":""}