{"version":3,"sources":["components/Formik/DateField/index.tsx","components/Table/index.tsx","layouts/TabLayout/index.tsx","pages/app/Claims/ClaimDetails/tabs/JobNotes/JobNoteList.tsx","pages/app/Claims/ClaimDetails/tabs/JobNotes/useInitialCallMade.tsx","pages/app/Claims/ClaimDetails/tabs/JobNotes/useAppointmentMade.tsx","pages/app/Claims/ClaimDetails/tabs/JobNotes/useChangeAppointment.tsx","pages/app/Claims/ClaimDetails/tabs/JobNotes/useAwaitingInfo.tsx","components/PortfolioFilter/ClaimPortfolioFilter.tsx","pages/app/Claims/ClaimDetails/tabs/JobNotes/index.tsx","components/PortfolioFilter/PortfolioFilter.tsx"],"names":["DateField","variant","startAdornment","endAdornment","props","component","DatePicker","clearable","inputVariant","format","placeholder","InputProps","position","Table","columns","data","totalCount","onRowClick","onScroll","renderRowSubComponent","classes","useStyles","hiddenColumns","React","useMemo","filter","show","map","accessor","id","useTable","initialState","useExpanded","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","flatColumns","className","paper","tableContainer","stickyHeader","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","tableHeaderCell","render","length","row","isExpanded","Fragment","key","onClick","tableRow","getRowProps","cells","cell","getCellProps","tableBodyCell","undefined","value","colSpan","TableWrapper","loading","loadingMore","loadingComponent","style","height","width","display","alignItems","justifyContent","container","top","bottom","left","right","zIndex","background","makeStyles","theme","padding","maxHeight","palette","primary","main","color","contrastText","spacing","textAlign","minWidth","borderLeft","borderRight","grey","flexWrap","TabLayout","actions","body","nextStep","useClaimActions","marginTop","marginBottom","size","open","flexGrow","index","label","unMountOn","children","marginRight","gql","JobNoteList","Header","Cell","original","portfolio","portfolioType","logDate","mappedData","claimNotes","edges","edge","node","useInitialCallMade","claim","claimMeta","useClaimMeta","userType","me","isBuilder","isRestorer","buildingSup","claimJob","building","jobSuppliers","restorationSup","restoration","isDisabledInitialCall","quote","isDisplayInitialCall","progress","initialCallMade","includes","claimStatus","statusId","useSnackbar","enqueueSnackbar","closeSnackbar","useInitCallMutation","handleInitCall","action","a","variables","res","claimInitialCall","messages","forEach","message","success","claimDetailsRefetch","console","log","handleInitialCallMade","persist","isDisplayApointmentMade","appointmentBooked","useState","isOpen","setIsOpen","handleClose","useAppointmentMadeMutation","handleMadeAppointment","handleAppointmentMade","ApointmentMadeDialog","onClose","PaperProps","maxWidth","initialValues","appointmentDate","Date","onSubmit","values","input","claimMakeAppointment","isSubmitting","item","xs","name","fullWidth","disabled","type","isQuoting","user","company","companyId","scopingSupplier","isDisplayChangeAppointment","useChangeAppointmentMutation","changeAppointment","handleChangeAppointment","ChangeApointmentDialog","awaitingInfoAction","find","actionType","isDisplayAwaitingInfo","isDisplay","isDisabledAwaitingInfo","isDisabled","portfolios","_portfolios","handleAwaitingInfo","AwaitingInfoDialog","status","toLowerCase","fontSize","AwaitingInfo","claimId","handleRefresh","useCancelAwaitingInfoMutation","cancelAwaitingInfo","handleCancelAwaitingInfo","where","claimCancelAwaitingInfo","AwaitingInfoForm","useAwaitingInfoFormQuery","useAddAwaitingInfoMutation","addAwaitingInfo","options","claimFilterOptions","awaitingInfoReasonId","note","claimAwaitingInfo","required","ClaimPortfolioFilter","setPortfolio","Filter","setValue","useEffect","PortfolioFilter","addJobNote","skip","useJobNotesQuery","first","after","useAppointmentMade","useChangeAppointment","useAwaitingInfo","toggle","Grid","flexDirection","margin"],"mappings":"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","file":"static/js/11.4c186154.chunk.js","sourcesContent":["import React from 'react'\n\nimport { Field } from 'formik'\nimport { DatePicker } from 'formik-material-ui-pickers' // DatePickerProps\n// import { DatePickerProps } from '@material-ui/pickers'\nimport { InputAdornment } from '@material-ui/core'\n\n// export type DateFieldProps = Omit<DatePickerProps, 'variant'>\n// & {\n//   name: string\n\n//   variant?: 'standard' | 'outlined' | 'filled'\n//   startAdornment?: React.ReactElement\n//   endAdornment?: React.ReactElement,\n// }\n\nconst DateField: React.FC<any> = ({ variant = 'standard', startAdornment, endAdornment, ...props }) => {\n  return (\n    <Field component={DatePicker}\n      {...props}\n\n      variant='dialog'\n      clearable\n\n      inputVariant={variant}\n      format='dd/MM/yyyy'\n      placeholder='DD/MM/YYYY'\n\n      InputProps={{\n        ...props.InputProps,\n        startAdornment: !startAdornment ? null : (\n          <InputAdornment position='start'>\n            {startAdornment}\n          </InputAdornment>\n        ),\n        endAdornment: !endAdornment ? null : (\n          <InputAdornment position='end'>\n            {endAdornment}\n          </InputAdornment>\n        )\n      }}\n    />\n  )\n}\nexport default DateField","import React from 'react'\nimport { Paper, Table as MuiTable, TableContainer, TableHead, TableRow, TableCell, TableBody, makeStyles, Typography, CircularProgress } from '@material-ui/core'\nimport { useTable, useExpanded } from 'react-table'\n\ninterface TableWrapperProps extends TableProps {\n  loading?: boolean\n  loadingMore?: boolean\n}\nconst TableWrapper: React.FC<TableWrapperProps> = ({ loading, loadingMore, data, ...props }) => {\n  const classes = useStyles({})\n  const loadingComponent = React.useMemo(() => (\n    <div style={{ height: '100%', width: '100%', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n      <CircularProgress />\n    </div>\n  ), [])\n\n\n  if (loading) return (\n    <div className={classes.container}>\n      {loadingComponent}\n    </div>\n  )\n\n  if (!data) return null\n\n  return (\n    <div className={classes.container}>\n      {!loadingMore ? null : (\n        <div style={{ position: 'absolute', top: 33, bottom: 0, left: 0, right: 0, zIndex: 10, background: 'rgba(255, 255, 255, 0.5)' }}>\n          {loadingComponent}\n        </div>\n      )}\n      <Table {...props} data={data} />\n    </div>\n  )\n}\n\ninterface TableProps {\n  data?: any\n  columns?: any\n  totalCount?: number | null\n\n  onRowClick?: any\n  onScroll?: any\n\n  renderRowSubComponent?: any\n}\nconst Table: React.FC<TableProps> = ({\n  columns, data, totalCount,\n  onRowClick, onScroll,\n  renderRowSubComponent,\n}) => {\n  const classes = useStyles({})\n\n  const hiddenColumns = React.useMemo(() => {\n    return columns?.filter(({ show }: any) => show === false)\n      .map(({ accessor, id }: any) => id ? id : accessor)\n  }, [columns])\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    columns: flatColumns,\n  } = useTable({\n    columns,\n    data,\n    initialState: { hiddenColumns },\n  }, useExpanded)\n\n  return (\n    <>\n      {totalCount && totalCount !== 0 ? (\n        <Typography variant='subtitle1'>\n          Found {totalCount}\n        </Typography>\n      ) : null}\n      <Paper className={classes.paper}>\n        <TableContainer className={classes.tableContainer} onScroll={onScroll}>\n          <MuiTable stickyHeader {...getTableProps()}>\n            <TableHead>\n              {headerGroups.map(headerGroup => (\n                <TableRow {...headerGroup.getHeaderGroupProps()}>\n                  {headerGroup.headers.map(column => {\n                    return (\n                      <TableCell {...column.getHeaderProps()} className={classes.tableHeaderCell}>\n                        {column.render('Header')}\n                      </TableCell>\n                    )\n                  })}\n                </TableRow>\n              ))}\n            </TableHead>\n            <TableBody {...getTableBodyProps()}>\n              {rows.length\n                ? (\n                  rows.map(row => {\n                    prepareRow(row)\n                    // @ts-ignore\n                    const { isExpanded } = row\n\n                    return (\n                      <React.Fragment key={row.id}>\n                        <TableRow onClick={onRowClick ? () => onRowClick(row) : () => { }} className={classes.tableRow} {...row.getRowProps()}>\n                          {row.cells.map(cell => {\n                            return (\n                              <TableCell {...cell.getCellProps()} className={classes.tableBodyCell}>\n                                {cell.value !== undefined ? cell.render('Cell') : '-'}\n                              </TableCell>\n                            )\n                          })}\n                        </TableRow>\n                        {isExpanded && (\n                          <TableRow>\n                            <TableCell colSpan={flatColumns.length}>\n                              {renderRowSubComponent({ row })}\n                            </TableCell>\n                          </TableRow>\n                        )}\n                      </React.Fragment>\n                    )\n                  })\n                )\n                : (\n                  <TableRow>\n                    <TableCell colSpan={flatColumns?.length ?? 4}>\n                      No item found\n                    </TableCell>\n                  </TableRow>\n                )\n              }\n            </TableBody>\n          </MuiTable>\n        </TableContainer>\n      </Paper>\n    </>\n  )\n}\n\nexport default TableWrapper\n\nconst useStyles = makeStyles(theme => ({\n  container: {\n    position: 'relative',\n    height: 'calc(100% - 28px)',\n    padding: 2\n  },\n  paper: {\n    height: '100%'\n  },\n  tableContainer: {\n    maxHeight: '100%'\n  },\n  tableHeaderCell: {\n    background: theme.palette.primary.main,\n    color: theme.palette.primary.contrastText,\n    padding: theme.spacing(0.5),\n    textAlign: 'center',\n    minWidth: 150,\n    borderLeft: '1px solid #fff',\n    borderRight: '1px solid #fff',\n  },\n  tableBodyCell: {\n    textAlign: 'center',\n    padding: theme.spacing(1),\n  },\n  tableRow: {\n    '&:nth-child(even)': {\n      background: theme.palette.grey[100],\n    },\n    '&:hover': {\n      background: theme.palette.grey[300],\n    },\n    flexWrap: 'nowrap'\n  }\n}))","import React from 'react'\nimport { CircularProgress, Paper, Button } from '@material-ui/core'\nimport { useClaimActions } from 'pages/app/Claims/ClaimDetails/actions/ClaimActionProvider'\n\ninterface TabLayoutProps {\n  loading?: boolean\n  actions: any\n  body: any\n}\nconst TabLayout: React.FC<TabLayoutProps> = ({ loading, actions, body }) => {\n  const { nextStep } = useClaimActions()\n\n  if (loading) return (\n    <div style={{ height: '100%', width: '100%', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n      <CircularProgress />\n    </div>\n  )\n\n  return (\n    <div className='tab-layout' style={{ height: '100%', marginTop: 8 }}>\n      <Paper style={{ padding: 8, display: 'flex', marginBottom: 4 }}>\n        <Button variant='outlined' color='primary' size='large' onClick={nextStep.open}>\n          Next Step\n        </Button>\n        <div style={{ flexGrow: 1 }} />\n        {actions.map(({ label, unMountOn, children, ...props }: any, index: number) => {\n          if(unMountOn) return null\n\n          return (\n            <Button\n              key={index}\n              style={{ marginRight: 8 }}\n              size='large'\n              color='primary'\n              variant='outlined'\n              {...props}\n            >\n              {label}\n              {children}\n            </Button>\n          )\n        })}\n      </Paper>\n      {body}\n    </div>\n  )\n}\nexport default TabLayout","import React from 'react'\nimport Table from 'components/Table'\n\nimport { gql } from '@apollo/client'\nimport { JobNotesQuery } from 'generated/graphql'\nimport PortfolioIcon from 'components/PortfolioIcon'\ngql`\n  fragment JobNoteListFragment on ClaimNote {\n    portfolioType\n    logDate\n    private\n    _privacy @client\n    message\n    user {\n      userName\n      company { companyName }\n    }\n  }\n`\n\ntype JobNoteListProps = {\n  data?: JobNotesQuery\n  loading: boolean\n}\nconst JobNoteList: React.FC<JobNoteListProps> = ({ data, loading }) => {\n  const columns = React.useMemo(() => [\n    { Header: 'Date', accessor: 'logDate', Cell: ({ cell: { row: { original }}}: any) => {\n      return (\n        <div style={{ display: 'flex' }}>\n          <PortfolioIcon portfolio={original.portfolioType} />\n          {original.logDate}\n        </div>\n      )\n    }},\n    { Header: 'Company', accessor: 'user.company.companyName' },\n    { Header: 'User', accessor: 'user.userName' },\n    { Header: 'Privacy', accessor: '_privacy' },\n    { Header: 'Note', accessor: 'message' },\n  ], [])\n\n  const mappedData = data?.claimNotes?.edges?.map(edge => edge?.node)\n\n  return (\n    <Table\n      loading={loading}\n      columns={columns}\n      data={mappedData}\n    />\n  )\n}\nexport default JobNoteList","import React from 'react'\nimport { useSnackbar } from 'notistack'\nimport { Button } from '@material-ui/core'\nimport { gql } from '@apollo/client'\nimport { useInitCallMutation } from 'generated/graphql'\nimport { useClaimMeta } from '../../ClaimMetaContext'\n\ngql`\n  mutation InitCall($id: ID!) {\n    claimInitialCall(where: { id: $id }) {\n      success\n      messages\n    }\n  }\n`\n\nconst useInitialCallMade = ({ claim }: any) => {\n  const claimMeta = useClaimMeta()\n\n  const userType = claimMeta?.me?.userType\n  const isBuilder = React.useMemo(() => userType === 'Builder', [userType])\n  const isRestorer = React.useMemo(() => userType === 'Restorer', [userType])\n\n  const buildingSup = claim?.claimJob?.building?.jobSuppliers\n  const restorationSup = claim?.claimJob?.restoration?.jobSuppliers\n\n  const isDisabledInitialCall =\n    (isBuilder && !(buildingSup && buildingSup[0]?.quote))\n    ||\n    (isRestorer && !(restorationSup && restorationSup[0]?.quote))\n  const isDisplayInitialCall =\n    (\n      isBuilder\n      && !claim?.claimJob?.building?.progress?.initialCallMade\n      && [11, 34].includes(claim?.claimJob?.building?.claimStatus?.statusId ?? -1)\n    )\n    ||\n    (\n      isRestorer\n      && !claim?.claimJob?.restoration?.progress?.initialCallMade\n      && [11, 34].includes(claim?.claimJob?.restoration?.claimStatus?.statusId ?? -1)\n    )\n\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar()\n  const [handleInitCall] = useInitCallMutation()\n  const action = (key: any) => (\n    <>\n      <Button color='secondary' onClick={async () => {\n        if (claimMeta?.claim?.id) {\n          const res = await handleInitCall({ variables: { id: claimMeta.claim.id } })\n          closeSnackbar(key)\n          res?.data?.claimInitialCall?.messages.forEach(message => enqueueSnackbar(message))\n\n          if (res?.data?.claimInitialCall?.success) {\n            claimMeta.claimDetailsRefetch()\n          }\n        }\n        else {\n          console.log('claim meta error')\n        }\n      }}>\n        Call Made\n      </Button>\n      <Button color='primary' onClick={() => closeSnackbar(key)}>\n        Not yet\n      </Button>\n    </>\n  )\n  const handleInitialCallMade = () => {\n    enqueueSnackbar('Please confirm that initial call has been made', {\n      persist: true,\n      action\n    })\n  }\n\n  return {\n    isDisabledInitialCall,\n    isDisplayInitialCall,\n    handleInitialCallMade\n  }\n}\nexport default useInitialCallMade","import React from 'react'\nimport { useClaimMeta } from '../../ClaimMetaContext'\nimport { Dialog, Grid, Button, DialogActions, DialogContent, DialogTitle } from '@material-ui/core'\nimport { Formik, Form } from 'formik'\nimport DateField from 'components/Formik/DateField'\nimport { gql } from '@apollo/client'\nimport { useAppointmentMadeMutation } from 'generated/graphql'\nimport { useSnackbar } from 'notistack'\ngql`\n  mutation AppointmentMade($id: ID!, $input: AppointmentInput!) {\n    claimMakeAppointment(\n      where: { id: $id }\n      input: $input\n    ) {\n      success\n      messages\n    }\n  }\n`\n\nexport default ({ claim }: any) => {\n  const claimMeta = useClaimMeta()\n  const userType = claimMeta?.me?.userType\n  const isBuilder = React.useMemo(() => userType === 'Builder', [userType])\n  const isRestorer = React.useMemo(() => userType === 'Restorer', [userType])\n\n  const isDisplayApointmentMade =\n    (\n      isBuilder\n      && claim?.claimJob?.building?.progress?.initialCallMade\n      && !claim.claimJob.building.progress.appointmentBooked\n    )\n    ||\n    (\n      isRestorer\n      && claim?.claimJob?.restoration?.progress?.initialCallMade\n      && !claim.claimJob.restoration?.progress.appointmentBooked\n    )\n\n  const [isOpen, setIsOpen] = React.useState(false)\n  const handleAppointmentMade = () => setIsOpen(true)\n  const handleClose = () => setIsOpen(false)\n  const [handleMadeAppointment] = useAppointmentMadeMutation()\n  const { enqueueSnackbar } = useSnackbar()\n  const ApointmentMadeDialog = () => (\n    <Dialog open={isOpen} onClose={handleClose} PaperProps={{ style: { minWidth: '40%', maxWidth: '65%' } }}>\n      <Formik\n        initialValues={{\n          appointmentDate: new Date()\n        }}\n        onSubmit={async values => {\n          if(claimMeta?.claim?.id) {\n            const res = await handleMadeAppointment({\n              variables: {\n                id: claimMeta.claim.id,\n                input: values\n              }\n            })\n            res?.data?.claimMakeAppointment?.messages.forEach(message => enqueueSnackbar(message))\n\n            if (res?.data?.claimMakeAppointment?.success) {\n              claimMeta.claimDetailsRefetch()\n            }\n          }\n          else {\n            console.log('claim meta error')\n          }\n        }}\n      >\n        {({ isSubmitting }) => (\n          <Form>\n            <DialogTitle>\n              Appointment Made\n            </DialogTitle>\n            <DialogContent>\n              <Grid container>\n                <Grid item xs={12}>\n                  <DateField\n                    name='appointmentDate'\n                    label='Appointment Date'\n                    variant='outlined'\n                    fullWidth\n                  />\n                </Grid>\n              </Grid>\n            </DialogContent>\n            <DialogActions>\n              <Button onClick={handleClose} disabled={isSubmitting}>\n                Cancel\n              </Button>\n              <Button type='submit' color='primary' disabled={isSubmitting}>\n                Make appointment\n              </Button>\n            </DialogActions>\n          </Form>\n        )}\n      </Formik>\n    </Dialog>\n  )\n\n  return {\n    isDisplayApointmentMade,\n    handleAppointmentMade,\n    ApointmentMadeDialog\n  }\n}","import React from 'react'\nimport { useClaimMeta } from '../../ClaimMetaContext'\nimport { Dialog, DialogTitle, DialogContent, DialogActions, Button } from '@material-ui/core'\nimport { Formik, Form } from 'formik'\nimport DateField from 'components/Formik/DateField'\nimport { gql } from '@apollo/client'\nimport { useChangeAppointmentMutation } from 'generated/graphql'\nimport { useSnackbar } from 'notistack'\ngql`\n  mutation ChangeAppointment($id: ID!, $input: AppointmentInput!) {\n    claimMakeAppointment(\n      where: { id: $id }\n      input: $input\n    ) {\n      success\n      messages\n    }\n  }\n`\n\nexport default ({ claim }: any) => {\n  const claimMeta = useClaimMeta()\n  const userType = claimMeta?.me?.userType\n  const isBuilder = React.useMemo(() => userType === 'Builder', [userType])\n  const isRestorer = React.useMemo(() => userType === 'Restorer', [userType])\n\n  const companyId = claimMeta?.user?.company?.companyId\n  const scopingId =\n    isBuilder ? claim?.claimJob?.building?.scopingSupplier?.companyId :\n    isRestorer ? claim?.claimJob?.restoration?.scopingSupplier?.companyId :\n    ''\n  const isQuoting = companyId !== scopingId\n  const isDisplayChangeAppointment =\n    (isBuilder && !isQuoting && [1, 37].includes(claim?.claimJob?.building?.claimStatus?.statusId ?? -1))\n    ||\n    (isRestorer && !isQuoting && [1, 37].includes(claim?.claimJob?.restoration?.claimStatus?.statusId ?? -1))\n\n  const [isOpen, setIsOpen] = React.useState(false)\n  const handleChangeAppointment = () => setIsOpen(true)\n  const handleClose = () => setIsOpen(false)\n  const [changeAppointment] = useChangeAppointmentMutation()\n  const { enqueueSnackbar } = useSnackbar()\n  const ChangeApointmentDialog = () => (\n    <Dialog open={isOpen} onClose={handleClose} PaperProps={{ style: { minWidth: '40%', maxWidth: '65%' } }}>\n      <Formik\n        initialValues={{\n          appointmentDate: new Date()\n        }}\n        onSubmit={async values => {\n          if (claimMeta?.claim?.id) {\n            const res = await changeAppointment({\n              variables: {\n                id: claimMeta.claim.id,\n                input: values\n              }\n            })\n            res?.data?.claimMakeAppointment?.messages.forEach(message => enqueueSnackbar(message))\n\n            if (res?.data?.claimMakeAppointment?.success) {\n              claimMeta.claimDetailsRefetch()\n            }\n          }\n          else {\n            console.log('claim meta error')\n          }\n        }}\n      >\n        {({ isSubmitting }) => (\n          <Form>\n            <DialogTitle>\n              Change Appointment\n            </DialogTitle>\n            <DialogContent>\n              <DateField\n                name='appointmentDate'\n                label='Appointment Date'\n                variant='outlined'\n                fullWidth\n              />\n            </DialogContent>\n            <DialogActions>\n              <Button onClick={handleClose} disabled={isSubmitting}>\n                Cancel\n              </Button>\n              <Button type='submit' color='primary' disabled={isSubmitting}>\n                Make appointment\n              </Button>\n            </DialogActions>\n          </Form>\n        )}\n      </Formik>\n    </Dialog>\n  )\n\n  return {\n    isDisplayChangeAppointment,\n    handleChangeAppointment,\n    ChangeApointmentDialog\n  }\n}","import React from 'react'\nimport { ClaimDetailsQuery } from 'generated/graphql'\nimport { Dialog, DialogContent, DialogActions, Button, DialogTitle, Grid, Typography, CircularProgress } from '@material-ui/core'\nimport { useClaimMeta } from '../../ClaimMetaContext'\nimport PortfolioIcon from 'components/PortfolioIcon'\nimport { gql } from '@apollo/client'\nimport { useCancelAwaitingInfoMutation, useAddAwaitingInfoMutation, useAwaitingInfoFormQuery } from 'generated/graphql'\nimport { useSnackbar } from 'notistack'\nimport { Formik, Form } from 'formik'\nimport TextField from 'components/Formik/TextField'\nimport SelectField, { SelectOption } from 'components/Formik/SelectField'\n\nexport default ({ claim }: { claim?: ClaimDetailsQuery }) => {\n  const claimMeta = useClaimMeta()\n  const awaitingInfoAction = claim?.claimJob?.actions.find((action: any) => action?.actionType === 'CLAIM_AWAITING_INFO')\n  const isDisplayAwaitingInfo = awaitingInfoAction?.isDisplay ?? false\n  const isDisabledAwaitingInfo = awaitingInfoAction?.isDisabled ?? false\n\n  const [isOpen, setIsOpen] = React.useState(false)\n  const handleAwaitingInfo = () => setIsOpen(true)\n  const handleClose = () => setIsOpen(false)\n\n  const portfolios = claimMeta?.me?.userType === 'Administrator'\n    ? claimMeta?.claim?._portfolios\n    : claimMeta?.claim?._portfolios?.filter(portfolio => {\n      if (portfolio === 'Building' && claimMeta?.me?.userType === 'Builder') return true\n      if (portfolio === 'Restoration' && claimMeta?.me?.userType === 'Restorer') return true\n      if (portfolio === 'Contents' && claimMeta?.me?.userType === 'ContentSupplier') return true\n    })\n\n  const AwaitingInfoDialog = () => (\n    <Dialog open={isOpen} onClose={handleClose} PaperProps={{ style: { minWidth: '40%', maxWidth: '65%' } }}>\n      <DialogTitle>\n        Awaiting Info\n      </DialogTitle>\n      <DialogContent>\n        <Grid container spacing={2}>\n          {portfolios?.map(portfolio => {\n            // @ts-ignore\n            const status = claim?.claimJob ? claim?.claimJob[portfolio.toLowerCase()].claimStatus.statusId : -1\n            return (\n              <Grid item xs key={portfolio}>\n                <div style={{ display: 'flex', justifyContent: 'center', marginBottom: 16 }}>\n                  <PortfolioIcon portfolio={portfolio} style={{ fontSize: '2rem' }} />\n                </div>\n                <AwaitingInfo\n                  claimId={claim?.claimJob?.id}\n                  portfolio={portfolio}\n                  status={status}\n                  handleClose={handleClose}\n                  handleRefresh={claimMeta?.claimDetailsRefetch}\n                />\n              </Grid>\n            )\n          })}\n        </Grid>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleClose}>\n          Close\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n\n  return {\n    isDisplayAwaitingInfo,\n    isDisabledAwaitingInfo,\n    handleAwaitingInfo,\n    AwaitingInfoDialog\n  }\n}\n\ngql`\n  mutation CancelAwaitingInfo($where: ENDataPortfolioKey!) {\n    claimCancelAwaitingInfo(where: $where) {\n      success\n      messages\n    }\n  }\n  mutation AddAwaitingInfo($input: AwaitingInfoClaimInputType!, $where: ENDataPortfolioKey!) {\n    claimAwaitingInfo(input: $input, where: $where) {\n      success\n      messages\n    }\n  }\n  query AwaitingInfoForm($portfolios: [PortfolioType]) {\n    claimFilterOptions(where: {\n      subject: \"awaitingInfoReasons\"\n      portfolios: $portfolios\n    }) {\n      label: name\n      value\n    }\n  }\n`\nconst AwaitingInfo = ({ claimId, portfolio, status, handleClose, handleRefresh }: any) => {\n  const { enqueueSnackbar } = useSnackbar()\n  const [cancelAwaitingInfo] = useCancelAwaitingInfoMutation()\n\n  if (status === 11) return (\n    <Typography variant='body1' style={{ textAlign: 'center' }}>\n      Claim finalised\n    </Typography>\n  )\n\n  const handleCancelAwaitingInfo = async () => {\n    const res = await cancelAwaitingInfo({ variables: { where: {\n      id: claimId,\n      portfolioType: portfolio\n    }}})\n    res.data?.claimCancelAwaitingInfo?.messages.forEach(message => enqueueSnackbar(message))\n    if (res.data?.claimCancelAwaitingInfo?.success) {\n      handleClose()\n      handleRefresh()\n    }\n  }\n  if (status === 33 || (status === 102 && portfolio === 'Contents')) return (\n    <Button variant='outlined' color='primary' onClick={handleCancelAwaitingInfo}>\n      Cancel Awaiting Info\n    </Button>\n  )\n\n  return (\n    <AwaitingInfoForm\n      claimId={claimId}\n      portfolio={portfolio}\n      handleClose={handleClose}\n      handleRefresh={handleRefresh}\n    />\n  )\n}\n\nconst AwaitingInfoForm = ({ claimId, portfolio, handleClose, handleRefresh }: any) => {\n  const { enqueueSnackbar } = useSnackbar()\n  const { data, loading } = useAwaitingInfoFormQuery({ variables: {\n    portfolios: [portfolio]\n  }})\n  const [addAwaitingInfo] = useAddAwaitingInfoMutation()\n\n  if(loading || !data) return <CircularProgress />\n  // console.log({ claimId, portfolio })\n\n  const options = data.claimFilterOptions as SelectOption[]\n\n  return (\n    <Formik\n      initialValues={{\n        awaitingInfoReasonId: '',\n        note: ''\n      }}\n      onSubmit={async values => {\n        const res = await addAwaitingInfo({ variables: {\n          where: {\n            id: claimId,\n            portfolioType: portfolio\n          },\n          input: values\n        }})\n        res.data?.claimAwaitingInfo?.messages.forEach(message => enqueueSnackbar(message))\n\n        if (res.data?.claimAwaitingInfo?.success) {\n          handleClose()\n          handleRefresh()\n        }\n      }}\n    >\n      {({ isSubmitting }) => (\n        <Form>\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <SelectField\n                label='Reason' name='awaitingInfoReasonId'\n                required\n                options={options}\n                variant='outlined' fullWidth\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField label='Additional Notes' name='note' variant='outlined' fullWidth />\n            </Grid>\n            <Grid item xs={12}>\n              <Button variant='contained' color='primary' fullWidth type='submit' disabled={isSubmitting}>\n                Wait for info\n              </Button>\n            </Grid>\n          </Grid>\n        </Form>\n      )}\n    </Formik>\n  )\n}","import React from 'react'\nimport PortfolioFilter, { PortfolioType } from 'components/PortfolioFilter/PortfolioFilter'\nimport { useClaimMeta } from 'pages/app/Claims/ClaimDetails/ClaimMetaContext'\n\nconst ClaimPortfolioFilter = ({ setPortfolio }: any) => {\n  const claimMeta = useClaimMeta()\n  const portfolios = claimMeta?.claim?._portfolios\n  if (!portfolios) return null\n\n  return <Filter portfolios={portfolios} setPortfolio={setPortfolio} />\n}\nexport default ClaimPortfolioFilter\n\nconst Filter = ({ portfolios, setPortfolio }: any) => {\n  const [value, setValue] = React.useState<PortfolioType>(portfolios[0])\n\n  React.useEffect(() => {\n    setPortfolio(value)\n  }, [value, setPortfolio])\n\n  return <PortfolioFilter portfolios={portfolios} value={value} setValue={setValue} />\n}","import React from 'react'\nimport { Grid } from '@material-ui/core'\nimport TabLayout from 'layouts/TabLayout'\nimport ClaimPortfolioFilter from 'components/PortfolioFilter/ClaimPortfolioFilter'\nimport JobNoteList from './JobNoteList'\n\nimport useInitialCallMade from './useInitialCallMade'\nimport useAppointmentMade from './useAppointmentMade'\nimport useChangeAppointment from './useChangeAppointment'\n\nimport { useJobNotesQuery, ClaimDetailsQuery } from 'generated/graphql'\nimport { gql } from '@apollo/client'\nimport { useClaimActions } from '../../actions/ClaimActionProvider'\nimport useAwaitingInfo from './useAwaitingInfo'\ngql`\n  query JobNotes($where: ClaimItemFilter, $first: Int, $after: String) {\n    claimNotes(where: $where, first: $first, after: $after) {\n      edges {\n        node {\n          id\n          ...JobNoteListFragment\n        }\n      }\n    }\n  }\n  fragment JobNotesFragment on ClaimJob {\n    actions {\n      actionType\n      name\n      isDisplay\n      isDisabled\n    }\n    building {\n      progress { initialCallMade appointmentBooked }\n      claimStatus { statusId }\n      jobSuppliers { quote { id }}\n    }\n    restoration {\n      progress { initialCallMade appointmentBooked }\n      claimStatus { statusId }\n      jobSuppliers { quote { id }}\n    }\n  }\n`\n\ntype JobNotesProps = {\n  claimId?: string\n  data?: ClaimDetailsQuery\n}\nexport default ({ claimId, data: claim }: JobNotesProps) => {\n  const { addJobNote } = useClaimActions()\n\n  const [portfolio, setPortfolio] = React.useState()\n\n  const skip = !claimId || !portfolio\n  // @ts-ignore\n  const { data, loading } = useJobNotesQuery({\n    variables: {\n      first: 1000,\n      after: null,\n      where: {\n        claimId,\n        portfolios: [portfolio]\n      }\n    },\n    skip\n  })\n\n  const {\n    isDisplayInitialCall, isDisabledInitialCall,\n    handleInitialCallMade\n  } = useInitialCallMade({ claim })\n\n  const {\n    isDisplayApointmentMade,\n    handleAppointmentMade,\n    ApointmentMadeDialog\n  } = useAppointmentMade({ claim })\n\n  const {\n    isDisplayChangeAppointment,\n    handleChangeAppointment,\n    ChangeApointmentDialog\n  } = useChangeAppointment({ claim })\n\n  const {\n    isDisplayAwaitingInfo,\n    isDisabledAwaitingInfo,\n    handleAwaitingInfo,\n    AwaitingInfoDialog\n  } = useAwaitingInfo({ claim })\n\n  return (\n    <>\n      <ApointmentMadeDialog />\n      <ChangeApointmentDialog />\n      <AwaitingInfoDialog />\n      <TabLayout\n        actions={[\n          {\n            label: 'Initial Call Made',\n            disabled: isDisabledInitialCall,\n            unMountOn: !isDisplayInitialCall,\n            onClick: handleInitialCallMade\n          },\n          {\n            label: 'Appointment Made',\n            unMountOn: !isDisplayApointmentMade,\n            onClick: handleAppointmentMade\n          },\n          {\n            label: 'Change Appointment',\n            unMountOn: !isDisplayChangeAppointment,\n            onClick: handleChangeAppointment\n          },\n          {\n            label: 'Awaiting Info',\n            disabled: isDisabledAwaitingInfo,\n            unMountOn: !isDisplayAwaitingInfo,\n            onClick: handleAwaitingInfo\n          },\n          { label: 'New Job Note', onClick: () => addJobNote && addJobNote.toggle() },\n        ]}\n        body={(\n          <Grid container spacing={1} style={{ marginTop: 4 }} alignItems='flex-start'>\n            <Grid item>\n              <ClaimPortfolioFilter setPortfolio={setPortfolio} />\n            </Grid>\n            <Grid item xs>\n              <JobNoteList data={data} loading={loading || skip} />\n            </Grid>\n          </Grid>\n        )}\n      />\n    </>\n  )\n}","import React from 'react'\nimport { Paper, Button } from '@material-ui/core'\nimport PortfolioIcon from 'components/PortfolioIcon'\n\nexport type PortfolioFilterProps = {\n  portfolios: PortfolioType[]\n\n  value: PortfolioType\n  setValue: (value: PortfolioType) => void\n}\nexport type PortfolioType = 'Building' | 'Contents' | 'Restoration'\n\nconst PortfolioFilter: React.FC<PortfolioFilterProps> = ({ portfolios, value, setValue }) => {\n  return (\n    <Paper style={{ display: 'flex', flexDirection: 'column', padding: 4 }}>\n      {portfolios.map(portfolio => (\n        <Button\n          key={portfolio}\n          style={{\n            margin: 0, marginBottom: 4,\n            minWidth: 50, width: 50,\n          }}\n          variant={value === portfolio ? 'contained' : 'text'}\n          onClick={() => setValue(portfolio)}\n        >\n          <PortfolioIcon portfolio={portfolio} style={{ margin: 0, fontSize: '1.5rem' }} />\n        </Button>\n      ))}\n    </Paper>\n  )\n}\nexport default PortfolioFilter"],"sourceRoot":""}