{"version":3,"sources":["pages/app/Claims/ClaimDetails/tabs/JobNotes/useInitialCallMade.tsx"],"names":["gql","useInitialCallMade","claim","claimMeta","useClaimMeta","userType","me","isBuilder","React","useMemo","isRestorer","buildingSup","claimJob","building","jobSuppliers","restorationSup","restoration","isDisabledInitialCall","quote","isDisplayInitialCall","progress","initialCallMade","includes","claimStatus","statusId","useSnackbar","enqueueSnackbar","closeSnackbar","useInitCallMutation","handleInitCall","action","key","color","onClick","a","id","variables","res","data","claimInitialCall","messages","forEach","message","success","claimDetailsRefetch","console","log","handleInitialCallMade","persist"],"mappings":"wZAOAA,YAAG,KA0EYC,UAjEY,SAAC,GAAoB,IAAD,0CAAjBC,EAAiB,EAAjBA,MACtBC,EAAYC,cAEZC,EAAQ,OAAGF,QAAH,IAAGA,OAAH,YAAGA,EAAWG,UAAd,aAAG,EAAeD,SAC1BE,EAAYC,IAAMC,SAAQ,iBAAmB,YAAbJ,IAAwB,CAACA,IACzDK,EAAaF,IAAMC,SAAQ,iBAAmB,aAAbJ,IAAyB,CAACA,IAE3DM,EAAW,OAAGT,QAAH,IAAGA,OAAH,YAAGA,EAAOU,gBAAV,uBAAG,EAAiBC,gBAApB,aAAG,EAA2BC,aACzCC,EAAc,OAAGb,QAAH,IAAGA,OAAH,YAAGA,EAAOU,gBAAV,uBAAG,EAAiBI,mBAApB,aAAG,EAA8BF,aAE/CG,EACHV,KAAeI,IAAW,UAAIA,EAAY,UAAhB,aAAI,EAAgBO,SAE9CR,KAAgBK,IAAc,UAAIA,EAAe,UAAnB,aAAI,EAAmBG,QAClDC,EAEFZ,KACG,OAACL,QAAD,IAACA,OAAD,YAACA,EAAOU,gBAAR,uBAAC,EAAiBC,gBAAlB,uBAAC,EAA2BO,gBAA5B,aAAC,EAAqCC,kBACtC,CAAC,GAAI,IAAIC,SAAT,iBAAkBpB,QAAlB,IAAkBA,OAAlB,YAAkBA,EAAOU,gBAAzB,uBAAkB,EAAiBC,gBAAnC,uBAAkB,EAA2BU,mBAA7C,aAAkB,EAAwCC,gBAA1D,SAAuE,IAI1Ed,KACG,OAACR,QAAD,IAACA,OAAD,YAACA,EAAOU,gBAAR,uBAAC,EAAiBI,mBAAlB,uBAAC,EAA8BI,gBAA/B,aAAC,EAAwCC,kBACzC,CAAC,GAAI,IAAIC,SAAT,iBAAkBpB,QAAlB,IAAkBA,OAAlB,YAAkBA,EAAOU,gBAAzB,uBAAkB,EAAiBI,mBAAnC,uBAAkB,EAA8BO,mBAAhD,aAAkB,EAA2CC,gBAA7D,SAA0E,GAxBpC,EA2BFC,wBAAnCC,EA3BqC,EA2BrCA,gBAAiBC,EA3BoB,EA2BpBA,cA3BoB,EA4BpBC,cAAlBC,EA5BsC,oBA6BvCC,EAAS,SAACC,GAAD,OACb,oCACE,kBAAC,IAAD,CAAQC,MAAM,YAAYC,QAAO,sBAAE,sCAAAC,EAAA,kEAC7B/B,QAD6B,IAC7BA,OAD6B,YAC7BA,EAAWD,aADkB,aAC7B,EAAkBiC,IADW,gCAEbN,EAAe,CAAEO,UAAW,CAAED,GAAIhC,EAAUD,MAAMiC,MAFrC,OAEzBE,EAFyB,OAG/BV,EAAcI,GACX,OAAHM,QAAG,IAAHA,GAAA,UAAAA,EAAKC,YAAL,mBAAWC,wBAAX,SAA6BC,SAASC,SAAQ,SAAAC,GAAO,OAAIhB,EAAgBgB,OAEzE,OAAIL,QAAJ,IAAIA,OAAJ,YAAIA,EAAKC,YAAT,uBAAI,EAAWC,wBAAf,aAAI,EAA6BI,UAC/BxC,EAAUyC,sBAPmB,uBAW/BC,QAAQC,IAAI,oBAXmB,6CAAnC,aAgBA,kBAAC,IAAD,CAAQd,MAAM,UAAUC,QAAS,kBAAMN,EAAcI,KAArD,aAYJ,MAAO,CACLd,wBACAE,uBACA4B,sBAV4B,WAC5BrB,EAAgB,iDAAkD,CAChEsB,SAAS,EACTlB","file":"static/js/63.0aa151de.chunk.js","sourcesContent":["import React from 'react'\nimport { useSnackbar } from 'notistack'\nimport { Button } from '@material-ui/core'\nimport { gql } from '@apollo/client'\nimport { useInitCallMutation } from 'generated/graphql'\nimport { useClaimMeta } from '../../ClaimMetaContext'\n\ngql`\n  mutation InitCall($id: ID!) {\n    claimInitialCall(where: { id: $id }) {\n      success\n      messages\n    }\n  }\n`\n\nconst useInitialCallMade = ({ claim }: any) => {\n  const claimMeta = useClaimMeta()\n\n  const userType = claimMeta?.me?.userType\n  const isBuilder = React.useMemo(() => userType === 'Builder', [userType])\n  const isRestorer = React.useMemo(() => userType === 'Restorer', [userType])\n\n  const buildingSup = claim?.claimJob?.building?.jobSuppliers\n  const restorationSup = claim?.claimJob?.restoration?.jobSuppliers\n\n  const isDisabledInitialCall =\n    (isBuilder && !(buildingSup && buildingSup[0]?.quote))\n    ||\n    (isRestorer && !(restorationSup && restorationSup[0]?.quote))\n  const isDisplayInitialCall =\n    (\n      isBuilder\n      && !claim?.claimJob?.building?.progress?.initialCallMade\n      && [11, 34].includes(claim?.claimJob?.building?.claimStatus?.statusId ?? -1)\n    )\n    ||\n    (\n      isRestorer\n      && !claim?.claimJob?.restoration?.progress?.initialCallMade\n      && [11, 34].includes(claim?.claimJob?.restoration?.claimStatus?.statusId ?? -1)\n    )\n\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar()\n  const [handleInitCall] = useInitCallMutation()\n  const action = (key: any) => (\n    <>\n      <Button color='secondary' onClick={async () => {\n        if (claimMeta?.claim?.id) {\n          const res = await handleInitCall({ variables: { id: claimMeta.claim.id } })\n          closeSnackbar(key)\n          res?.data?.claimInitialCall?.messages.forEach(message => enqueueSnackbar(message))\n\n          if (res?.data?.claimInitialCall?.success) {\n            claimMeta.claimDetailsRefetch()\n          }\n        }\n        else {\n          console.log('claim meta error')\n        }\n      }}>\n        Call Made\n      </Button>\n      <Button color='primary' onClick={() => closeSnackbar(key)}>\n        Not yet\n      </Button>\n    </>\n  )\n  const handleInitialCallMade = () => {\n    enqueueSnackbar('Please confirm that initial call has been made', {\n      persist: true,\n      action\n    })\n  }\n\n  return {\n    isDisabledInitialCall,\n    isDisplayInitialCall,\n    handleInitialCallMade\n  }\n}\nexport default useInitialCallMade"],"sourceRoot":""}