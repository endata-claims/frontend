{"version":3,"sources":["pages/app/Claims/ClaimDetails/tabs/JobNotes/useAwaitingInfo.tsx"],"names":["claim","claimMeta","useClaimMeta","awaitingInfoAction","claimJob","actions","find","action","actionType","isDisplayAwaitingInfo","isDisplay","isDisabledAwaitingInfo","isDisabled","React","useState","isOpen","setIsOpen","handleClose","portfolios","me","userType","_portfolios","filter","portfolio","handleAwaitingInfo","AwaitingInfoDialog","open","onClose","PaperProps","style","minWidth","maxWidth","container","spacing","map","status","toLowerCase","claimStatus","statusId","item","xs","key","display","justifyContent","marginBottom","fontSize","AwaitingInfo","claimId","id","handleRefresh","claimDetailsRefetch","onClick","gql","enqueueSnackbar","useSnackbar","useCancelAwaitingInfoMutation","cancelAwaitingInfo","variant","textAlign","handleCancelAwaitingInfo","a","variables","where","portfolioType","res","data","claimCancelAwaitingInfo","messages","forEach","message","success","color","AwaitingInfoForm","useAwaitingInfoFormQuery","loading","useAddAwaitingInfoMutation","addAwaitingInfo","options","claimFilterOptions","initialValues","awaitingInfoReasonId","note","onSubmit","values","input","claimAwaitingInfo","isSubmitting","label","name","required","fullWidth","type","disabled"],"mappings":"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","file":"static/js/62.d0e0584c.chunk.js","sourcesContent":["import React from 'react'\nimport { ClaimDetailsQuery } from 'generated/graphql'\nimport { Dialog, DialogContent, DialogActions, Button, DialogTitle, Grid, Typography, CircularProgress } from '@material-ui/core'\nimport { useClaimMeta } from '../../ClaimMetaContext'\nimport PortfolioIcon from 'components/PortfolioIcon'\nimport { gql } from '@apollo/client'\nimport { useCancelAwaitingInfoMutation, useAddAwaitingInfoMutation, useAwaitingInfoFormQuery } from 'generated/graphql'\nimport { useSnackbar } from 'notistack'\nimport { Formik, Form } from 'formik'\nimport TextField from 'components/Formik/TextField'\nimport SelectField, { SelectOption } from 'components/Formik/SelectField'\n\nexport default ({ claim }: { claim?: ClaimDetailsQuery }) => {\n  const claimMeta = useClaimMeta()\n  const awaitingInfoAction = claim?.claimJob?.actions.find((action: any) => action?.actionType === 'CLAIM_AWAITING_INFO')\n  const isDisplayAwaitingInfo = awaitingInfoAction?.isDisplay ?? false\n  const isDisabledAwaitingInfo = awaitingInfoAction?.isDisabled ?? false\n\n  const [isOpen, setIsOpen] = React.useState(false)\n  const handleAwaitingInfo = () => setIsOpen(true)\n  const handleClose = () => setIsOpen(false)\n\n  const portfolios = claimMeta?.me?.userType === 'Administrator'\n    ? claimMeta?.claim?._portfolios\n    : claimMeta?.claim?._portfolios?.filter(portfolio => {\n      if (portfolio === 'Building' && claimMeta?.me?.userType === 'Builder') return true\n      if (portfolio === 'Restoration' && claimMeta?.me?.userType === 'Restorer') return true\n      if (portfolio === 'Contents' && claimMeta?.me?.userType === 'ContentSupplier') return true\n    })\n\n  const AwaitingInfoDialog = () => (\n    <Dialog open={isOpen} onClose={handleClose} PaperProps={{ style: { minWidth: '40%', maxWidth: '65%' } }}>\n      <DialogTitle>\n        Awaiting Info\n      </DialogTitle>\n      <DialogContent>\n        <Grid container spacing={2}>\n          {portfolios?.map(portfolio => {\n            // @ts-ignore\n            const status = claim?.claimJob ? claim?.claimJob[portfolio.toLowerCase()].claimStatus.statusId : -1\n            return (\n              <Grid item xs key={portfolio}>\n                <div style={{ display: 'flex', justifyContent: 'center', marginBottom: 16 }}>\n                  <PortfolioIcon portfolio={portfolio} style={{ fontSize: '2rem' }} />\n                </div>\n                <AwaitingInfo\n                  claimId={claim?.claimJob?.id}\n                  portfolio={portfolio}\n                  status={status}\n                  handleClose={handleClose}\n                  handleRefresh={claimMeta?.claimDetailsRefetch}\n                />\n              </Grid>\n            )\n          })}\n        </Grid>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleClose}>\n          Close\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n\n  return {\n    isDisplayAwaitingInfo,\n    isDisabledAwaitingInfo,\n    handleAwaitingInfo,\n    AwaitingInfoDialog\n  }\n}\n\ngql`\n  mutation CancelAwaitingInfo($where: ENDataPortfolioKey!) {\n    claimCancelAwaitingInfo(where: $where) {\n      success\n      messages\n    }\n  }\n  mutation AddAwaitingInfo($input: AwaitingInfoClaimInputType!, $where: ENDataPortfolioKey!) {\n    claimAwaitingInfo(input: $input, where: $where) {\n      success\n      messages\n    }\n  }\n  query AwaitingInfoForm($portfolios: [PortfolioType]) {\n    claimFilterOptions(where: {\n      subject: \"awaitingInfoReasons\"\n      portfolios: $portfolios\n    }) {\n      label: name\n      value\n    }\n  }\n`\nconst AwaitingInfo = ({ claimId, portfolio, status, handleClose, handleRefresh }: any) => {\n  const { enqueueSnackbar } = useSnackbar()\n  const [cancelAwaitingInfo] = useCancelAwaitingInfoMutation()\n\n  if (status === 11) return (\n    <Typography variant='body1' style={{ textAlign: 'center' }}>\n      Claim finalised\n    </Typography>\n  )\n\n  const handleCancelAwaitingInfo = async () => {\n    const res = await cancelAwaitingInfo({ variables: { where: {\n      id: claimId,\n      portfolioType: portfolio\n    }}})\n    res.data?.claimCancelAwaitingInfo?.messages.forEach(message => enqueueSnackbar(message))\n    if (res.data?.claimCancelAwaitingInfo?.success) {\n      handleClose()\n      handleRefresh()\n    }\n  }\n  if (status === 33 || (status === 102 && portfolio === 'Contents')) return (\n    <Button variant='outlined' color='primary' onClick={handleCancelAwaitingInfo}>\n      Cancel Awaiting Info\n    </Button>\n  )\n\n  return (\n    <AwaitingInfoForm\n      claimId={claimId}\n      portfolio={portfolio}\n      handleClose={handleClose}\n      handleRefresh={handleRefresh}\n    />\n  )\n}\n\nconst AwaitingInfoForm = ({ claimId, portfolio, handleClose, handleRefresh }: any) => {\n  const { enqueueSnackbar } = useSnackbar()\n  const { data, loading } = useAwaitingInfoFormQuery({ variables: {\n    portfolios: [portfolio]\n  }})\n  const [addAwaitingInfo] = useAddAwaitingInfoMutation()\n\n  if(loading || !data) return <CircularProgress />\n  // console.log({ claimId, portfolio })\n\n  const options = data.claimFilterOptions as SelectOption[]\n\n  return (\n    <Formik\n      initialValues={{\n        awaitingInfoReasonId: '',\n        note: ''\n      }}\n      onSubmit={async values => {\n        const res = await addAwaitingInfo({ variables: {\n          where: {\n            id: claimId,\n            portfolioType: portfolio\n          },\n          input: values\n        }})\n        res.data?.claimAwaitingInfo?.messages.forEach(message => enqueueSnackbar(message))\n\n        if (res.data?.claimAwaitingInfo?.success) {\n          handleClose()\n          handleRefresh()\n        }\n      }}\n    >\n      {({ isSubmitting }) => (\n        <Form>\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <SelectField\n                label='Reason' name='awaitingInfoReasonId'\n                required\n                options={options}\n                variant='outlined' fullWidth\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField label='Additional Notes' name='note' variant='outlined' fullWidth />\n            </Grid>\n            <Grid item xs={12}>\n              <Button variant='contained' color='primary' fullWidth type='submit' disabled={isSubmitting}>\n                Wait for info\n              </Button>\n            </Grid>\n          </Grid>\n        </Form>\n      )}\n    </Formik>\n  )\n}"],"sourceRoot":""}