{"version":3,"sources":["components/Table/index.tsx","pages/app/Claims/ClaimDetails/tabs/JobNotes/JobNoteList.tsx"],"names":["Table","columns","data","totalCount","onRowClick","onScroll","renderRowSubComponent","classes","useStyles","hiddenColumns","React","useMemo","filter","show","map","accessor","id","useTable","initialState","useExpanded","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","flatColumns","variant","className","paper","tableContainer","stickyHeader","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","tableHeaderCell","render","length","row","isExpanded","Fragment","key","onClick","tableRow","getRowProps","cells","cell","getCellProps","tableBodyCell","undefined","value","colSpan","TableWrapper","loading","loadingMore","props","loadingComponent","style","height","width","display","alignItems","justifyContent","container","position","top","bottom","left","right","zIndex","background","makeStyles","theme","padding","maxHeight","palette","primary","main","color","contrastText","spacing","textAlign","minWidth","grey","flexWrap","gql","JobNoteList","Header","Cell","original","portfolio","portfolioType","logDate","mappedData","claimNotes","edges","edge","node"],"mappings":"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","file":"static/js/57.6e059b92.chunk.js","sourcesContent":["import React from 'react'\nimport { Paper, Table as MuiTable, TableContainer, TableHead, TableRow, TableCell, TableBody, makeStyles, Typography, CircularProgress } from '@material-ui/core'\nimport { useTable, useExpanded } from 'react-table'\n\ninterface TableWrapperProps extends TableProps {\n  loading?: boolean\n  loadingMore?: boolean\n}\nconst TableWrapper: React.FC<TableWrapperProps> = ({ loading, loadingMore, data, ...props }) => {\n  const classes = useStyles({})\n  const loadingComponent = React.useMemo(() => (\n    <div style={{ height: '100%', width: '100%', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n      <CircularProgress />\n    </div>\n  ), [])\n\n\n  if (loading) return (\n    <div className={classes.container}>\n      {loadingComponent}\n    </div>\n  )\n\n  if (!data) return null\n\n  return (\n    <div className={classes.container}>\n      {!loadingMore ? null : (\n        <div style={{ position: 'absolute', top: 33, bottom: 0, left: 0, right: 0, zIndex: 10, background: 'rgba(255, 255, 255, 0.5)' }}>\n          {loadingComponent}\n        </div>\n      )}\n      <Table {...props} data={data} />\n    </div>\n  )\n}\n\ninterface TableProps {\n  data?: any\n  columns?: any\n  totalCount?: number | null\n\n  onRowClick?: any\n  onScroll?: any\n\n  renderRowSubComponent?: any\n}\nconst Table: React.FC<TableProps> = ({\n  columns, data, totalCount,\n  onRowClick, onScroll,\n  renderRowSubComponent,\n}) => {\n  const classes = useStyles({})\n\n  const hiddenColumns = React.useMemo(() => {\n    return columns?.filter(({ show }: any) => show === false)\n      .map(({ accessor, id }: any) => id ? id : accessor)\n  }, [columns])\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    columns: flatColumns,\n  } = useTable({\n    columns,\n    data,\n    initialState: { hiddenColumns },\n  }, useExpanded)\n\n  return (\n    <>\n      {totalCount && totalCount !== 0 ? (\n        <Typography variant='subtitle1'>\n          Found {totalCount}\n        </Typography>\n      ) : null}\n      <Paper className={classes.paper}>\n        <TableContainer className={classes.tableContainer} onScroll={onScroll}>\n          <MuiTable stickyHeader {...getTableProps()}>\n            <TableHead>\n              {headerGroups.map(headerGroup => (\n                <TableRow {...headerGroup.getHeaderGroupProps()}>\n                  {headerGroup.headers.map(column => {\n                    return (\n                      <TableCell {...column.getHeaderProps()} className={classes.tableHeaderCell}>\n                        {column.render('Header')}\n                      </TableCell>\n                    )\n                  })}\n                </TableRow>\n              ))}\n            </TableHead>\n            <TableBody {...getTableBodyProps()}>\n              {rows.length\n                ? (\n                  rows.map(row => {\n                    prepareRow(row)\n                    // @ts-ignore\n                    const { isExpanded } = row\n\n                    return (\n                      <React.Fragment key={row.id}>\n                        <TableRow onClick={onRowClick ? () => onRowClick(row) : () => { }} className={classes.tableRow} {...row.getRowProps()}>\n                          {row.cells.map(cell => {\n                            return (\n                              <TableCell {...cell.getCellProps()} className={classes.tableBodyCell}>\n                                {cell.value !== undefined ? cell.render('Cell') : '-'}\n                              </TableCell>\n                            )\n                          })}\n                        </TableRow>\n                        {isExpanded && (\n                          <TableRow>\n                            <TableCell colSpan={flatColumns.length}>\n                              {renderRowSubComponent({ row })}\n                            </TableCell>\n                          </TableRow>\n                        )}\n                      </React.Fragment>\n                    )\n                  })\n                )\n                : (\n                  <TableRow>\n                    <TableCell colSpan={flatColumns?.length ?? 4}>\n                      No item found\n                    </TableCell>\n                  </TableRow>\n                )\n              }\n            </TableBody>\n          </MuiTable>\n        </TableContainer>\n      </Paper>\n    </>\n  )\n}\n\nexport default TableWrapper\n\nconst useStyles = makeStyles(theme => ({\n  container: {\n    position: 'relative',\n    height: 'calc(100% - 28px)',\n    padding: 2\n  },\n  paper: {\n    height: '100%'\n  },\n  tableContainer: {\n    maxHeight: '100%'\n  },\n  tableHeaderCell: {\n    background: theme.palette.primary.main,\n    color: theme.palette.primary.contrastText,\n    padding: theme.spacing(0.5),\n    textAlign: 'center',\n    minWidth: 150\n  },\n  tableBodyCell: {\n    textAlign: 'center',\n    padding: theme.spacing(1),\n  },\n  tableRow: {\n    '&:nth-child(even)': {\n      background: theme.palette.grey[100],\n    },\n    '&:hover': {\n      background: theme.palette.grey[300],\n    },\n    flexWrap: 'nowrap'\n  }\n}))","import React from 'react'\nimport Table from 'components/Table'\n\nimport { gql } from '@apollo/client'\nimport { JobNotesQuery } from 'generated/graphql'\nimport PortfolioIcon from 'components/PortfolioIcon'\ngql`\n  fragment JobNoteListFragment on ClaimNote {\n    portfolioType\n    logDate\n    private\n    _privacy @client\n    message\n    user {\n      userName\n      company { companyName }\n    }\n  }\n`\n\ntype JobNoteListProps = {\n  data?: JobNotesQuery\n  loading: boolean\n}\nconst JobNoteList: React.FC<JobNoteListProps> = ({ data, loading }) => {\n  const columns = React.useMemo(() => [\n    { Header: 'Date', accessor: 'logDate', Cell: ({ cell: { row: { original }}}: any) => {\n      return (\n        <div style={{ display: 'flex' }}>\n          <PortfolioIcon portfolio={original.portfolioType} />\n          {original.logDate}\n        </div>\n      )\n    }},\n    { Header: 'Company', accessor: 'user.company.companyName' },\n    { Header: 'User', accessor: 'user.userName' },\n    { Header: 'Privacy', accessor: '_privacy' },\n    { Header: 'Note', accessor: 'message' },\n  ], [])\n\n  const mappedData = data?.claimNotes?.edges?.map(edge => edge?.node)\n\n  return (\n    <Table\n      loading={loading}\n      columns={columns}\n      data={mappedData}\n    />\n  )\n}\nexport default JobNoteList"],"sourceRoot":""}