{"version":3,"sources":["pages/app/Claims/ClaimDetails/tabs/Report/Form/GroupField.tsx","utils/getFormikInitValue.ts"],"names":["label","name","fields","disabled","classes","useStyles","useFormikContext","setFieldValue","values","isSubmitting","React","useState","groups","setGroups","color","variant","size","startIcon","className","button","onClick","groupId","Math","random","toString","split","groupFields","map","field","length","preGroups","id","newGroupValues","getGroupInitialValue","GROUP_ID","groupIndex","key","groupRoot","elevation","container","direction","spacing","fieldRoot","item","xs","groupHeader","newGroups","filter","group","newGroupValue","deleteGroup","index","readOnly","makeStyles","theme","marginBottom","margin","textAlign","marginTop","getInitialValue","cards","reduce","totalCard","currentCard","card","total","current","value","__typename","Date"],"mappings":"8RAgBe,sBAA6C,IAA1CA,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,OAAQC,EAAoB,EAApBA,SAC/BC,EAAUC,IADyC,EAGTC,cAAxCC,EAHiD,EAGjDA,cAAeC,EAHkC,EAGlCA,OAAQC,EAH0B,EAG1BA,aAH0B,EAI7BC,IAAMC,SAAc,IAJS,mBAIlDC,EAJkD,KAI1CC,EAJ0C,KAkCzD,OACE,oCACE,kBAAC,IAAD,CACEC,MAAM,UACNC,QAAQ,WACRC,KAAK,QACLC,UAAW,kBAAC,IAAD,MACXC,UAAWd,EAAQe,OACnBC,QApCW,WACf,IAAMC,EAAUC,KAAKC,SAASC,WAAWC,MAAM,KAAK,GAG9CC,EAAcxB,EAAOyB,KAAI,SAACC,GAAD,sBAC1BA,EAD0B,CAE7B3B,KAAK,GAAD,OAAKA,EAAL,YAAaW,EAAOiB,OAApB,aAA+BD,EAAM3B,WAE3CY,GAAU,SAACiB,GAAD,4BAAwBA,GAAxB,CAAmC,CAAEC,GAAIV,EAASnB,SAAQwB,oBAGpE,IAAMM,EAAiBC,YAAqB/B,GAE5CK,EAAcN,EAAD,sBAAWO,EAAOP,IAAlB,gBAA8B+B,EAA9B,CAA8CE,SAAUb,QAwBjElB,SAAUM,GAAgBN,GAEzBH,GAEFY,EAAOe,KAAI,WAAsBQ,GAAtB,IAAGJ,EAAH,EAAGA,GAAI7B,EAAP,EAAOA,OAAP,OACV,kBAAC,IAAD,CACEkC,IAAKL,EACLb,UAAWd,EAAQiC,UACnBC,UAAW,GAKX,kBAAC,IAAD,CACEC,WAAS,EACTC,UAAU,MACVC,QAAS,EACTvB,UAAWd,EAAQsC,WAEnB,kBAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,IACb,uBAAG1B,UAAWd,EAAQyC,aACpB,kBAAC,IAAD,MACA,kBAAC,IAAD,CACEzB,QAAS,kBA7CL,SAACW,GACnB,IAAMe,EAAYlC,EAAOmC,QAAO,SAACC,GAAD,OAAgBA,EAAMjB,KAAOA,KAC7DlB,EAAUiC,GAEV,IAAMG,EAAgBzC,EAAOP,GAAM8C,QAAO,SAACC,GAAD,OAAgBA,EAAMd,WAAaH,KAC7ExB,EAAcN,EAAMgD,GAwCSC,CAAYnB,IAC3B5B,SAAUM,GAAgBN,GAE1B,kBAAC,IAAD,SAILD,EAAOyB,KAAI,SAACC,EAAYuB,GAAb,OAER,kBAAC,UAAD,iBACMvB,EADN,CAGE3B,KAAI,UAAKA,EAAL,YAAakC,EAAb,aAA4BP,EAAM3B,MACtCmD,SAAUjD,eAW5B,IAAME,EAAYgD,KAAW,SAAAC,GAAK,MAAK,CACrCjB,UAAW,CACTkB,aAAc,GAEhBV,YAAa,CACXW,OAAQ,EACRC,UAAW,SAEbtC,OAAQ,CACNoC,aAAcD,EAAMb,WAEtBC,UAAW,CACTgB,UAAWJ,EAAMb,UACjBc,aAAcD,EAAMb,QAAQ,S,0HCvHnBkB,EAAkB,SAACC,GAC9B,OAAOA,EAAMC,QAAO,SAACC,EAAgBC,GACnC,IAAMC,EAAO/B,EAAqB8B,EAAY7D,QAE9C,OAAO,eACF4D,EADL,GAEKE,KAEJ,KAGQ/B,EAAuB,SAAC/B,GAAD,OAAiBA,EAAO2D,QAAO,SAACI,EAAYC,GAC9E,IAAKA,EAAQjE,KAAM,OAAOgE,EAC1B,IAAME,EACmB,gBAAvBD,EAAQE,aACe,kBAAvBF,EAAQE,WAAiC,IAAIC,KACtB,eAAvBH,EAAQE,WAA8B,GACtC,IAEF,OAAO,eACFH,EADL,eAEGC,EAAQjE,KAAOkE,MAEjB","file":"static/js/70.ba39a697.chunk.js","sourcesContent":["import React from 'react'\nimport { useFormikContext } from 'formik'\nimport makeStyles from '@material-ui/core/styles/makeStyles'\n\nimport Button from '@material-ui/core/Button'\nimport IconButton from '@material-ui/core/IconButton'\nimport Paper from '@material-ui/core/Paper'\nimport Grid from '@material-ui/core/Grid'\nimport Divider from '@material-ui/core/Divider'\nimport AddIcon from '@material-ui/icons/Add'\nimport ClearIcon from '@material-ui/icons/Clear'\n\nimport ReportField from './FormField'\nimport { getGroupInitialValue } from 'utils/getFormikInitValue'\n// import useScrollOnUpdate from './useScrollOnUpdate'\n\nexport default ({ label, name, fields, disabled }: any) => {\n  const classes = useStyles()\n\n  const { setFieldValue, values, isSubmitting } = useFormikContext()\n  const [groups, setGroups] = React.useState<any>([])\n\n  const addGroup = () => {\n    const groupId = Math.random().toString().split(\".\")[1]\n\n    // add group to map\n    const groupFields = fields.map((field: any) => ({\n      ...field,\n      name: `${name}[${groups.length}].${field.name}`\n    }))\n    setGroups((preGroups: any) => [...preGroups, { id: groupId, fields, groupFields }])\n\n    // append formik initial value for group\n    const newGroupValues = getGroupInitialValue(fields)\n    // @ts-ignore\n    setFieldValue(name, [...values[name], { ...newGroupValues, GROUP_ID: groupId }])\n  }\n  const deleteGroup = (id: any) => {\n    const newGroups = groups.filter((group: any) => group.id !== id)\n    setGroups(newGroups)\n    // @ts-ignore\n    const newGroupValue = values[name].filter((group: any) => group.GROUP_ID !== id)\n    setFieldValue(name, newGroupValue)\n  }\n\n  // const endRef = useScrollOnUpdate({\n  //   onUpdate: groups.length,\n  //   skip: groups.length === 0\n  // })\n\n  return (\n    <>\n      <Button\n        color='primary'\n        variant='outlined'\n        size='large'\n        startIcon={<AddIcon />}\n        className={classes.button}\n        onClick={addGroup}\n        disabled={isSubmitting || disabled}\n      >\n        {label}\n      </Button>\n      {groups.map(({ id, fields }: any, groupIndex: any) => (\n        <Paper\n          key={id}\n          className={classes.groupRoot}\n          elevation={0}\n        // focus style\n        // elevation={focusGroup === index ? 5 : 0}\n        // style={focusGroup === index ? { padding: 8 } : {}}\n        >\n          <Grid\n            container\n            direction='row'\n            spacing={2}\n            className={classes.fieldRoot}\n          >\n            <Grid item xs={12}>\n              <p className={classes.groupHeader}>\n                <Divider />\n                <IconButton\n                  onClick={() => deleteGroup(id)}\n                  disabled={isSubmitting || disabled}\n                >\n                  <ClearIcon />\n                </IconButton>\n              </p>\n            </Grid>\n            {fields.map((field: any, index: any) => (\n              // <Grid key={index} item xs={field.grid} container>\n                <ReportField\n                  {...field}\n                  // fullWidth variant='outlined'\n                  name={`${name}[${groupIndex}].${field.name}`}\n                  readOnly={disabled}\n                />\n              // </Grid>\n            ))}\n          </Grid>\n        </Paper>\n      ))}\n      {/* <div ref={endRef} /> */}\n    </>\n  )\n}\nconst useStyles = makeStyles(theme => ({\n  groupRoot: {\n    marginBottom: 8\n  },\n  groupHeader: {\n    margin: 0,\n    textAlign: 'right'\n  },\n  button: {\n    marginBottom: theme.spacing()\n  },\n  fieldRoot: {\n    marginTop: theme.spacing(),\n    marginBottom: theme.spacing(2),\n  }\n}))","export const getInitialValue = (cards: any) => {\n  return cards.reduce((totalCard: any, currentCard: any) => {\n    const card = getGroupInitialValue(currentCard.fields)\n\n    return {\n      ...totalCard,\n      ...card\n    }\n  }, {})\n}\n\nexport const getGroupInitialValue = (fields: any) => fields.reduce((total: any, current: any) => {\n  if (!current.name) return total\n  const value =\n    current.__typename === 'SwitchField' ? false :\n    current.__typename === 'DateTimeField' ? new Date() :\n    current.__typename === 'GroupField' ? [] :\n    ''\n\n  return {\n    ...total,\n    [current.name]: value\n  }\n}, {})"],"sourceRoot":""}