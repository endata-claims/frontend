{"version":3,"sources":["generated/graphql.tsx"],"names":["AccessRole","ActionType","ClaimCategory","ClaimCommunicationBox","DataDisplay","DataSense","DataUnit","DateRangeOption","FilterType","JobRecommendationStatus","JobVariationStatus","LogLevel","PortfolioType","QuoteCostType","QuoteRequestStatus","QuoteRequestType","ReportStatus","RequestCategory","Server","State","SupplierStatusFilter","SupplierTypeFilter","UserType","WidgetViewName","ClaimDetailsCardFragmentFragmentDoc","gql","ClaimDetailsCardMetaFragmentFragmentDoc","CustomerDetailsCardFragmentFragmentDoc","CustomerDetailsCardMetaFragmentFragmentDoc","QuotingBuildersCardFragmentFragmentDoc","QuotingBuildersCardMetaFragmentFragmentDoc","QuotingRestorersCardFragmentFragmentDoc","InfoCardDataFragmentFragmentDoc","AddClaimTypeDialogClaimFragmentFragmentDoc","AddDocumentClaimFragmentFragmentDoc","AddDocumentMetaFragmentFragmentDoc","JobInfo_ClaimDetailsCardFragmentFragmentDoc","JobInfo_ClaimDetailsCardMetaFragmentFragmentDoc","JobInfo_CustomerInfoCardMetaFragmentFragmentDoc","JobInfo_QuotingBuilderCardFragmentFragmentDoc","JobInfo_QuotingRestorerCardFragmentFragmentDoc","JobInfoTabFragmentFragmentDoc","JobNoteListFragmentFragmentDoc","JobNotesFragmentFragmentDoc","FormCardFragmentFragmentDoc","ReportTabFragmentFragmentDoc","ClaimListBodyFragmentDoc","ClaimCommunicationBodyFragmentDoc","CommunicationHeaderFragmentFragmentDoc","DashboardHeaderFragmentFragmentDoc","CommunicationmenuDocument","useCommunicationmenuQuery","baseOptions","ApolloReactHooks","AddClaimDocument","useAddClaimMutation","AddClaimRootDocument","useAddClaimRootQuery","ChooseCompanyDocument","useChooseCompanyQuery","ClaimMetaContextDocument","useClaimMetaContextQuery","AddClaimTypeDialogDocument","useAddClaimTypeDialogQuery","AddClaimTypeDocument","useAddClaimTypeMutation","AddCommunicationActionDocument","useAddCommunicationActionQuery","AddCommunicationDocument","useAddCommunicationMutation","UploadDocumentDocument","useUploadDocumentMutation","AddJobNoteDocument","useAddJobNoteMutation","NextStepDialogDocument","useNextStepDialogQuery","ClaimDetailsDocument","useClaimDetailsQuery","JobInfoDocument","useJobInfoQuery","JobInfoTabUpdateDocument","useJobInfoTabUpdateMutation","JobNotesDocument","useJobNotesQuery","AppointmentMadeDocument","useAppointmentMadeMutation","CancelAwaitingInfoDocument","useCancelAwaitingInfoMutation","AddAwaitingInfoDocument","useAddAwaitingInfoMutation","AwaitingInfoFormDocument","useAwaitingInfoFormQuery","ChangeAppointmentDocument","useChangeAppointmentMutation","InitCallDocument","useInitCallMutation","SaveReportDocument","useSaveReportMutation","SubmitReportDocument","useSubmitReportMutation","ResetReportDocument","useResetReportMutation","ClaimListFilterDocument","useClaimListFilterQuery","ClaimListWaterfallFilterDocument","useClaimListWaterfallFilterQuery","ClaimListDataDocument","useClaimListDataQuery","CommunicationActionAcknowledgeDocument","useCommunicationActionAcknowledgeMutation","CommunicationActionReplyDocument","useCommunicationActionReplyMutation","CommunicationListFiltersDocument","useCommunicationListFiltersQuery","CommunicationsDataDocument","useCommunicationsDataQuery","KpiAlertDetailsDocument","useKpiAlertDetailsQuery","DashboardFiltersDocument","useDashboardFiltersQuery","DashboardKpiDocument","useDashboardKpiQuery","AppRootDocument","useAppRootQuery","LoginDocument","useLoginQuery","SigninDocument","useSigninMutation"],"mappings":"mgDA4BYA,EAwBAC,EAgLAC,EA6BAC,EAq0BAC,EAQAC,EAMAC,EAMAC,EA6TAC,EA8bAC,EAqIAC,EAoGAC,EA+kBAC,EAkXAC,EAuCAC,EAiBAC,EAmBAC,EAKAC,EAgCAC,EAiJAC,EA+DAC,EAMAC,EAoEAC,EAyCAC,E,y33BAt5GAvB,K,sBAAAA,E,8BAAAA,E,sBAAAA,E,sBAAAA,E,oBAAAA,E,kBAAAA,E,kCAAAA,E,4BAAAA,E,wBAAAA,E,oBAAAA,E,wBAAAA,E,2BAAAA,M,cAwBAC,K,sBAAAA,E,iBAAAA,E,mBAAAA,E,uBAAAA,E,+BAAAA,E,wCAAAA,E,4CAAAA,E,+BAAAA,E,4CAAAA,E,+BAAAA,E,8CAAAA,E,gDAAAA,E,oDAAAA,E,4CAAAA,E,2CAAAA,E,qBAAAA,E,wCAAAA,E,wCAAAA,E,+BAAAA,E,oCAAAA,E,sDAAAA,E,0DAAAA,E,kDAAAA,E,2DAAAA,M,cAgLAC,K,sBAAAA,E,gBAAAA,E,yBAAAA,M,cA6BAC,K,sBAAAA,E,gBAAAA,E,cAAAA,E,uCAAAA,M,cAq0BAC,K,YAAAA,E,wBAAAA,E,sBAAAA,E,oBAAAA,E,qCAAAA,M,cAQAC,K,kBAAAA,E,4BAAAA,E,yBAAAA,M,cAMAC,K,gBAAAA,E,qBAAAA,M,cAMAC,K,sBAAAA,E,cAAAA,E,gBAAAA,E,kBAAAA,E,gBAAAA,E,cAAAA,E,cAAAA,E,YAAAA,E,gBAAAA,E,kBAAAA,E,+BAAAA,M,cA6TAC,K,YAAAA,E,YAAAA,E,YAAAA,E,oBAAAA,E,gBAAAA,E,iCAAAA,E,oBAAAA,E,qCAAAA,E,iBAAAA,M,cA8bAC,K,iCAAAA,M,cAqIAC,K,kBAAAA,E,oBAAAA,E,oBAAAA,E,eAAAA,M,cAoGAC,K,cAAAA,E,cAAAA,E,0BAAAA,E,kBAAAA,E,cAAAA,E,oBAAAA,E,aAAAA,M,cA+kBAC,K,oBAAAA,E,oBAAAA,E,2BAAAA,M,cAkXAC,K,sBAAAA,E,gBAAAA,E,qBAAAA,M,cAuCAC,K,sBAAAA,E,8BAAAA,E,kCAAAA,E,kCAAAA,E,4BAAAA,E,4CAAAA,E,gCAAAA,E,8BAAAA,E,kBAAAA,E,kCAAAA,E,4BAAAA,E,8BAAAA,E,gCAAAA,E,+BAAAA,M,cAiBAC,K,sBAAAA,E,kBAAAA,E,iCAAAA,M,cAmBAC,K,sBAAAA,E,qBAAAA,M,cAKAC,K,UAAAA,E,kBAAAA,E,gCAAAA,E,wBAAAA,E,aAAAA,M,cAgCAC,K,UAAAA,E,gBAAAA,E,UAAAA,E,UAAAA,E,UAAAA,E,YAAAA,E,UAAAA,E,UAAAA,E,UAAAA,E,sBAAAA,E,sBAAAA,E,mBAAAA,M,cAiJAC,K,UAAAA,E,UAAAA,E,UAAAA,E,QAAAA,E,UAAAA,E,QAAAA,E,UAAAA,E,SAAAA,M,cA+DAC,K,8CAAAA,E,8BAAAA,E,6BAAAA,M,cAMAC,K,wCAAAA,E,oBAAAA,E,iDAAAA,M,cAoEAC,K,8BAAAA,E,kBAAAA,E,oBAAAA,E,mCAAAA,M,cAyCAC,K,sBAAAA,E,wBAAAA,E,wBAAAA,E,kBAAAA,E,kBAAAA,E,oBAAAA,E,sBAAAA,E,oBAAAA,E,qBAAAA,M,KAkwCL,IAAMC,GAAsCC,IAAH,MA2CnCC,GAA0CD,IAAH,MAYvCE,GAAyCF,IAAH,MAQtCG,GAA6CH,IAAH,MAU1CI,GAAyCJ,IAAH,MAQtCK,GAA6CL,IAAH,MAK1CM,GAA0CN,IAAH,MAQvCO,GAAkCP,IAAH,MAiI/BQ,GAA6CR,IAAH,MAiB1CS,GAAsCT,IAAH,MAYnCU,GAAqCV,IAAH,MAKlCW,GAA8CX,IAAH,MAgC3CY,GAAkDZ,IAAH,MA2B/Ca,GAAkDb,IAAH,MAc/Cc,GAAgDd,IAAH,MAQ7Ce,GAAiDf,IAAH,MAQ9CgB,GAAgChB,IAAH,MAqM7BiB,GAAiCjB,IAAH,MAe9BkB,GAA8BlB,IAAH,MAsC3BmB,GAA8BnB,IAAH,MA8E3BoB,GAA+BpB,IAAH,KAenCmB,IACOE,GAA2BrB,IAAH,MAiOxBsB,GAAoCtB,IAAH,MAejCuB,GAAyCvB,IAAH,MAatCwB,GAAqCxB,IAAH,MAalCyB,GAA4BzB,IAAH,MA8B/B,SAAS0B,GAA0BC,GAClC,OAAOC,IAAmFH,GAA2BE,GAQtH,IAAME,GAAmB7B,IAAH,MAoCtB,SAAS8B,GAAoBH,GAC5B,OAAOC,IAA0EC,GAAkBF,GAKpG,IAAMI,GAAuB/B,IAAH,KAY3BE,GACJH,GACAK,GACAE,GACAH,GACAF,GACAI,IA2BK,SAAS2B,GAAqBL,GAC7B,OAAOC,IAAyEG,GAAsBJ,GAQvG,IAAMM,GAAwBjC,IAAH,MAwB3B,SAASkC,GAAsBP,GAC9B,OAAOC,IAA2EK,GAAuBN,GAQ1G,IAAMQ,GAA2BnC,IAAH,KAmB/BU,GACJF,GACAC,GACAG,GACAC,IAkBK,SAASuB,GAAyBT,GACjC,OAAOC,IAAiFO,GAA0BR,GAQnH,IAAMU,GAA6BrC,IAAH,MA8BhC,SAASsC,GAA2BX,GACnC,OAAOC,IAAqFS,GAA4BV,GAQzH,IAAMY,GAAuBvC,IAAH,MA4B1B,SAASwC,GAAwBb,GAChC,OAAOC,IAAkFW,GAAsBZ,GAKhH,IAAMc,GAAiCzC,IAAH,MA2BpC,SAAS0C,GAA+Bf,GACvC,OAAOC,IAA6Fa,GAAgCd,GAQrI,IAAMgB,GAA2B3C,IAAH,MA2B9B,SAAS4C,GAA4BjB,GACpC,OAAOC,IAA0Fe,GAA0BhB,GAK5H,IAAMkB,GAAyB7C,IAAH,MA2B5B,SAAS8C,GAA0BnB,GAClC,OAAOC,IAAsFiB,GAAwBlB,GAKtH,IAAMoB,GAAqB/C,IAAH,MA2BxB,SAASgD,GAAsBrB,GAC9B,OAAOC,IAA8EmB,GAAoBpB,GAK1G,IAAMsB,GAAyBjD,IAAH,MA2B5B,SAASkD,GAAuBvB,GAC/B,OAAOC,IAA6EqB,GAAwBtB,GAQ7G,IAAMwB,GAAuBnD,IAAH,KAS3BO,GACJS,GACAI,GACAF,IAkBK,SAASkC,GAAqBzB,GAC7B,OAAOC,IAAyEuB,GAAsBxB,GAQvG,IAAM0B,GAAkBrD,IAAH,KActBW,GACJG,GACAC,IA0BK,SAASuC,GAAgB3B,GACxB,OAAOC,IAA+DyB,GAAiB1B,GAQxF,IAAM4B,GAA2BvD,IAAH,MAiC9B,SAASwD,GAA4B7B,GACpC,OAAOC,IAA0F2B,GAA0B5B,GAK5H,IAAM8B,GAAmBzD,IAAH,KAWvBiB,IAoBC,SAASyC,GAAiB/B,GACzB,OAAOC,IAAiE6B,GAAkB9B,GAQ3F,IAAMgC,GAA0B3D,IAAH,KA4B7B,SAAS4D,GAA2BjC,GACnC,OAAOC,IAAwF+B,GAAyBhC,GAKzH,IAAMkC,GAA6B7D,IAAH,KA2BhC,SAAS8D,GAA8BnC,GACtC,OAAOC,IAA8FiC,GAA4BlC,GAKlI,IAAMoC,GAA0B/D,IAAH,KA4B7B,SAASgE,GAA2BrC,GACnC,OAAOC,IAAwFmC,GAAyBpC,GAKzH,IAAMsC,GAA2BjE,IAAH,KAyB9B,SAASkE,GAAyBvC,GACjC,OAAOC,IAAiFqC,GAA0BtC,GAQnH,IAAMwC,GAA4BnE,IAAH,KA4B/B,SAASoE,GAA6BzC,GACrC,OAAOC,IAA4FuC,GAA2BxC,GAK/H,IAAM0C,GAAmBrE,IAAH,KA2BtB,SAASsE,GAAoB3C,GAC5B,OAAOC,IAA0EyC,GAAkB1C,GAKpG,IAAM4C,GAAqBvE,IAAH,KA2BxB,SAASwE,GAAsB7C,GAC9B,OAAOC,IAA8E2C,GAAoB5C,GAK1G,IAAM8C,GAAuBzE,IAAH,KA0B1B,SAAS0E,GAAwB/C,GAChC,OAAOC,IAAkF6C,GAAsB9C,GAKhH,IAAMgD,GAAsB3E,IAAH,KA0BzB,SAAS4E,GAAuBjD,GAC/B,OAAOC,IAAgF+C,GAAqBhD,GAK7G,IAAMkD,GAA0B7E,IAAH,KAiC7B,SAAS8E,GAAwBnD,GAChC,OAAOC,IAA+EiD,GAAyBlD,GAQhH,IAAMoD,GAAmC/E,IAAH,KAgCtC,SAASgF,GAAiCrD,GACzC,OAAOC,IAAiGmD,GAAkCpD,GAQ3I,IAAMsD,GAAwBjF,IAAH,IAkB5BqB,IAoBC,SAAS6D,GAAsBvD,GAC9B,OAAOC,IAA2EqD,GAAuBtD,GAQ1G,IAAMwD,GAAyCnF,IAAH,KA2B5C,SAASoF,GAA0CzD,GAClD,OAAOC,IAAsHuD,GAAwCxD,GAKtK,IAAM0D,GAAmCrF,IAAH,KA2BtC,SAASsF,GAAoC3D,GAC5C,OAAOC,IAA0GyD,GAAkC1D,GAKpJ,IAAM4D,GAAmCvF,IAAH,IAQvCuB,IAiBC,SAASiE,GAAiC7D,GACzC,OAAOC,IAAiG2D,GAAkC5D,GAQ3I,IAAM8D,GAA6BzF,IAAH,IAejCsB,IAoBC,SAASoE,GAA2B/D,GACnC,OAAOC,IAAqF6D,GAA4B9D,GAQzH,IAAMgE,GAA0B3F,IAAH,KA0C7B,SAAS4F,GAAwBjE,GAChC,OAAOC,IAA+E+D,GAAyBhE,GAQhH,IAAMkE,GAA2B7F,IAAH,IAkB/BwB,IAiBC,SAASsE,GAAyBnE,GACjC,OAAOC,IAAiFiE,GAA0BlE,GAQnH,IAAMoE,GAAuB/F,IAAH,KAqC1B,SAASgG,GAAqBrE,GAC7B,OAAOC,IAAyEmE,GAAsBpE,GAQvG,IAAMsE,GAAkBjG,IAAH,KA8BrB,SAASkG,GAAgBvE,GACxB,OAAOC,IAA+DqE,GAAiBtE,GAQxF,IAAMwE,GAAgBnG,IAAH,KAwBnB,SAASoG,GAAczE,GACtB,OAAOC,IAA2DuE,GAAexE,GAQlF,IAAM0E,GAAiBrG,IAAH,KA8BpB,SAASsG,GAAkB3E,GAC1B,OAAOC,IAAsEyE,GAAgB1E","file":"static/js/40.cdae0db7.chunk.js","sourcesContent":["import gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/client';\nexport type Maybe<T> = T | null;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string,\n  String: string,\n  Boolean: boolean,\n  Int: number,\n  Float: number,\n  Grid: any,\n  Json: any,\n  Date: any,\n  DateString: any,\n  DateTimeString: any,\n  Byte: any,\n  Decimal: any,\n  Short: any,\n  PersonName: any,\n  Phone: any,\n  Email: any,\n  DateTime: any,\n  DateTimeOffset: any,\n  Milliseconds: any,\n  Seconds: any,\n};\n\nexport enum AccessRole {\n  Undefined = 'UNDEFINED',\n  Administrator = 'Administrator',\n  Insurance = 'Insurance',\n  Estimator = 'Estimator',\n  Adjustor = 'Adjustor',\n  Builder = 'Builder',\n  ContentSupplier = 'ContentSupplier',\n  LossAdjuster = 'LossAdjuster',\n  InternalAb = 'InternalAB',\n  Restorer = 'Restorer',\n  Specialist = 'Specialist',\n  SystemAdmin = 'SystemAdmin'\n}\n\nexport type Action = {\n   __typename?: 'Action',\n  actionType?: Maybe<ActionType>,\n  id: Scalars['ID'],\n  isDisabled: Scalars['Boolean'],\n  isDisplay: Scalars['Boolean'],\n  name: Scalars['String'],\n};\n\nexport enum ActionType {\n  Undefined = 'UNDEFINED',\n  FeeAdd = 'FEE_ADD',\n  FeeEdit = 'FEE_EDIT',\n  FeeDelete = 'FEE_DELETE',\n  InvoiceUpload = 'INVOICE_UPLOAD',\n  InvoiceBulkUpload = 'INVOICE_BULK_UPLOAD',\n  InvoiceUpdateStatus = 'INVOICE_UPDATE_STATUS',\n  InvoiceDelete = 'INVOICE_DELETE',\n  InvoiceViewDocument = 'INVOICE_VIEW_DOCUMENT',\n  ReserveUpdate = 'RESERVE_UPDATE',\n  SpecialistRequestAdd = 'SPECIALIST_REQUEST_ADD',\n  SpecialistRequestEdit = 'SPECIALIST_REQUEST_EDIT',\n  SpecialistRequestDelete = 'SPECIALIST_REQUEST_DELETE',\n  AdjusterInitialCall = 'ADJUSTER_INITIAL_CALL',\n  AdjusterAppointment = 'ADJUSTER_APPOINTMENT',\n  ClaimAdd = 'CLAIM_ADD',\n  ClaimAwaitingInfo = 'CLAIM_AWAITING_INFO',\n  ClaimStatusVolume = 'CLAIM_STATUS_VOLUME',\n  ClaimFinalise = 'CLAIM_FINALISE',\n  ClaimCashSettle = 'CLAIM_CASH_SETTLE',\n  ClaimjobAllocateSupplier = 'CLAIMJOB_ALLOCATE_SUPPLIER',\n  ClaimjobReallocateSupplier = 'CLAIMJOB_REALLOCATE_SUPPLIER',\n  FilterInternalAssessor = 'FILTER_INTERNAL_ASSESSOR',\n  FilterRecommendationStatus = 'FILTER_RECOMMENDATION_STATUS'\n}\n\nexport type AddPortfolioInput = {\n  scopingSupplierId?: Maybe<Scalars['ID']>,\n  portfolioType: PortfolioType,\n};\n\nexport type Address = {\n   __typename?: 'Address',\n  line1?: Maybe<Scalars['String']>,\n  line2?: Maybe<Scalars['String']>,\n  postcode?: Maybe<Scalars['String']>,\n  state?: Maybe<State>,\n  suburb?: Maybe<Scalars['String']>,\n};\n\nexport type AddressInput = {\n  line1?: Maybe<Scalars['String']>,\n  line2?: Maybe<Scalars['String']>,\n  suburb?: Maybe<Scalars['String']>,\n  postcode?: Maybe<Scalars['String']>,\n  state?: Maybe<State>,\n};\n\nexport type AggregateFeeCategory = {\n   __typename?: 'AggregateFeeCategory',\n  buildingReserve?: Maybe<Scalars['Decimal']>,\n  contentsReserve?: Maybe<Scalars['Decimal']>,\n  outstandingPayments?: Maybe<Scalars['Decimal']>,\n  toBeInvoiced?: Maybe<Scalars['Decimal']>,\n  totalAmountInvoiced?: Maybe<Scalars['Decimal']>,\n  totalClaimReserve?: Maybe<Scalars['Decimal']>,\n};\n\nexport type AggregateFeeItem = {\n   __typename?: 'AggregateFeeItem',\n  totalAuthorisedAmount?: Maybe<Scalars['Decimal']>,\n};\n\nexport type AppCustomization = {\n   __typename?: 'AppCustomization',\n  alias?: Maybe<Scalars['String']>,\n  favicon?: Maybe<Scalars['String']>,\n  logo?: Maybe<Scalars['String']>,\n  companyLogo?: Maybe<Scalars['String']>,\n};\n\nexport type AppointmentInput = {\n  appointmentDate: Scalars['DateString'],\n  note?: Maybe<Scalars['String']>,\n};\n\nexport type AuthenticatedUser = {\n   __typename?: 'AuthenticatedUser',\n  _appRoutes?: Maybe<Array<Scalars['String']>>,\n  _customisation?: Maybe<AppCustomization>,\n  _rootRoute: Scalars['String'],\n  claimFilters?: Maybe<Array<Maybe<FilterInput>>>,\n  communicationFilters?: Maybe<Array<Maybe<FilterInput>>>,\n  dashboardFilters?: Maybe<Array<Maybe<FilterInput>>>,\n  id: Scalars['ID'],\n  name: Scalars['String'],\n  userRole: AccessRole,\n  userType: UserType,\n  waterfallFilters?: Maybe<Array<ClaimStatusVolumeGroup>>,\n};\n\n\nexport type AuthenticatedUserWaterfallFiltersArgs = {\n  where: ClaimStatusVolumeWhere\n};\n\nexport type AwaitingInfoClaimInputType = {\n  note?: Maybe<Scalars['String']>,\n  awaitingInfoReasonId: Scalars['Byte'],\n};\n\n\nexport type Card = {\n   __typename?: 'Card',\n  id: Scalars['ID'],\n  title?: Maybe<Scalars['String']>,\n  order?: Maybe<Scalars['Int']>,\n  grid?: Maybe<Scalars['Grid']>,\n  fields?: Maybe<Array<Field>>,\n};\n\nexport type CaseReportFilter = {\n  createDateFrom?: Maybe<Scalars['Date']>,\n  createDateTo?: Maybe<Scalars['Date']>,\n  insurers?: Maybe<Array<Scalars['ID']>>,\n  managers?: Maybe<Array<Scalars['ID']>>,\n  managerTeams?: Maybe<Array<Maybe<Scalars['String']>>>,\n  catCodes?: Maybe<Array<Scalars['ID']>>,\n  eventTypes?: Maybe<Array<Scalars['ID']>>,\n  internalAssessors?: Maybe<Array<Scalars['ID']>>,\n  buildingSuppliers?: Maybe<Array<Scalars['ID']>>,\n  contentsSuppliers?: Maybe<Array<Scalars['ID']>>,\n  restorationSuppliers?: Maybe<Array<Scalars['ID']>>,\n  buildingStatus?: Maybe<Array<Scalars['ID']>>,\n  contentsStatus?: Maybe<Array<Scalars['ID']>>,\n  restorationStatus?: Maybe<Array<Scalars['ID']>>,\n  suppliers?: Maybe<Array<Scalars['ID']>>,\n  status?: Maybe<Array<Scalars['ID']>>,\n  regions?: Maybe<Array<Maybe<Scalars['String']>>>,\n  dateRange?: Maybe<DateRangeOption>,\n  portfolios?: Maybe<Array<Maybe<PortfolioType>>>,\n  states?: Maybe<Array<Maybe<State>>>,\n  recommendationStatus?: Maybe<Array<JobRecommendationStatus>>,\n};\n\nexport type CaseReportIndex = {\n  internalFilterName: Scalars['String'],\n  filter?: Maybe<CaseReportFilter>,\n};\n\nexport type CatCode = {\n   __typename?: 'CATCode',\n  cATCodeId: Scalars['Int'],\n  cATCodeName: Scalars['String'],\n  cATNumber: Scalars['String'],\n};\n\nexport type ClaimAdditionalData = {\n   __typename?: 'ClaimAdditionalData',\n  additionalDataId: Scalars['Int'],\n  content: Scalars['String'],\n  id: Scalars['ID'],\n  title: Scalars['String'],\n};\n\nexport type ClaimAdditionalDataCategory = {\n   __typename?: 'ClaimAdditionalDataCategory',\n  categoryName: Scalars['String'],\n  id: Scalars['ID'],\n  items?: Maybe<Array<Maybe<ClaimAdditionalData>>>,\n};\n\nexport type ClaimCashSettleInput = {\n  claimId: Scalars['ID'],\n  settlementValue: Scalars['Decimal'],\n  paymentTypeId: Scalars['Int'],\n  paymentMethodId: Scalars['Int'],\n  bankName?: Maybe<Scalars['String']>,\n  bsb?: Maybe<Scalars['String']>,\n  account?: Maybe<Scalars['String']>,\n  comments?: Maybe<Scalars['String']>,\n  claimPortfolioType: PortfolioType,\n  settlementDate: Scalars['DateTimeString'],\n};\n\nexport enum ClaimCategory {\n  NonUrgent = 'NonUrgent',\n  Urgent = 'Urgent',\n  SemiUrgent = 'SemiUrgent'\n}\n\nexport type ClaimCommunication = {\n   __typename?: 'ClaimCommunication',\n  acknowledged: Scalars['Boolean'],\n  acknowledgeDate?: Maybe<Scalars['DateString']>,\n  acknowledgeUserId?: Maybe<Scalars['Int']>,\n  acknowledgeUserName?: Maybe<Scalars['String']>,\n  claimId: Scalars['Int'],\n  claimRef: Scalars['String'],\n  communicationId: Scalars['Int'],\n  id: Scalars['ID'],\n  message?: Maybe<Scalars['String']>,\n  portfolioType?: Maybe<PortfolioType>,\n  private: Scalars['Boolean'],\n  recieverCompanyId?: Maybe<Scalars['Int']>,\n  recieverCompanyName?: Maybe<Scalars['String']>,\n  sendDate: Scalars['DateTimeString'],\n  senderCompanyId?: Maybe<Scalars['Int']>,\n  senderCompanyName?: Maybe<Scalars['String']>,\n  senderId?: Maybe<Scalars['Int']>,\n  senderName?: Maybe<Scalars['String']>,\n  senderRole?: Maybe<AccessRole>,\n};\n\nexport enum ClaimCommunicationBox {\n  UnDefined = 'UnDefined',\n  OutBox = 'OutBox',\n  Inbox = 'Inbox',\n  InboxAndSharedBox = 'InboxAndSharedBox'\n}\n\nexport type ClaimCommunicationConnection = {\n   __typename?: 'ClaimCommunicationConnection',\n  edges?: Maybe<Array<Maybe<ClaimCommunicationEdge>>>,\n  items?: Maybe<Array<Maybe<ClaimCommunication>>>,\n  pageInfo: PageInfo,\n  totalCount?: Maybe<Scalars['Int']>,\n};\n\nexport type ClaimCommunicationCreate = {\n  claimId: Scalars['ID'],\n  message: Scalars['String'],\n  receiverCompanyId: Scalars['Int'],\n  private: Scalars['Boolean'],\n  receiverRole: AccessRole,\n};\n\nexport type ClaimCommunicationEdge = {\n   __typename?: 'ClaimCommunicationEdge',\n  cursor: Scalars['String'],\n  node?: Maybe<ClaimCommunication>,\n};\n\nexport type ClaimCommunicationPayload = {\n   __typename?: 'ClaimCommunicationPayload',\n  fieldErrors?: Maybe<Array<Maybe<EntityFieldError>>>,\n  messages: Array<Scalars['String']>,\n  result?: Maybe<ClaimCommunication>,\n  success: Scalars['Boolean'],\n};\n\nexport type ClaimDocument = {\n   __typename?: 'ClaimDocument',\n  amountInvoice?: Maybe<Scalars['Float']>,\n  company?: Maybe<Company>,\n  description: Scalars['String'],\n  documentFileName: Scalars['String'],\n  documentId: Scalars['Int'],\n  id: Scalars['ID'],\n  invoiceNumber?: Maybe<Scalars['String']>,\n  isInvoice: Scalars['Boolean'],\n  portfolioType?: Maybe<PortfolioType>,\n  private: Scalars['Boolean'],\n  uploadDate?: Maybe<Scalars['DateTimeString']>,\n  url: Scalars['String'],\n};\n\nexport type ClaimDocumentConnection = {\n   __typename?: 'ClaimDocumentConnection',\n  edges?: Maybe<Array<Maybe<ClaimDocumentEdge>>>,\n  items?: Maybe<Array<Maybe<ClaimDocument>>>,\n  pageInfo: PageInfo,\n  totalCount?: Maybe<Scalars['Int']>,\n};\n\nexport type ClaimDocumentCreate = {\n  claimId: Scalars['ID'],\n  description: Scalars['String'],\n  documentFileName: Scalars['String'],\n  fileBase64: Scalars['String'],\n  fileId?: Maybe<Scalars['String']>,\n  isInvoice: Scalars['Boolean'],\n  invoiceNumber?: Maybe<Scalars['String']>,\n  amountInvoice?: Maybe<Scalars['Float']>,\n  private: Scalars['Boolean'],\n  visibleByInsurer?: Maybe<Scalars['Boolean']>,\n  portfolioType?: Maybe<PortfolioType>,\n};\n\nexport type ClaimDocumentEdge = {\n   __typename?: 'ClaimDocumentEdge',\n  cursor: Scalars['String'],\n  node?: Maybe<ClaimDocument>,\n};\n\nexport type ClaimDocumentPayload = {\n   __typename?: 'ClaimDocumentPayload',\n  fieldErrors?: Maybe<Array<Maybe<EntityFieldError>>>,\n  messages: Array<Scalars['String']>,\n  result?: Maybe<ClaimDocument>,\n  success: Scalars['Boolean'],\n};\n\nexport type ClaimFinaliseReason = {\n   __typename?: 'ClaimFinaliseReason',\n  finaliseResonId: Scalars['Int'],\n  id: Scalars['ID'],\n  name: Scalars['String'],\n};\n\nexport type ClaimItemFilter = {\n  id?: Maybe<Scalars['Int']>,\n  claimId: Scalars['ID'],\n  createDateFrom?: Maybe<Scalars['Date']>,\n  createDateTo?: Maybe<Scalars['Date']>,\n  keyWords?: Maybe<Scalars['String']>,\n  portfolios?: Maybe<Array<Maybe<PortfolioType>>>,\n};\n\nexport type ClaimJob = {\n   __typename?: 'ClaimJob',\n  _allocatedBuilder?: Maybe<Scalars['String']>,\n  _allocatedRestorer?: Maybe<Scalars['String']>,\n  _claimBuilder?: Maybe<Scalars['String']>,\n  _claimRestorer?: Maybe<Scalars['String']>,\n  _claimStatus?: Maybe<Scalars['String']>,\n  _claimValue?: Maybe<Scalars['String']>,\n  _incidentAddress?: Maybe<Scalars['String']>,\n  _insuredPhone?: Maybe<Scalars['String']>,\n  _portfolios?: Maybe<Array<PortfolioType>>,\n  _request?: Maybe<Scalars['String']>,\n  _requestDate?: Maybe<Scalars['String']>,\n  actions: Array<Maybe<Action>>,\n  additionalData?: Maybe<Array<Maybe<ClaimAdditionalDataCategory>>>,\n  additionalRefNumber?: Maybe<Scalars['String']>,\n  associatedRiskJobId?: Maybe<Scalars['Int']>,\n  brc?: Maybe<ClaimManager>,\n  building?: Maybe<ClaimPortfolio>,\n  caseManager?: Maybe<ClaimManager>,\n  claimDescription?: Maybe<Scalars['String']>,\n  claimId: Scalars['Int'],\n  contents?: Maybe<ClaimPortfolio>,\n  contentsRefNum?: Maybe<Scalars['String']>,\n  customLoginEmail?: Maybe<Scalars['String']>,\n  externalLossAdjuster?: Maybe<Company>,\n  feeTab: FeeTab,\n  hATypeVisit?: Maybe<HaTypeVisit>,\n  hasBuilding: Scalars['Boolean'],\n  hasContents: Scalars['Boolean'],\n  hasRestoration: Scalars['Boolean'],\n  homeAssessor?: Maybe<InternalAssesor>,\n  id: Scalars['ID'],\n  incidentDetail?: Maybe<IncidentDetail>,\n  insured?: Maybe<ContactDetail>,\n  insurer?: Maybe<Company>,\n  lodgeDate?: Maybe<Scalars['DateString']>,\n  lossAdjustProgress?: Maybe<ClaimProgress>,\n  lotNumber: Scalars['String'],\n  managedByENData: Scalars['Boolean'],\n  mapRef: Scalars['String'],\n  multipleRisks?: Maybe<Scalars['Boolean']>,\n  planNumber: Scalars['String'],\n  policyCover?: Maybe<PolicyCover>,\n  policyType?: Maybe<PolicyType>,\n  refNumber: Scalars['String'],\n  reportData?: Maybe<Report>,\n  reportForm?: Maybe<Form>,\n  reportFormId?: Maybe<Scalars['ID']>,\n  requireCustomLogin?: Maybe<Scalars['Boolean']>,\n  restoration?: Maybe<ClaimPortfolio>,\n  riskname?: Maybe<Scalars['String']>,\n  specialistRequests?: Maybe<Array<Maybe<SpecialistRequest>>>,\n  tenantDetails?: Maybe<Contact>,\n};\n\nexport type ClaimJobConnection = {\n   __typename?: 'ClaimJobConnection',\n  edges?: Maybe<Array<Maybe<ClaimJobEdge>>>,\n  items?: Maybe<Array<Maybe<ClaimJob>>>,\n  pageInfo: PageInfo,\n  totalCount?: Maybe<Scalars['Int']>,\n};\n\nexport type ClaimJobCreate = {\n  refNumber: Scalars['String'],\n  contentsRefNum?: Maybe<Scalars['String']>,\n  claimDescription: Scalars['String'],\n  insurerId: Scalars['ID'],\n  mapRef?: Maybe<Scalars['String']>,\n  lotNumber?: Maybe<Scalars['String']>,\n  planNumber?: Maybe<Scalars['String']>,\n  casemanagerId: Scalars['ID'],\n  brcId?: Maybe<Scalars['ID']>,\n  homeAssessorId?: Maybe<Scalars['ID']>,\n  visitTypeID?: Maybe<Scalars['ID']>,\n  externalLossAdjusterId?: Maybe<Scalars['ID']>,\n  multipleRisks?: Maybe<Scalars['Boolean']>,\n  riskname?: Maybe<Scalars['String']>,\n  additionalRefNumber?: Maybe<Scalars['String']>,\n  associatedRiskJobId?: Maybe<Scalars['Int']>,\n  requireCustomLogin?: Maybe<Scalars['Boolean']>,\n  customLoginEmail?: Maybe<Scalars['String']>,\n  policyCoverId?: Maybe<Scalars['ID']>,\n  policyTypeId?: Maybe<Scalars['ID']>,\n  incidentDetail: IncidentDetailNewType,\n  insured: ContactDetailInput,\n  tenantDetails?: Maybe<ContactInput>,\n  portfolios?: Maybe<Array<Maybe<ClaimPortfolioCreate>>>,\n};\n\nexport type ClaimJobEdge = {\n   __typename?: 'ClaimJobEdge',\n  cursor: Scalars['String'],\n  node?: Maybe<ClaimJob>,\n};\n\nexport type ClaimJobFilter = {\n  id?: Maybe<Scalars['ID']>,\n  parentId?: Maybe<Scalars['ID']>,\n  subject?: Maybe<Scalars['String']>,\n  createDateFrom?: Maybe<Scalars['Date']>,\n  createDateTo?: Maybe<Scalars['Date']>,\n  incidentDate?: Maybe<Scalars['DateString']>,\n  incidentDateFrom?: Maybe<Scalars['DateString']>,\n  incidentDateTo?: Maybe<Scalars['DateString']>,\n  keyWords?: Maybe<Scalars['String']>,\n  refNumber?: Maybe<Scalars['String']>,\n  postcode?: Maybe<Scalars['String']>,\n  managerTeams?: Maybe<Array<Maybe<Scalars['String']>>>,\n  managers?: Maybe<Array<Scalars['ID']>>,\n  insurers?: Maybe<Array<Scalars['ID']>>,\n  adjusters?: Maybe<Array<Scalars['ID']>>,\n  catCodes?: Maybe<Array<Scalars['ID']>>,\n  eventTypes?: Maybe<Array<Scalars['ID']>>,\n  buildingSuppliers?: Maybe<Array<Scalars['ID']>>,\n  contentsSuppliers?: Maybe<Array<Scalars['ID']>>,\n  restorationSuppliers?: Maybe<Array<Scalars['ID']>>,\n  buildingStatus?: Maybe<Array<Scalars['ID']>>,\n  contentsStatus?: Maybe<Array<Scalars['ID']>>,\n  restorationStatus?: Maybe<Array<Scalars['ID']>>,\n  suppliers?: Maybe<Array<Scalars['ID']>>,\n  status?: Maybe<Array<Scalars['ID']>>,\n  internalAssessors?: Maybe<Array<Scalars['ID']>>,\n  jobStatuses?: Maybe<Array<Scalars['ID']>>,\n  claimStatusStageIds?: Maybe<Array<Scalars['ID']>>,\n  portfolios?: Maybe<Array<Maybe<PortfolioType>>>,\n  states?: Maybe<Array<Maybe<State>>>,\n  variationStatuses?: Maybe<Array<Maybe<JobVariationStatus>>>,\n  requestStatuses?: Maybe<Array<Maybe<QuoteRequestStatus>>>,\n  recommendationStatus?: Maybe<Array<JobRecommendationStatus>>,\n  or?: Maybe<ClaimJobFilter>,\n  and?: Maybe<ClaimJobFilter>,\n  not?: Maybe<ClaimJobFilter>,\n};\n\nexport type ClaimJobGeneral = {\n   __typename?: 'ClaimJobGeneral',\n  caseManagerName: Scalars['String'],\n  caseManagerTeam: Scalars['String'],\n  claimId: Scalars['Int'],\n  daysAtStatus?: Maybe<Scalars['Float']>,\n  id: Scalars['ID'],\n  idenrifier: Scalars['String'],\n  insuredName: Scalars['String'],\n  insurerName: Scalars['String'],\n  logDate: Scalars['DateString'],\n  portfolioType: PortfolioType,\n  refNumber: Scalars['String'],\n  riskRegion?: Maybe<Scalars['String']>,\n  riskState?: Maybe<State>,\n  status?: Maybe<ClaimStatus>,\n  supplierName?: Maybe<Scalars['String']>,\n};\n\nexport type ClaimJobGeneralReportConnection = {\n   __typename?: 'ClaimJobGeneralReportConnection',\n  edges?: Maybe<Array<Maybe<ClaimJobGeneralReportEdge>>>,\n  items?: Maybe<Array<Maybe<ClaimJobGeneral>>>,\n  pageInfo: PageInfo,\n  totalCount?: Maybe<Scalars['Int']>,\n};\n\nexport type ClaimJobGeneralReportEdge = {\n   __typename?: 'ClaimJobGeneralReportEdge',\n  cursor: Scalars['String'],\n  node?: Maybe<ClaimJobGeneral>,\n};\n\nexport type ClaimJobInput = {\n  refNumber?: Maybe<Scalars['String']>,\n  contentsRefNum?: Maybe<Scalars['String']>,\n  additionalRefNumber?: Maybe<Scalars['String']>,\n  claimDescription?: Maybe<Scalars['String']>,\n  policyCoverId?: Maybe<Scalars['ID']>,\n  policyTypeId?: Maybe<Scalars['ID']>,\n  mapRef?: Maybe<Scalars['String']>,\n  lotNumber?: Maybe<Scalars['String']>,\n  planNumber?: Maybe<Scalars['String']>,\n  eventTypeId?: Maybe<Scalars['ID']>,\n  catCodeId?: Maybe<Scalars['ID']>,\n  incidentDate?: Maybe<Scalars['DateString']>,\n  habitableProperty?: Maybe<Scalars['Boolean']>,\n  asbestos?: Maybe<Scalars['Boolean']>,\n  hold?: Maybe<Scalars['Boolean']>,\n  makeSafeRequired?: Maybe<Scalars['Boolean']>,\n  casemanagerId?: Maybe<Scalars['ID']>,\n  brcId?: Maybe<Scalars['ID']>,\n  homeAssessorId?: Maybe<Scalars['ID']>,\n  visitTypeId?: Maybe<Scalars['ID']>,\n  externalLossAdjusterId?: Maybe<Scalars['ID']>,\n  managedByENData?: Maybe<Scalars['Boolean']>,\n  riskname?: Maybe<Scalars['String']>,\n  multipleRisks?: Maybe<Scalars['Boolean']>,\n  associatedRiskJobId?: Maybe<Scalars['Int']>,\n  requireCustomLogin?: Maybe<Scalars['Boolean']>,\n  customLoginEmail?: Maybe<Scalars['String']>,\n  insuredSalutation?: Maybe<Scalars['PersonName']>,\n  insuredName?: Maybe<Scalars['PersonName']>,\n  insuredPhone1?: Maybe<Scalars['Phone']>,\n  insuredPhone2?: Maybe<Scalars['Phone']>,\n  insuredPhone3?: Maybe<Scalars['Phone']>,\n  insuredFax?: Maybe<Scalars['Phone']>,\n  insuredEmail?: Maybe<Scalars['Email']>,\n  postalAddressLine1?: Maybe<Scalars['String']>,\n  postalAddressLine2?: Maybe<Scalars['String']>,\n  postalAddressSuburb?: Maybe<Scalars['String']>,\n  postalAddressState?: Maybe<State>,\n  postalAddressPostcode?: Maybe<Scalars['String']>,\n  riskAddressLine1?: Maybe<Scalars['String']>,\n  riskAddressLine2?: Maybe<Scalars['String']>,\n  riskAddressSuburb?: Maybe<Scalars['String']>,\n  riskAddressState?: Maybe<State>,\n  riskAddressPostcode?: Maybe<Scalars['String']>,\n  tenantName?: Maybe<Scalars['PersonName']>,\n  tenantPhone1?: Maybe<Scalars['Phone']>,\n  tenantPhone2?: Maybe<Scalars['Phone']>,\n  tenantPhone3?: Maybe<Scalars['Phone']>,\n  category?: Maybe<ClaimCategory>,\n  portfolios?: Maybe<Array<Maybe<ClaimPortfolioInput>>>,\n};\n\nexport type ClaimJobPayload = {\n   __typename?: 'ClaimJobPayload',\n  fieldErrors?: Maybe<Array<Maybe<EntityFieldError>>>,\n  messages: Array<Scalars['String']>,\n  result?: Maybe<ClaimJob>,\n  success: Scalars['Boolean'],\n};\n\nexport type ClaimJobStatusInfo = {\n   __typename?: 'ClaimJobStatusInfo',\n  datePopup: Scalars['Boolean'],\n  description: Scalars['String'],\n  nextStep: Scalars['String'],\n  noteMessage: Scalars['String'],\n  portfolioType?: Maybe<PortfolioType>,\n  statusId: Scalars['Int'],\n  statusName: Scalars['String'],\n};\n\nexport type ClaimLossAdjusterDocument = {\n   __typename?: 'ClaimLossAdjusterDocument',\n  company?: Maybe<Company>,\n  description: Scalars['String'],\n  documentFileName: Scalars['String'],\n  documentId: Scalars['Int'],\n  id: Scalars['ID'],\n  private: Scalars['Boolean'],\n  reportType?: Maybe<LossAdjusterReportType>,\n  uploadDate?: Maybe<Scalars['DateTimeString']>,\n  url: Scalars['String'],\n};\n\nexport type ClaimLossAdjusterDocumentConnection = {\n   __typename?: 'ClaimLossAdjusterDocumentConnection',\n  edges?: Maybe<Array<Maybe<ClaimLossAdjusterDocumentEdge>>>,\n  items?: Maybe<Array<Maybe<ClaimLossAdjusterDocument>>>,\n  pageInfo: PageInfo,\n  totalCount?: Maybe<Scalars['Int']>,\n};\n\nexport type ClaimLossAdjusterDocumentCreate = {\n  claimId: Scalars['ID'],\n  description: Scalars['String'],\n  documentFileName: Scalars['String'],\n  fileBase64: Scalars['String'],\n  fileId?: Maybe<Scalars['String']>,\n  private: Scalars['Boolean'],\n  reportTypeId?: Maybe<Scalars['Byte']>,\n};\n\nexport type ClaimLossAdjusterDocumentEdge = {\n   __typename?: 'ClaimLossAdjusterDocumentEdge',\n  cursor: Scalars['String'],\n  node?: Maybe<ClaimLossAdjusterDocument>,\n};\n\nexport type ClaimLossAdjusterDocumentPayload = {\n   __typename?: 'ClaimLossAdjusterDocumentPayload',\n  fieldErrors?: Maybe<Array<Maybe<EntityFieldError>>>,\n  messages: Array<Scalars['String']>,\n  result?: Maybe<ClaimLossAdjusterDocument>,\n  success: Scalars['Boolean'],\n};\n\nexport type ClaimManager = {\n   __typename?: 'ClaimManager',\n  id: Scalars['ID'],\n  managerId: Scalars['Int'],\n  managerName: Scalars['String'],\n  managerTeam?: Maybe<Scalars['String']>,\n};\n\nexport type ClaimNote = {\n   __typename?: 'ClaimNote',\n  _privacy?: Maybe<Scalars['String']>,\n  id: Scalars['ID'],\n  jobNoteId: Scalars['Int'],\n  logDate?: Maybe<Scalars['DateTimeString']>,\n  message: Scalars['String'],\n  portfolioType?: Maybe<PortfolioType>,\n  private?: Maybe<Scalars['Byte']>,\n  user?: Maybe<User>,\n  userId: Scalars['Int'],\n};\n\nexport type ClaimNoteConnection = {\n   __typename?: 'ClaimNoteConnection',\n  edges?: Maybe<Array<Maybe<ClaimNoteEdge>>>,\n  items?: Maybe<Array<Maybe<ClaimNote>>>,\n  pageInfo: PageInfo,\n  totalCount?: Maybe<Scalars['Int']>,\n};\n\nexport type ClaimNoteCreate = {\n  claimId: Scalars['ID'],\n  message: Scalars['String'],\n  visibleByInsurer?: Maybe<Scalars['Boolean']>,\n  private?: Maybe<Scalars['Byte']>,\n  portfolioType?: Maybe<PortfolioType>,\n};\n\nexport type ClaimNoteEdge = {\n   __typename?: 'ClaimNoteEdge',\n  cursor: Scalars['String'],\n  node?: Maybe<ClaimNote>,\n};\n\nexport type ClaimNotePayload = {\n   __typename?: 'ClaimNotePayload',\n  fieldErrors?: Maybe<Array<Maybe<EntityFieldError>>>,\n  messages: Array<Scalars['String']>,\n  result?: Maybe<ClaimNote>,\n  success: Scalars['Boolean'],\n};\n\nexport type ClaimParticipantIndex = {\n  claimId: Scalars['ID'],\n  postcode?: Maybe<Scalars['String']>,\n  portfolioTypes?: Maybe<Array<Maybe<PortfolioType>>>,\n  participantStatus?: Maybe<SupplierStatusFilter>,\n  participantType?: Maybe<SupplierTypeFilter>,\n};\n\nexport type ClaimPortfolio = {\n   __typename?: 'ClaimPortfolio',\n  _portfolioTooltips?: Maybe<Scalars['String']>,\n  _providerAndStatus?: Maybe<Scalars['String']>,\n  authorised: Scalars['Boolean'],\n  authorisedSupplier?: Maybe<Company>,\n  authorisedValue?: Maybe<Scalars['Decimal']>,\n  claimCompleted: Scalars['Boolean'],\n  claimRecommendation?: Maybe<ClaimRecommendation>,\n  claimStatus?: Maybe<ClaimStatus>,\n  dateAccecpted?: Maybe<Scalars['Date']>,\n  dateCompleted?: Maybe<Scalars['Date']>,\n  daysAtStatus?: Maybe<Scalars['Float']>,\n  daysTakenToComplete?: Maybe<Scalars['Float']>,\n  description: Scalars['String'],\n  emergencyMakeSafeWorks?: Maybe<Scalars['Int']>,\n  estimator?: Maybe<Estimator>,\n  excessValue?: Maybe<Scalars['Int']>,\n  finaliseReason?: Maybe<ClaimFinaliseReason>,\n  insuranceCompletedSiteReport: Scalars['Boolean'],\n  isReallocateSupplier: Scalars['Boolean'],\n  jobSuppliers?: Maybe<Array<Maybe<JobSupplier>>>,\n  lastContactInsured?: Maybe<Scalars['DateTimeString']>,\n  lastStatusDate?: Maybe<Scalars['DateTimeString']>,\n  makeSafeProgress?: Maybe<ClaimProgress>,\n  makeSafeStatus?: Maybe<ClaimStatus>,\n  makeSafeValue?: Maybe<Scalars['Decimal']>,\n  makesafeCompletedDate?: Maybe<Scalars['Date']>,\n  nextContactInsured?: Maybe<Scalars['DateTimeString']>,\n  noPanelSupplier: Scalars['String'],\n  policyCover?: Maybe<PolicyCover>,\n  policyType?: Maybe<PolicyType>,\n  portfolioType?: Maybe<PortfolioType>,\n  progress?: Maybe<ClaimProgress>,\n  reallocate: Scalars['Boolean'],\n  reportDate?: Maybe<Scalars['DateString']>,\n  scopePrepared: Scalars['Boolean'],\n  scopedValue?: Maybe<Scalars['Decimal']>,\n  scopingSupplier?: Maybe<Company>,\n  settlementValue?: Maybe<Scalars['Float']>,\n  siteReport?: Maybe<ClaimSiteReport>,\n  siteReportDescription?: Maybe<Scalars['String']>,\n  statusBeforeAwaitingInfo?: Maybe<ClaimStatus>,\n  statusBeforeComplete?: Maybe<ClaimStatus>,\n  sumInsured: Scalars['Int'],\n  sumInsuredAdequate?: Maybe<Scalars['Int']>,\n  supervisor?: Maybe<Supervisor>,\n  supplierCollectedExcess?: Maybe<Scalars['Int']>,\n  supplierJobStatus?: Maybe<ClaimStatus>,\n  supplierJobValue?: Maybe<Scalars['Decimal']>,\n  toCollectExcess?: Maybe<Scalars['Boolean']>,\n  toProvideSiteReport: Scalars['Boolean'],\n  userContactInsured?: Maybe<Scalars['Int']>,\n  winningBuilderRecommend?: Maybe<Scalars['Int']>,\n};\n\nexport type ClaimPortfolioCreate = {\n  portfolioType: PortfolioType,\n  toProvideSiteReport: Scalars['Boolean'],\n  sumInsured: Scalars['Int'],\n  excessValue: Scalars['Int'],\n  toCollectExcess: Scalars['Boolean'],\n  scopingSupplierId: Scalars['ID'],\n  quotingSupplierIds?: Maybe<Array<Scalars['ID']>>,\n};\n\nexport type ClaimPortfolioInput = {\n  portfolioType: PortfolioType,\n  policyCoverId?: Maybe<Scalars['ID']>,\n  policyTypeId?: Maybe<Scalars['ID']>,\n  description?: Maybe<Scalars['String']>,\n  sumInsured?: Maybe<Scalars['Int']>,\n  excessValue?: Maybe<Scalars['Int']>,\n  toCollectExcess?: Maybe<Scalars['Boolean']>,\n  quotingSupplierIds?: Maybe<Array<Scalars['ID']>>,\n};\n\nexport type ClaimPortfolioPayload = {\n   __typename?: 'ClaimPortfolioPayload',\n  fieldErrors?: Maybe<Array<Maybe<EntityFieldError>>>,\n  messages: Array<Scalars['String']>,\n  result?: Maybe<ClaimPortfolio>,\n  success: Scalars['Boolean'],\n};\n\nexport type ClaimPortfoliosWhere = {\n  claimId: Scalars['ID'],\n  claimPortfolioTypes?: Maybe<Array<PortfolioType>>,\n};\n\nexport type ClaimProgress = {\n   __typename?: 'ClaimProgress',\n  appointmentBooked: Scalars['Boolean'],\n  appointmentDate?: Maybe<Scalars['DateTimeString']>,\n  appointmentUserId?: Maybe<Scalars['Int']>,\n  initialCallDate?: Maybe<Scalars['DateTimeString']>,\n  initialCallMade: Scalars['Boolean'],\n  initialCallUserId?: Maybe<Scalars['Int']>,\n};\n\nexport type ClaimRecommendation = {\n   __typename?: 'ClaimRecommendation',\n  claimrecommendationid?: Maybe<Scalars['Byte']>,\n  description: Scalars['String'],\n};\n\nexport type ClaimReserveInput = {\n  buildingReserve: Scalars['Decimal'],\n  contentsReserve: Scalars['Decimal'],\n};\n\nexport type ClaimSiteReport = {\n   __typename?: 'ClaimSiteReport',\n  claddingType?: Maybe<SiteCladdingType>,\n  dwellingAge?: Maybe<SiteDwellingAge>,\n  dwellingType?: Maybe<SiteDwellingType>,\n  foundationType?: Maybe<SiteFoundationType>,\n  houseType?: Maybe<SiteHouseType>,\n  isAClaim?: Maybe<SiteIsAClaim>,\n  roofType?: Maybe<SiteRoofType>,\n};\n\nexport type ClaimStatus = {\n   __typename?: 'ClaimStatus',\n  statusId?: Maybe<Scalars['Int']>,\n  statusName?: Maybe<Scalars['String']>,\n};\n\nexport type ClaimStatusVolume = {\n   __typename?: 'ClaimStatusVolume',\n  claimCount: Scalars['Int'],\n  color: Scalars['String'],\n  id: Scalars['ID'],\n  label: Scalars['String'],\n};\n\nexport type ClaimStatusVolumeGroup = {\n   __typename?: 'ClaimStatusVolumeGroup',\n  claimPortfolioType: PortfolioType,\n  id: Scalars['ID'],\n  items: Array<ClaimStatusVolume>,\n};\n\nexport type ClaimStatusVolumeWhere = {\n  createDateFrom?: Maybe<Scalars['Date']>,\n  createDateTo?: Maybe<Scalars['Date']>,\n  incidentDate?: Maybe<Scalars['DateString']>,\n  incidentDateFrom?: Maybe<Scalars['DateString']>,\n  incidentDateTo?: Maybe<Scalars['DateString']>,\n  keyWords?: Maybe<Scalars['String']>,\n  managerTeams?: Maybe<Array<Maybe<Scalars['String']>>>,\n  insurers?: Maybe<Array<Scalars['ID']>>,\n  managers?: Maybe<Array<Scalars['ID']>>,\n  adjusters?: Maybe<Array<Scalars['ID']>>,\n  catCodes?: Maybe<Array<Scalars['ID']>>,\n  eventTypes?: Maybe<Array<Scalars['ID']>>,\n  buildingSuppliers?: Maybe<Array<Scalars['ID']>>,\n  contentsSuppliers?: Maybe<Array<Scalars['ID']>>,\n  restorationSuppliers?: Maybe<Array<Scalars['ID']>>,\n  internalAssessors?: Maybe<Array<Scalars['ID']>>,\n  states?: Maybe<Array<Maybe<State>>>,\n  claimPortfolioType: PortfolioType,\n};\n\nexport type ClaimUniqueWhere = {\n  claimId: Scalars['ID'],\n};\n\nexport type CommunicationFilter = {\n  id?: Maybe<Scalars['ID']>,\n  claimId?: Maybe<Scalars['ID']>,\n  createDateFrom?: Maybe<Scalars['Date']>,\n  createDateTo?: Maybe<Scalars['Date']>,\n  keyWords?: Maybe<Scalars['String']>,\n  managers?: Maybe<Array<Scalars['ID']>>,\n  managerTeams?: Maybe<Array<Maybe<Scalars['String']>>>,\n  internalAssessors?: Maybe<Array<Scalars['ID']>>,\n  acknowledged?: Maybe<Scalars['Boolean']>,\n  states?: Maybe<Array<Maybe<State>>>,\n  boxes?: Maybe<Array<Maybe<ClaimCommunicationBox>>>,\n  portfolios?: Maybe<Array<Maybe<PortfolioType>>>,\n};\n\nexport type Company = {\n   __typename?: 'Company',\n  additionalRefNo?: Maybe<Scalars['Boolean']>,\n  builderAttendSite?: Maybe<Scalars['Boolean']>,\n  claimrecommendation?: Maybe<Scalars['Boolean']>,\n  cm2nd?: Maybe<Scalars['Boolean']>,\n  comboclaims?: Maybe<Scalars['Boolean']>,\n  commOptionForBuilder?: Maybe<Scalars['Boolean']>,\n  companyEmail?: Maybe<Scalars['String']>,\n  companyFax?: Maybe<Scalars['String']>,\n  companyId: Scalars['Int'],\n  companyName: Scalars['String'],\n  companyPhone1?: Maybe<Scalars['String']>,\n  companyPhone2?: Maybe<Scalars['String']>,\n  companyrates?: Maybe<Scalars['Int']>,\n  companyType?: Maybe<AccessRole>,\n  content?: Maybe<Scalars['Int']>,\n  contentauth?: Maybe<Scalars['Boolean']>,\n  contentsref?: Maybe<Scalars['Boolean']>,\n  cropassess?: Maybe<Scalars['Boolean']>,\n  defaultratesRestoration?: Maybe<Scalars['Int']>,\n  defConsultBuildSiteReport?: Maybe<Scalars['Int']>,\n  directSupplyTemplate?: Maybe<Scalars['Boolean']>,\n  enableMultipleRisks?: Maybe<Scalars['Boolean']>,\n  hideCaseManagerFromSiteReport?: Maybe<Scalars['Boolean']>,\n  hideCategoryOfClaim?: Maybe<Scalars['Boolean']>,\n  industryrates?: Maybe<Scalars['Int']>,\n  insrefnumLength?: Maybe<Scalars['Byte']>,\n  invoiceEmail?: Maybe<Scalars['Boolean']>,\n  isAutoSelectSupplier: Scalars['Boolean'],\n  isAwaitingInformation: Scalars['Boolean'],\n  isFeeModule: Scalars['Boolean'],\n  isLossAdjuster: Scalars['Boolean'],\n  isMarginUpdate: Scalars['Boolean'],\n  isReportingModule: Scalars['Boolean'],\n  isSirModule: Scalars['Boolean'],\n  isSpecialistModule: Scalars['Boolean'],\n  isToProvideSiteReportView: Scalars['Boolean'],\n  isVideoToolModule: Scalars['Boolean'],\n  logoright?: Maybe<Scalars['String']>,\n  lossadjcomp?: Maybe<Scalars['Int']>,\n  lossAdjustCreateSiteReport?: Maybe<Scalars['Int']>,\n  makesafeAppointmentmade?: Maybe<Scalars['Boolean']>,\n  makesafeInitialcallmade?: Maybe<Scalars['Boolean']>,\n  makesafeRstAppointmentmade?: Maybe<Scalars['Boolean']>,\n  makesafeRstInitialcallmade?: Maybe<Scalars['Boolean']>,\n  makesafeRstWorkscompleted?: Maybe<Scalars['Boolean']>,\n  makesafeWorkscompleted?: Maybe<Scalars['Boolean']>,\n  mitigation?: Maybe<Scalars['Boolean']>,\n  nonPanelSupplier: Scalars['Boolean'],\n  onCostPopUp?: Maybe<Scalars['Boolean']>,\n  policy?: Maybe<Scalars['Boolean']>,\n  policyCoverManditoryField?: Maybe<Scalars['Boolean']>,\n  policyCoverSuppliersView?: Maybe<Scalars['Boolean']>,\n  policylimit?: Maybe<Scalars['Boolean']>,\n  policylimitperitem?: Maybe<Scalars['Boolean']>,\n  policyTypeManditoryField?: Maybe<Scalars['Boolean']>,\n  policyTypeSuppliersView?: Maybe<Scalars['Boolean']>,\n  quickrepair?: Maybe<Scalars['Boolean']>,\n  quotesperclaim?: Maybe<Scalars['Int']>,\n  removeHabitableAsbestos?: Maybe<Scalars['Boolean']>,\n  restoration?: Maybe<Scalars['Boolean']>,\n  rrp?: Maybe<Scalars['Boolean']>,\n  setupcustomerlogin?: Maybe<Scalars['Int']>,\n  sitereporttemplateid?: Maybe<Scalars['Byte']>,\n  substatus?: Maybe<Scalars['Boolean']>,\n  useInternalAssessor: Scalars['Boolean'],\n  useSirRestorationModule: Scalars['Boolean'],\n  usesRestrictedAcceptance?: Maybe<Scalars['Boolean']>,\n  waitingOptionForBuilder?: Maybe<Scalars['Boolean']>,\n};\n\nexport type CompanyCustomisation = {\n   __typename?: 'CompanyCustomisation',\n  applicationAlias?: Maybe<Scalars['String']>,\n  applicationFavicon?: Maybe<Scalars['String']>,\n  applicationLogo?: Maybe<Scalars['String']>,\n  displayCompanyLogo?: Maybe<Scalars['String']>,\n  logoHeight?: Maybe<Scalars['Byte']>,\n};\n\nexport type CompanyProfile = {\n   __typename?: 'CompanyProfile',\n  additionalRefNo?: Maybe<Scalars['Boolean']>,\n  builderAttendSite?: Maybe<Scalars['Boolean']>,\n  claimrecommendation?: Maybe<Scalars['Boolean']>,\n  cm2nd?: Maybe<Scalars['Boolean']>,\n  comboclaims?: Maybe<Scalars['Boolean']>,\n  commOptionForBuilder?: Maybe<Scalars['Boolean']>,\n  companyEmail?: Maybe<Scalars['String']>,\n  companyFax?: Maybe<Scalars['String']>,\n  companyId: Scalars['Int'],\n  companyName: Scalars['String'],\n  companyPhone1?: Maybe<Scalars['String']>,\n  companyPhone2?: Maybe<Scalars['String']>,\n  companyrates?: Maybe<Scalars['Int']>,\n  companyType?: Maybe<AccessRole>,\n  content?: Maybe<Scalars['Int']>,\n  contentauth?: Maybe<Scalars['Boolean']>,\n  contentsref?: Maybe<Scalars['Boolean']>,\n  cropassess?: Maybe<Scalars['Boolean']>,\n  customisation?: Maybe<CompanyCustomisation>,\n  defaultratesRestoration?: Maybe<Scalars['Int']>,\n  defConsultBuildSiteReport?: Maybe<Scalars['Int']>,\n  directSupplyTemplate?: Maybe<Scalars['Boolean']>,\n  enableMultipleRisks?: Maybe<Scalars['Boolean']>,\n  hideCaseManagerFromSiteReport?: Maybe<Scalars['Boolean']>,\n  hideCategoryOfClaim?: Maybe<Scalars['Boolean']>,\n  industryrates?: Maybe<Scalars['Int']>,\n  insrefnumLength?: Maybe<Scalars['Byte']>,\n  invoiceEmail?: Maybe<Scalars['Boolean']>,\n  isAutoSelectSupplier: Scalars['Boolean'],\n  isAwaitingInformation: Scalars['Boolean'],\n  isFeeModule: Scalars['Boolean'],\n  isLossAdjuster: Scalars['Boolean'],\n  isMarginUpdate: Scalars['Boolean'],\n  isReportingModule: Scalars['Boolean'],\n  isSirModule: Scalars['Boolean'],\n  isSpecialistModule: Scalars['Boolean'],\n  isToProvideSiteReportView: Scalars['Boolean'],\n  isVideoToolModule: Scalars['Boolean'],\n  logoright?: Maybe<Scalars['String']>,\n  lossadjcomp?: Maybe<Scalars['Int']>,\n  lossAdjustCreateSiteReport?: Maybe<Scalars['Int']>,\n  makesafeAppointmentmade?: Maybe<Scalars['Boolean']>,\n  makesafeInitialcallmade?: Maybe<Scalars['Boolean']>,\n  makesafeRstAppointmentmade?: Maybe<Scalars['Boolean']>,\n  makesafeRstInitialcallmade?: Maybe<Scalars['Boolean']>,\n  makesafeRstWorkscompleted?: Maybe<Scalars['Boolean']>,\n  makesafeWorkscompleted?: Maybe<Scalars['Boolean']>,\n  mitigation?: Maybe<Scalars['Boolean']>,\n  nonPanelSupplier: Scalars['Boolean'],\n  onCostPopUp?: Maybe<Scalars['Boolean']>,\n  policy?: Maybe<Scalars['Boolean']>,\n  policyCoverManditoryField?: Maybe<Scalars['Boolean']>,\n  policyCoverSuppliersView?: Maybe<Scalars['Boolean']>,\n  policylimit?: Maybe<Scalars['Boolean']>,\n  policylimitperitem?: Maybe<Scalars['Boolean']>,\n  policyTypeManditoryField?: Maybe<Scalars['Boolean']>,\n  policyTypeSuppliersView?: Maybe<Scalars['Boolean']>,\n  quickrepair?: Maybe<Scalars['Boolean']>,\n  quotesperclaim?: Maybe<Scalars['Int']>,\n  removeHabitableAsbestos?: Maybe<Scalars['Boolean']>,\n  restoration?: Maybe<Scalars['Boolean']>,\n  rrp?: Maybe<Scalars['Boolean']>,\n  setupcustomerlogin?: Maybe<Scalars['Int']>,\n  sitereporttemplateid?: Maybe<Scalars['Byte']>,\n  substatus?: Maybe<Scalars['Boolean']>,\n  useInternalAssessor: Scalars['Boolean'],\n  useSirRestorationModule: Scalars['Boolean'],\n  usesRestrictedAcceptance?: Maybe<Scalars['Boolean']>,\n  waitingOptionForBuilder?: Maybe<Scalars['Boolean']>,\n};\n\nexport type Contact = {\n   __typename?: 'Contact',\n  name?: Maybe<Scalars['String']>,\n  phone1?: Maybe<Scalars['String']>,\n  phone2?: Maybe<Scalars['String']>,\n  phone3?: Maybe<Scalars['String']>,\n};\n\nexport type ContactDetail = {\n   __typename?: 'ContactDetail',\n  email?: Maybe<Scalars['String']>,\n  fax?: Maybe<Scalars['String']>,\n  name?: Maybe<Scalars['String']>,\n  phone1?: Maybe<Scalars['String']>,\n  phone2?: Maybe<Scalars['String']>,\n  phone3?: Maybe<Scalars['String']>,\n  postalAddress?: Maybe<Address>,\n  salutation?: Maybe<Scalars['String']>,\n};\n\nexport type ContactDetailInput = {\n  name?: Maybe<Scalars['String']>,\n  phone1?: Maybe<Scalars['String']>,\n  phone2?: Maybe<Scalars['String']>,\n  phone3?: Maybe<Scalars['String']>,\n  salutation?: Maybe<Scalars['String']>,\n  email?: Maybe<Scalars['String']>,\n  fax?: Maybe<Scalars['String']>,\n  postalAddress?: Maybe<AddressInput>,\n};\n\nexport type ContactInput = {\n  name?: Maybe<Scalars['String']>,\n  phone1?: Maybe<Scalars['String']>,\n  phone2?: Maybe<Scalars['String']>,\n  phone3?: Maybe<Scalars['String']>,\n};\n\nexport type Dashboard = {\n   __typename?: 'Dashboard',\n  dashboardId: Scalars['Int'],\n  id: Scalars['ID'],\n  name: Scalars['String'],\n};\n\nexport type DashboardWidgetIndex = {\n  dashboardId: Scalars['Int'],\n  filter?: Maybe<CaseReportFilter>,\n};\n\nexport enum DataDisplay {\n  Text = 'Text',\n  ChartGraph = 'ChartGraph',\n  ChartLine = 'ChartLine',\n  ChartBar = 'ChartBar',\n  ChartProgressBar = 'ChartProgressBar'\n}\n\nexport enum DataSense {\n  Neutral = 'Neutral',\n  Commendatory = 'Commendatory',\n  Derogatory = 'Derogatory'\n}\n\nexport enum DataUnit {\n  Number = 'Number',\n  Currency = 'Currency'\n}\n\n\nexport enum DateRangeOption {\n  UnDefined = 'UnDefined',\n  Daily = 'Daily',\n  Weekly = 'Weekly',\n  Monthly = 'Monthly',\n  Yearly = 'Yearly',\n  Today = 'Today',\n  Month = 'Month',\n  Week = 'Week',\n  Annual = 'Annual',\n  Quarter = 'Quarter',\n  FinancialYear = 'FinancialYear'\n}\n\n\n\nexport type DateTimeField = Field & {\n   __typename?: 'DateTimeField',\n  id: Scalars['ID'],\n  order?: Maybe<Scalars['Int']>,\n  grid?: Maybe<Scalars['Grid']>,\n  label?: Maybe<Scalars['String']>,\n  name?: Maybe<Scalars['String']>,\n};\n\n\n\n\n\nexport type EnDataEntityKey = {\n  id: Scalars['ID'],\n};\n\nexport type EnDataPortfolioKey = {\n  id: Scalars['ID'],\n  portfolioType: PortfolioType,\n};\n\nexport type EntityFieldError = {\n   __typename?: 'EntityFieldError',\n  fieldName: Scalars['String'],\n  level?: Maybe<LogLevel>,\n  message: Scalars['String'],\n};\n\nexport type Estimator = {\n   __typename?: 'Estimator',\n  companyId: Scalars['Int'],\n  estimatorId: Scalars['Int'],\n  id: Scalars['ID'],\n  initials?: Maybe<Scalars['String']>,\n  name?: Maybe<Scalars['String']>,\n  phone?: Maybe<Scalars['String']>,\n  portfolioType?: Maybe<PortfolioType>,\n};\n\nexport type EstimatorConnection = {\n   __typename?: 'EstimatorConnection',\n  edges?: Maybe<Array<Maybe<EstimatorEdge>>>,\n  items?: Maybe<Array<Maybe<Estimator>>>,\n  pageInfo: PageInfo,\n  totalCount?: Maybe<Scalars['Int']>,\n};\n\nexport type EstimatorCreateInput = {\n  name: Scalars['String'],\n  initials?: Maybe<Scalars['String']>,\n  phone?: Maybe<Scalars['String']>,\n  companyId?: Maybe<Scalars['Int']>,\n  portfolioType?: Maybe<PortfolioType>,\n};\n\nexport type EstimatorEdge = {\n   __typename?: 'EstimatorEdge',\n  cursor: Scalars['String'],\n  node?: Maybe<Estimator>,\n};\n\nexport type EstimatorPayload = {\n   __typename?: 'EstimatorPayload',\n  fieldErrors?: Maybe<Array<Maybe<EntityFieldError>>>,\n  messages: Array<Scalars['String']>,\n  result?: Maybe<Estimator>,\n  success: Scalars['Boolean'],\n};\n\nexport type EstimatorUpdateInput = {\n  name?: Maybe<Scalars['String']>,\n  initials?: Maybe<Scalars['String']>,\n  phone?: Maybe<Scalars['String']>,\n};\n\nexport type FeeAmount = {\n   __typename?: 'FeeAmount',\n  defaultAmount?: Maybe<Scalars['Decimal']>,\n  id: Scalars['ID'],\n  maxAmount?: Maybe<Scalars['Decimal']>,\n  supplierId: Scalars['Int'],\n  supplierName: Scalars['String'],\n};\n\nexport type FeeCategory = {\n   __typename?: 'FeeCategory',\n  claimPortfolioType?: Maybe<PortfolioType>,\n  feeCategoryId: Scalars['Int'],\n  feeItems?: Maybe<Array<Maybe<FeeItem>>>,\n  feeItemsAggregate?: Maybe<AggregateFeeItem>,\n  feeTypes: Array<Maybe<FeeType>>,\n  id: Scalars['ID'],\n  name: Scalars['String'],\n};\n\nexport type FeeCategoryWhere = {\n  claimId: Scalars['ID'],\n  claimPortfolioTypes?: Maybe<Array<PortfolioType>>,\n};\n\nexport type FeeInvoice = {\n   __typename?: 'FeeInvoice',\n  actions: Array<Maybe<Action>>,\n  amount?: Maybe<Scalars['Decimal']>,\n  document?: Maybe<File>,\n  feeInvoiceId: Scalars['Int'],\n  feeInvoiceStatus?: Maybe<FeeInvoiceStatus>,\n  feeItemInvoices?: Maybe<Array<Maybe<FeeInvoiceItem>>>,\n  id: Scalars['ID'],\n  number: Scalars['String'],\n};\n\nexport type FeeInvoiceItem = {\n   __typename?: 'FeeInvoiceItem',\n  amount: Scalars['Decimal'],\n  feeItemInvoiceId: Scalars['String'],\n  feeItemName: Scalars['String'],\n  id: Scalars['ID'],\n};\n\nexport type FeeInvoicePayload = {\n   __typename?: 'FeeInvoicePayload',\n  fieldErrors?: Maybe<Array<Maybe<EntityFieldError>>>,\n  messages: Array<Scalars['String']>,\n  result?: Maybe<FeeInvoice>,\n  success: Scalars['Boolean'],\n};\n\nexport type FeeInvoiceStatus = {\n   __typename?: 'FeeInvoiceStatus',\n  id: Scalars['ID'],\n  invoiceStatusId: Scalars['Int'],\n  name: Scalars['String'],\n  type: Scalars['String'],\n};\n\nexport type FeeInvoiceStatusWhere = {\n  claimId: Scalars['ID'],\n};\n\nexport type FeeInvoiceUniqueWhere = {\n  feeInvoiceId: Scalars['Int'],\n};\n\nexport type FeeInvoiceUpdateInput = {\n  feeInvoiceStatusId: Scalars['Int'],\n};\n\nexport type FeeInvoiceUploadInput = {\n  invoiceNumber: Scalars['String'],\n  invoiceAmount: Scalars['Decimal'],\n  description: Scalars['String'],\n  private?: Maybe<Scalars['Boolean']>,\n  visibleByInsurer?: Maybe<Scalars['Boolean']>,\n  fileId?: Maybe<Scalars['String']>,\n  fileName: Scalars['String'],\n  fileBase64: Scalars['String'],\n};\n\nexport type FeeInvoiceUploadWhere = {\n  feeItemIds: Array<Scalars['Int']>,\n};\n\nexport type FeeItem = {\n   __typename?: 'FeeItem',\n  actions: Array<Maybe<Action>>,\n  authorisedAmount?: Maybe<Scalars['Decimal']>,\n  claimPortfolioType?: Maybe<PortfolioType>,\n  description?: Maybe<Scalars['String']>,\n  feeItemId: Scalars['Int'],\n  feeItemInvoices?: Maybe<Array<Maybe<FeeItemInvoice>>>,\n  feeType?: Maybe<FeeType>,\n  id: Scalars['ID'],\n  logDate?: Maybe<Scalars['DateTimeString']>,\n  maxAmount?: Maybe<Scalars['Decimal']>,\n  supplier?: Maybe<Company>,\n  toBeInvoicedAmount?: Maybe<Scalars['Decimal']>,\n};\n\nexport type FeeItemCreateInput = {\n  claimId: Scalars['ID'],\n  feeTypeId: Scalars['Int'],\n  authorisedAmount: Scalars['Decimal'],\n  supplierId?: Maybe<Scalars['Int']>,\n};\n\nexport type FeeItemEditInput = {\n  authorisedAmount: Scalars['Decimal'],\n};\n\nexport type FeeItemInvoice = {\n   __typename?: 'FeeItemInvoice',\n  amount: Scalars['Decimal'],\n  feeInvoice?: Maybe<FeeInvoice>,\n  feeItemInvoiceId: Scalars['String'],\n  id: Scalars['ID'],\n};\n\nexport type FeeItemPayload = {\n   __typename?: 'FeeItemPayload',\n  fieldErrors?: Maybe<Array<Maybe<EntityFieldError>>>,\n  messages: Array<Scalars['String']>,\n  result?: Maybe<FeeItem>,\n  success: Scalars['Boolean'],\n};\n\nexport type FeeItemUniqueWhere = {\n  feeItemId: Scalars['Int'],\n};\n\nexport type FeeItemWhere = {\n  claimId: Scalars['ID'],\n  availableToBulkInvoice: Scalars['Boolean'],\n  claimPortfolioTypes?: Maybe<Array<PortfolioType>>,\n};\n\nexport type FeePortfolio = {\n   __typename?: 'FeePortfolio',\n  actions: Array<Maybe<Action>>,\n  feeCategories?: Maybe<Array<Maybe<FeeCategory>>>,\n  feeCategoriesAggregate?: Maybe<AggregateFeeCategory>,\n  feePortfolioId: Scalars['Int'],\n  id: Scalars['ID'],\n};\n\nexport type FeeTab = {\n   __typename?: 'FeeTab',\n  id: Scalars['ID'],\n  isDisplay: Scalars['Boolean'],\n};\n\nexport type FeeType = {\n   __typename?: 'FeeType',\n  feeTypeId: Scalars['Int'],\n  id: Scalars['ID'],\n  name: Scalars['String'],\n  negativeFee: Scalars['Boolean'],\n  suppliers?: Maybe<Array<Maybe<Company>>>,\n  suppliersAndAmounts?: Maybe<Array<Maybe<FeeAmount>>>,\n};\n\nexport type Field = {\n  id: Scalars['ID'],\n  label?: Maybe<Scalars['String']>,\n  order?: Maybe<Scalars['Int']>,\n  grid?: Maybe<Scalars['Grid']>,\n};\n\nexport type File = {\n   __typename?: 'File',\n  fileId: Scalars['Int'],\n  id: Scalars['ID'],\n  name: Scalars['String'],\n  url: Scalars['String'],\n};\n\nexport type FileField = Field & {\n   __typename?: 'FileField',\n  id: Scalars['ID'],\n  order?: Maybe<Scalars['Int']>,\n  grid?: Maybe<Scalars['Grid']>,\n  label?: Maybe<Scalars['String']>,\n  name?: Maybe<Scalars['String']>,\n};\n\nexport type FilterElement = {\n   __typename?: 'FilterElement',\n  displayByDefault: Scalars['Boolean'],\n  id: Scalars['String'],\n  name: Scalars['String'],\n  options?: Maybe<Array<Maybe<FilterOption>>>,\n  value?: Maybe<Scalars['String']>,\n};\n\nexport type FilterInput = {\n   __typename?: 'FilterInput',\n  icon?: Maybe<Scalars['String']>,\n  id: Scalars['ID'],\n  isDisabled: Scalars['Boolean'],\n  label?: Maybe<Scalars['String']>,\n  name: Scalars['String'],\n  options?: Maybe<Array<Maybe<FilterInputOption>>>,\n  type: FilterType,\n};\n\nexport type FilterInputOption = {\n   __typename?: 'FilterInputOption',\n  group?: Maybe<Scalars['String']>,\n  id?: Maybe<Scalars['ID']>,\n  label: Scalars['String'],\n};\n\nexport type FilterOption = {\n   __typename?: 'FilterOption',\n  group?: Maybe<Scalars['String']>,\n  id?: Maybe<Scalars['ID']>,\n  name: Scalars['String'],\n  value: Scalars['String'],\n};\n\nexport enum FilterType {\n  Text = 'Text',\n  Date = 'Date',\n  Time = 'Time',\n  DateTime = 'DateTime',\n  Select = 'Select',\n  SelectMultiple = 'Select_multiple',\n  ComboBox = 'ComboBox',\n  ComboBoxMultiple = 'ComboBox_multiple',\n  Search = 'Search'\n}\n\nexport type FinaliseClaimInput = {\n  finaliseReasonId: Scalars['Int'],\n  settlementValue?: Maybe<Scalars['Float']>,\n  noPanelSupplier?: Maybe<Scalars['String']>,\n  dateCompleted?: Maybe<Scalars['DateString']>,\n};\n\nexport type FollowUpClaimInputType = {\n  note: Scalars['String'],\n  lastFollowUpDate: Scalars['DateTimeString'],\n  nextFollowUpDate?: Maybe<Scalars['DateTimeString']>,\n};\n\nexport type Form = {\n   __typename?: 'Form',\n  cards?: Maybe<Array<Card>>,\n  id: Scalars['ID'],\n  title?: Maybe<Scalars['String']>,\n  description?: Maybe<Scalars['String']>,\n};\n\nexport type GeneralPayload = {\n   __typename?: 'GeneralPayload',\n  fieldErrors?: Maybe<Array<Maybe<EntityFieldError>>>,\n  messages: Array<Scalars['String']>,\n  success: Scalars['Boolean'],\n};\n\n\nexport type GroupField = Field & {\n   __typename?: 'GroupField',\n  id: Scalars['ID'],\n  order?: Maybe<Scalars['Int']>,\n  grid?: Maybe<Scalars['Grid']>,\n  label?: Maybe<Scalars['String']>,\n  name?: Maybe<Scalars['String']>,\n  fields?: Maybe<Array<Field>>,\n};\n\nexport type HaTypeVisit = {\n   __typename?: 'HATypeVisit',\n  id: Scalars['ID'],\n  typeVisitId: Scalars['Int'],\n  visitName: Scalars['String'],\n};\n\nexport type IncidentDetail = {\n   __typename?: 'IncidentDetail',\n  asbestos?: Maybe<Scalars['Boolean']>,\n  cATCode?: Maybe<CatCode>,\n  category?: Maybe<ClaimCategory>,\n  eventType?: Maybe<IncidentEvent>,\n  habitableProperty?: Maybe<Scalars['Boolean']>,\n  hold: Scalars['Boolean'],\n  incidentDate?: Maybe<Scalars['DateString']>,\n  makeSafeRequired: Scalars['Boolean'],\n  riskAddress?: Maybe<Address>,\n};\n\nexport type IncidentDetailNewType = {\n  eventTypeId: Scalars['ID'],\n  catCodeId: Scalars['ID'],\n  habitableProperty?: Maybe<Scalars['Boolean']>,\n  asbestos?: Maybe<Scalars['Boolean']>,\n  hold?: Maybe<Scalars['Boolean']>,\n  makeSafeRequired: Scalars['Boolean'],\n  incidentDate: Scalars['DateString'],\n  riskAddress: AddressInput,\n  category?: Maybe<ClaimCategory>,\n};\n\nexport type IncidentEvent = {\n   __typename?: 'IncidentEvent',\n  eventName: Scalars['String'],\n  eventTypeId: Scalars['Int'],\n};\n\nexport type InfoField = Field & {\n   __typename?: 'InfoField',\n  id: Scalars['ID'],\n  order?: Maybe<Scalars['Int']>,\n  grid?: Maybe<Scalars['Grid']>,\n  label?: Maybe<Scalars['String']>,\n  value?: Maybe<Scalars['String']>,\n};\n\nexport type InternalAssesor = {\n   __typename?: 'InternalAssesor',\n  assesorId: Scalars['Int'],\n  assesorName: Scalars['String'],\n  id: Scalars['ID'],\n};\n\nexport type InternalAssesorConnection = {\n   __typename?: 'InternalAssesorConnection',\n  edges?: Maybe<Array<Maybe<InternalAssesorEdge>>>,\n  items?: Maybe<Array<Maybe<InternalAssesor>>>,\n  pageInfo: PageInfo,\n  totalCount?: Maybe<Scalars['Int']>,\n};\n\nexport type InternalAssesorEdge = {\n   __typename?: 'InternalAssesorEdge',\n  cursor: Scalars['String'],\n  node?: Maybe<InternalAssesor>,\n};\n\nexport type JobContentAuthoriseInput = {\n  authorisedItems: Array<Scalars['Int']>,\n  deliveryChargeUsed: Scalars['Boolean'],\n};\n\nexport type JobContentItemCreate = {\n  costCentreId: Scalars['Int'],\n  costItemId: Scalars['Int'],\n  lineDescription: Scalars['String'],\n  locationId: Scalars['Int'],\n  dimensions?: Maybe<Scalars['String']>,\n  proofOfLoss?: Maybe<Scalars['String']>,\n  directsupply?: Maybe<Scalars['Boolean']>,\n  purchasePrice?: Maybe<Scalars['String']>,\n  ageOfItem?: Maybe<Scalars['String']>,\n  policyLimit?: Maybe<Scalars['Decimal']>,\n  qty: Scalars['Decimal'],\n  rate: Scalars['Decimal'],\n};\n\nexport type JobContentItemsCreate = {\n  jobQuoteId: Scalars['Int'],\n  items?: Maybe<Array<Maybe<JobContentItemCreate>>>,\n};\n\nexport type JobContentRemoveAuthorityInput = {\n  items: Array<Scalars['Int']>,\n};\n\nexport type JobMakeSafe = {\n   __typename?: 'JobMakeSafe',\n  approvedDate?: Maybe<Scalars['DateTimeString']>,\n  completed: Scalars['Boolean'],\n  description: Scalars['String'],\n  gst?: Maybe<Scalars['Decimal']>,\n  id: Scalars['ID'],\n  invoiced: Scalars['Boolean'],\n  lineItems?: Maybe<Array<Maybe<JobMakeSafeItem>>>,\n  logdate: Scalars['DateString'],\n  makeSafeId: Scalars['Int'],\n  margin?: Maybe<Scalars['Decimal']>,\n  portfolioType?: Maybe<PortfolioType>,\n  quoteStatus?: Maybe<ClaimStatus>,\n  requestScopePriceAdjust: Scalars['Boolean'],\n  reviewed: Scalars['Boolean'],\n  subtotal?: Maybe<Scalars['Decimal']>,\n  supplier?: Maybe<Company>,\n  total?: Maybe<Scalars['Decimal']>,\n};\n\nexport type JobMakeSafeConnection = {\n   __typename?: 'JobMakeSafeConnection',\n  edges?: Maybe<Array<Maybe<JobMakeSafeEdge>>>,\n  items?: Maybe<Array<Maybe<JobMakeSafe>>>,\n  pageInfo: PageInfo,\n  totalCount?: Maybe<Scalars['Int']>,\n};\n\nexport type JobMakeSafeEdge = {\n   __typename?: 'JobMakeSafeEdge',\n  cursor: Scalars['String'],\n  node?: Maybe<JobMakeSafe>,\n};\n\nexport type JobMakeSafeIndex = {\n  id?: Maybe<Array<Maybe<Scalars['Int']>>>,\n  claimId?: Maybe<Scalars['ID']>,\n  createDateFrom?: Maybe<Scalars['Date']>,\n  createDateTo?: Maybe<Scalars['Date']>,\n  portfolios?: Maybe<Array<Maybe<PortfolioType>>>,\n};\n\nexport type JobMakeSafeItem = {\n   __typename?: 'JobMakeSafeItem',\n  costCentre?: Maybe<QuoteCostCentre>,\n  costItem?: Maybe<QuoteCostItem>,\n  dimensions?: Maybe<Scalars['String']>,\n  gst?: Maybe<Scalars['Decimal']>,\n  id: Scalars['ID'],\n  lineDescription: Scalars['String'],\n  location?: Maybe<QuoteCostLocation>,\n  logdate: Scalars['DateString'],\n  makeSafeId: Scalars['Int'],\n  makeSafeItemId: Scalars['Int'],\n  margin?: Maybe<Scalars['Decimal']>,\n  marginRate: Scalars['Decimal'],\n  qty: Scalars['Decimal'],\n  rate?: Maybe<Scalars['Decimal']>,\n  subtotal?: Maybe<Scalars['Decimal']>,\n  total?: Maybe<Scalars['Decimal']>,\n  unit?: Maybe<QuoteItemUnit>,\n};\n\nexport type JobMakeSafeItemPayload = {\n   __typename?: 'JobMakeSafeItemPayload',\n  fieldErrors?: Maybe<Array<Maybe<EntityFieldError>>>,\n  messages: Array<Scalars['String']>,\n  result?: Maybe<JobMakeSafeItem>,\n  success: Scalars['Boolean'],\n};\n\nexport type JobMakeSafeItemsCreate = {\n  claimId: Scalars['ID'],\n  portfolioType: PortfolioType,\n  items?: Maybe<Array<Maybe<QuoteItemCreate>>>,\n};\n\nexport type JobMakeSafeItemsPayload = {\n   __typename?: 'JobMakeSafeItemsPayload',\n  fieldErrors?: Maybe<Array<Maybe<EntityFieldError>>>,\n  messages: Array<Scalars['String']>,\n  result?: Maybe<Array<Maybe<JobMakeSafeItem>>>,\n  success: Scalars['Boolean'],\n};\n\nexport type JobMakeSafePayload = {\n   __typename?: 'JobMakeSafePayload',\n  fieldErrors?: Maybe<Array<Maybe<EntityFieldError>>>,\n  messages: Array<Scalars['String']>,\n  result?: Maybe<JobMakeSafe>,\n  success: Scalars['Boolean'],\n};\n\nexport type JobProgress = {\n   __typename?: 'JobProgress',\n  claimJobId: Scalars['Int'],\n  completed: Scalars['Boolean'],\n  id: Scalars['ID'],\n  jobProgressId: Scalars['Int'],\n  jobQuoteId?: Maybe<Scalars['Int']>,\n  logdate?: Maybe<Scalars['DateTimeString']>,\n  portfolioType?: Maybe<PortfolioType>,\n  status?: Maybe<ClaimJobStatusInfo>,\n  statusdate?: Maybe<Scalars['DateTimeString']>,\n  user?: Maybe<User>,\n};\n\nexport type JobProgressConnection = {\n   __typename?: 'JobProgressConnection',\n  edges?: Maybe<Array<Maybe<JobProgressEdge>>>,\n  items?: Maybe<Array<Maybe<JobProgress>>>,\n  pageInfo: PageInfo,\n  totalCount?: Maybe<Scalars['Int']>,\n};\n\nexport type JobProgressEdge = {\n   __typename?: 'JobProgressEdge',\n  cursor: Scalars['String'],\n  node?: Maybe<JobProgress>,\n};\n\nexport type JobProgressPayload = {\n   __typename?: 'JobProgressPayload',\n  fieldErrors?: Maybe<Array<Maybe<EntityFieldError>>>,\n  messages: Array<Scalars['String']>,\n  result?: Maybe<JobProgress>,\n  success: Scalars['Boolean'],\n};\n\nexport type JobQuote = {\n   __typename?: 'JobQuote',\n  approved?: Maybe<Scalars['Boolean']>,\n  approvedDate?: Maybe<Scalars['DateTimeString']>,\n  collectExcess?: Maybe<Scalars['Boolean']>,\n  completed: Scalars['Boolean'],\n  contentsInitialCall?: Maybe<Scalars['Boolean']>,\n  contentsInitialCallDate?: Maybe<Scalars['DateTimeString']>,\n  contentsValidationService?: Maybe<Scalars['Boolean']>,\n  costCentres?: Maybe<Array<Maybe<JobQuoteItemCostCentreGroup>>>,\n  deliveryCharges?: Maybe<Scalars['Decimal']>,\n  deliveryChargeUsed: Scalars['Boolean'],\n  description: Scalars['String'],\n  estimatedTimeForRepairs?: Maybe<Scalars['String']>,\n  gst?: Maybe<Scalars['Decimal']>,\n  id: Scalars['ID'],\n  jobQuoteId: Scalars['Int'],\n  lineItems?: Maybe<Array<Maybe<JobQuoteItem>>>,\n  logdate: Scalars['DateString'],\n  margin?: Maybe<Scalars['Decimal']>,\n  notAcceptedItems?: Maybe<Array<Maybe<JobQuoteItem>>>,\n  originalTotal?: Maybe<Scalars['Decimal']>,\n  portfolioType?: Maybe<PortfolioType>,\n  quoteJobStatus?: Maybe<ClaimStatus>,\n  quoteStatus?: Maybe<ClaimStatus>,\n  quoteType?: Maybe<QuoteRequestType>,\n  recommended: Scalars['Boolean'],\n  requestScopePriceAdjust?: Maybe<Scalars['Boolean']>,\n  reviewed: Scalars['Boolean'],\n  sirGst?: Maybe<Scalars['Decimal']>,\n  sirMargin?: Maybe<Scalars['Decimal']>,\n  sirSubtotal?: Maybe<Scalars['Decimal']>,\n  sirTotal?: Maybe<Scalars['Decimal']>,\n  startAfterContractReceived?: Maybe<Scalars['String']>,\n  subtotal?: Maybe<Scalars['Decimal']>,\n  supplier?: Maybe<Company>,\n  total?: Maybe<Scalars['Decimal']>,\n};\n\nexport type JobQuoteAuthoriseInput = {\n  notAcceptedItemIds?: Maybe<Array<Maybe<Scalars['Int']>>>,\n};\n\nexport type JobQuoteCompleteInput = {\n  startAfterContractReceived?: Maybe<Scalars['String']>,\n  estimatedTimeForRepairs?: Maybe<Scalars['String']>,\n  deliveryCharges?: Maybe<Scalars['Decimal']>,\n  claimRecommendationId?: Maybe<Scalars['Byte']>,\n};\n\nexport type JobQuoteConnection = {\n   __typename?: 'JobQuoteConnection',\n  edges?: Maybe<Array<Maybe<JobQuoteEdge>>>,\n  items?: Maybe<Array<Maybe<JobQuote>>>,\n  pageInfo: PageInfo,\n  totalCount?: Maybe<Scalars['Int']>,\n};\n\nexport type JobQuoteEdge = {\n   __typename?: 'JobQuoteEdge',\n  cursor: Scalars['String'],\n  node?: Maybe<JobQuote>,\n};\n\nexport type JobQuoteIndex = {\n  id?: Maybe<Array<Maybe<Scalars['Int']>>>,\n  claimId?: Maybe<Scalars['ID']>,\n  createDateFrom?: Maybe<Scalars['Date']>,\n  createDateTo?: Maybe<Scalars['Date']>,\n  portfolios?: Maybe<Array<Maybe<PortfolioType>>>,\n  requestTypes?: Maybe<Array<Maybe<QuoteRequestType>>>,\n  requestCategory?: Maybe<RequestCategory>,\n};\n\nexport type JobQuoteItem = {\n   __typename?: 'JobQuoteItem',\n  accepted: Scalars['Boolean'],\n  ageOfItem?: Maybe<Scalars['String']>,\n  authorised?: Maybe<Scalars['Boolean']>,\n  authorisedDate?: Maybe<Scalars['DateTimeString']>,\n  authorisedSupplierId?: Maybe<Scalars['Int']>,\n  costCentre?: Maybe<QuoteCostCentre>,\n  costItem?: Maybe<QuoteCostItem>,\n  dimensions?: Maybe<Scalars['String']>,\n  directsupply: Scalars['Boolean'],\n  gst?: Maybe<Scalars['Decimal']>,\n  id: Scalars['ID'],\n  jobQuoteId: Scalars['Int'],\n  jobQuoteItemId: Scalars['Int'],\n  lineDescription: Scalars['String'],\n  location?: Maybe<QuoteCostLocation>,\n  logdate: Scalars['DateString'],\n  margin?: Maybe<Scalars['Decimal']>,\n  marginRate: Scalars['Decimal'],\n  policyLimit?: Maybe<Scalars['Decimal']>,\n  proofOfLoss?: Maybe<Scalars['String']>,\n  purchasePrice?: Maybe<Scalars['String']>,\n  qty: Scalars['Decimal'],\n  rate?: Maybe<Scalars['Decimal']>,\n  requestedQuote: Scalars['Boolean'],\n  scopeItemId?: Maybe<Scalars['Int']>,\n  sirGst?: Maybe<Scalars['Decimal']>,\n  sirMargin?: Maybe<Scalars['Decimal']>,\n  sirMarginRate: Scalars['String'],\n  sirRate?: Maybe<Scalars['Decimal']>,\n  sirSubtotal?: Maybe<Scalars['Decimal']>,\n  sirTotal?: Maybe<Scalars['Decimal']>,\n  substitutename?: Maybe<Scalars['String']>,\n  subtotal?: Maybe<Scalars['Decimal']>,\n  total?: Maybe<Scalars['Decimal']>,\n  unit?: Maybe<QuoteItemUnit>,\n};\n\nexport type JobQuoteItemCostCentreGroup = {\n   __typename?: 'JobQuoteItemCostCentreGroup',\n  costCentre?: Maybe<QuoteCostCentre>,\n  firstLineItemId: Scalars['Int'],\n  id: Scalars['ID'],\n  sirSubtotal?: Maybe<Scalars['Decimal']>,\n  subtotal?: Maybe<Scalars['Decimal']>,\n};\n\nexport type JobQuoteItemPayload = {\n   __typename?: 'JobQuoteItemPayload',\n  fieldErrors?: Maybe<Array<Maybe<EntityFieldError>>>,\n  messages: Array<Scalars['String']>,\n  result?: Maybe<JobQuoteItem>,\n  success: Scalars['Boolean'],\n};\n\nexport type JobQuoteItemsCreate = {\n  jobQuoteId: Scalars['Int'],\n  portfolioType: PortfolioType,\n  items?: Maybe<Array<Maybe<QuoteItemCreate>>>,\n};\n\nexport type JobQuoteItemsPayload = {\n   __typename?: 'JobQuoteItemsPayload',\n  fieldErrors?: Maybe<Array<Maybe<EntityFieldError>>>,\n  messages: Array<Scalars['String']>,\n  result?: Maybe<Array<Maybe<JobQuoteItem>>>,\n  success: Scalars['Boolean'],\n};\n\nexport type JobQuoteItemUpdate = {\n  costCentreId?: Maybe<Scalars['Int']>,\n  costItemId?: Maybe<Scalars['Int']>,\n  locationId?: Maybe<Scalars['Int']>,\n  dimensions?: Maybe<Scalars['String']>,\n  lineDescription?: Maybe<Scalars['String']>,\n  qty?: Maybe<Scalars['Decimal']>,\n  rate?: Maybe<Scalars['Decimal']>,\n  proofOfLoss?: Maybe<Scalars['String']>,\n  directsupply?: Maybe<Scalars['Boolean']>,\n  purchasePrice?: Maybe<Scalars['String']>,\n  ageOfItem?: Maybe<Scalars['String']>,\n  policyLimit?: Maybe<Scalars['Decimal']>,\n  substitutename?: Maybe<Scalars['String']>,\n};\n\nexport type JobQuotePayload = {\n   __typename?: 'JobQuotePayload',\n  fieldErrors?: Maybe<Array<Maybe<EntityFieldError>>>,\n  messages: Array<Scalars['String']>,\n  result?: Maybe<JobQuote>,\n  success: Scalars['Boolean'],\n};\n\nexport enum JobRecommendationStatus {\n  NotRecommended = 'NotRecommended'\n}\n\nexport type JobSupplier = {\n   __typename?: 'JobSupplier',\n  authorised: Scalars['Boolean'],\n  id: Scalars['ID'],\n  jobSupplierId: Scalars['Int'],\n  quote?: Maybe<JobQuote>,\n  quoteSubmitDate?: Maybe<Scalars['Date']>,\n  requestDate?: Maybe<Scalars['DateString']>,\n  requestType?: Maybe<Scalars['String']>,\n  supplier?: Maybe<Company>,\n};\n\nexport type JobVariation = {\n   __typename?: 'JobVariation',\n  approvedDate?: Maybe<Scalars['DateTimeString']>,\n  completed: Scalars['Boolean'],\n  completedDate?: Maybe<Scalars['DateTimeString']>,\n  description: Scalars['String'],\n  gst?: Maybe<Scalars['Decimal']>,\n  id: Scalars['ID'],\n  lineItems?: Maybe<Array<Maybe<JobVariationItem>>>,\n  logdate: Scalars['DateString'],\n  margin?: Maybe<Scalars['Decimal']>,\n  notAcceptedItems?: Maybe<Array<Maybe<JobVariationItem>>>,\n  portfolioType?: Maybe<PortfolioType>,\n  quoteId?: Maybe<Scalars['Int']>,\n  subtotal?: Maybe<Scalars['Decimal']>,\n  supplier?: Maybe<Company>,\n  total?: Maybe<Scalars['Decimal']>,\n  variationDescription: Scalars['String'],\n  variationId: Scalars['Int'],\n  variationReason?: Maybe<JobVariationReason>,\n  variationStatus?: Maybe<Scalars['String']>,\n  variationTitle: Scalars['String'],\n};\n\nexport type JobVariationAuditInput = {\n  notAcceptedItemIds?: Maybe<Array<Maybe<Scalars['Int']>>>,\n  auditToStatus: JobVariationStatus,\n};\n\nexport type JobVariationConnection = {\n   __typename?: 'JobVariationConnection',\n  edges?: Maybe<Array<Maybe<JobVariationEdge>>>,\n  items?: Maybe<Array<Maybe<JobVariation>>>,\n  pageInfo: PageInfo,\n  totalCount?: Maybe<Scalars['Int']>,\n};\n\nexport type JobVariationCreate = {\n  variationTitle: Scalars['String'],\n  variationDescription: Scalars['String'],\n  variationReasonId: Scalars['Int'],\n  claimJobId: Scalars['ID'],\n  portfolioType?: Maybe<PortfolioType>,\n};\n\nexport type JobVariationEdge = {\n   __typename?: 'JobVariationEdge',\n  cursor: Scalars['String'],\n  node?: Maybe<JobVariation>,\n};\n\nexport type JobVariationIndex = {\n  id?: Maybe<Array<Maybe<Scalars['Int']>>>,\n  claimId?: Maybe<Scalars['ID']>,\n  createDateFrom?: Maybe<Scalars['Date']>,\n  createDateTo?: Maybe<Scalars['Date']>,\n  portfolios?: Maybe<Array<Maybe<PortfolioType>>>,\n};\n\nexport type JobVariationItem = {\n   __typename?: 'JobVariationItem',\n  accepted: Scalars['Boolean'],\n  costCentre?: Maybe<QuoteCostCentre>,\n  costItem?: Maybe<QuoteCostItem>,\n  dimensions?: Maybe<Scalars['String']>,\n  gst?: Maybe<Scalars['Decimal']>,\n  id: Scalars['ID'],\n  lineDescription: Scalars['String'],\n  location?: Maybe<QuoteCostLocation>,\n  logdate: Scalars['DateString'],\n  margin?: Maybe<Scalars['Decimal']>,\n  marginRate: Scalars['Decimal'],\n  qty: Scalars['Decimal'],\n  rate?: Maybe<Scalars['Decimal']>,\n  subtotal?: Maybe<Scalars['Decimal']>,\n  total?: Maybe<Scalars['Decimal']>,\n  unit?: Maybe<QuoteItemUnit>,\n  variationId: Scalars['Int'],\n  variationItemId: Scalars['Int'],\n};\n\nexport type JobVariationItemPayload = {\n   __typename?: 'JobVariationItemPayload',\n  fieldErrors?: Maybe<Array<Maybe<EntityFieldError>>>,\n  messages: Array<Scalars['String']>,\n  result?: Maybe<JobVariationItem>,\n  success: Scalars['Boolean'],\n};\n\nexport type JobVariationItemsCreate = {\n  variationId: Scalars['Int'],\n  portfolioType: PortfolioType,\n  items?: Maybe<Array<Maybe<QuoteItemCreate>>>,\n};\n\nexport type JobVariationItemsPayload = {\n   __typename?: 'JobVariationItemsPayload',\n  fieldErrors?: Maybe<Array<Maybe<EntityFieldError>>>,\n  messages: Array<Scalars['String']>,\n  result?: Maybe<Array<Maybe<JobVariationItem>>>,\n  success: Scalars['Boolean'],\n};\n\nexport type JobVariationPayload = {\n   __typename?: 'JobVariationPayload',\n  fieldErrors?: Maybe<Array<Maybe<EntityFieldError>>>,\n  messages: Array<Scalars['String']>,\n  result?: Maybe<JobVariation>,\n  success: Scalars['Boolean'],\n};\n\nexport type JobVariationReason = {\n   __typename?: 'JobVariationReason',\n  reasonDescription: Scalars['String'],\n  variationReasonId?: Maybe<Scalars['Byte']>,\n};\n\nexport enum JobVariationStatus {\n  Pending = 'Pending',\n  Approved = 'Approved',\n  Rejected = 'Rejected',\n  Reset = 'Reset'\n}\n\nexport type JobWorkOrder = {\n   __typename?: 'JobWorkOrder',\n  approvedDate?: Maybe<Scalars['DateTimeString']>,\n  costCentres?: Maybe<Array<Maybe<JobWorkOrderItemCostCentreGroup>>>,\n  description: Scalars['String'],\n  gst?: Maybe<Scalars['Decimal']>,\n  id: Scalars['ID'],\n  jobWorkOrderId: Scalars['Int'],\n  lineItems?: Maybe<Array<Maybe<JobWorkOrderItem>>>,\n  logdate: Scalars['DateString'],\n  margin?: Maybe<Scalars['Decimal']>,\n  portfolioType?: Maybe<PortfolioType>,\n  quoteStatus?: Maybe<ClaimStatus>,\n  subtotal?: Maybe<Scalars['Decimal']>,\n  supplier?: Maybe<Company>,\n  total?: Maybe<Scalars['Decimal']>,\n};\n\nexport type JobWorkOrderConnection = {\n   __typename?: 'JobWorkOrderConnection',\n  edges?: Maybe<Array<Maybe<JobWorkOrderEdge>>>,\n  items?: Maybe<Array<Maybe<JobWorkOrder>>>,\n  pageInfo: PageInfo,\n  totalCount?: Maybe<Scalars['Int']>,\n};\n\nexport type JobWorkOrderDateInput = {\n  startDate?: Maybe<Scalars['DateString']>,\n  completeDate?: Maybe<Scalars['DateString']>,\n};\n\nexport type JobWorkOrderEdge = {\n   __typename?: 'JobWorkOrderEdge',\n  cursor: Scalars['String'],\n  node?: Maybe<JobWorkOrder>,\n};\n\nexport type JobWorkOrderIndex = {\n  id?: Maybe<Array<Maybe<Scalars['Int']>>>,\n  claimId?: Maybe<Scalars['ID']>,\n  createDateFrom?: Maybe<Scalars['Date']>,\n  createDateTo?: Maybe<Scalars['Date']>,\n  portfolios?: Maybe<Array<Maybe<PortfolioType>>>,\n};\n\nexport type JobWorkOrderItem = {\n   __typename?: 'JobWorkOrderItem',\n  completeDate?: Maybe<Scalars['DateString']>,\n  costCentre?: Maybe<QuoteCostCentre>,\n  costItem?: Maybe<QuoteCostItem>,\n  dimensions?: Maybe<Scalars['String']>,\n  gst?: Maybe<Scalars['Decimal']>,\n  id: Scalars['ID'],\n  jobWorkOrderId: Scalars['Int'],\n  jobWorkOrderItemId: Scalars['Int'],\n  lineDescription: Scalars['String'],\n  location?: Maybe<QuoteCostLocation>,\n  logdate: Scalars['DateString'],\n  margin?: Maybe<Scalars['Decimal']>,\n  marginRate: Scalars['Decimal'],\n  qty: Scalars['Decimal'],\n  rate?: Maybe<Scalars['Decimal']>,\n  startDate?: Maybe<Scalars['DateString']>,\n  subtotal?: Maybe<Scalars['Decimal']>,\n  total?: Maybe<Scalars['Decimal']>,\n  unit?: Maybe<QuoteItemUnit>,\n};\n\nexport type JobWorkOrderItemCostCentreGroup = {\n   __typename?: 'JobWorkOrderItemCostCentreGroup',\n  completeDate?: Maybe<Scalars['DateString']>,\n  costCentre?: Maybe<QuoteCostCentre>,\n  firstLineItemId: Scalars['Int'],\n  id: Scalars['ID'],\n  startDate?: Maybe<Scalars['DateString']>,\n  subtotal?: Maybe<Scalars['Decimal']>,\n};\n\nexport type JobWorkOrderItemCostCentreGroupPayload = {\n   __typename?: 'JobWorkOrderItemCostCentreGroupPayload',\n  fieldErrors?: Maybe<Array<Maybe<EntityFieldError>>>,\n  messages: Array<Scalars['String']>,\n  result?: Maybe<JobWorkOrderItemCostCentreGroup>,\n  success: Scalars['Boolean'],\n};\n\nexport type JobWorkProgressInput = {\n  claimJobId: Scalars['ID'],\n  statusDate?: Maybe<Scalars['Date']>,\n  portfolioType: PortfolioType,\n};\n\n\nexport enum LogLevel {\n  Trace = 'Trace',\n  Debug = 'Debug',\n  Information = 'Information',\n  Warning = 'Warning',\n  Error = 'Error',\n  Critical = 'Critical',\n  None = 'None'\n}\n\nexport type LossAdjusterReportType = {\n   __typename?: 'LossAdjusterReportType',\n  reportTypeId?: Maybe<Scalars['Byte']>,\n  reportTypeName: Scalars['String'],\n};\n\nexport type MakeInitialCallInput = {\n  note?: Maybe<Scalars['String']>,\n};\n\n\nexport type Mutation = {\n   __typename?: 'Mutation',\n  adjusterInitialCall?: Maybe<ClaimJobPayload>,\n  adjusterMakeAppointment?: Maybe<ClaimJobPayload>,\n  claimAcceptRequest?: Maybe<ClaimPortfolioPayload>,\n  claimAddPortfolio?: Maybe<ClaimPortfolioPayload>,\n  claimAwaitingInfo?: Maybe<ClaimPortfolioPayload>,\n  claimCancelAwaitingInfo?: Maybe<ClaimPortfolioPayload>,\n  claimCaseSettleCreate?: Maybe<GeneralPayload>,\n  claimCommunicationAcknoledge?: Maybe<ClaimCommunicationPayload>,\n  claimDeclineRequest?: Maybe<ClaimPortfolioPayload>,\n  claimFinalise?: Maybe<ClaimPortfolioPayload>,\n  claimFollowUp?: Maybe<GeneralPayload>,\n  claimInitialCall?: Maybe<ClaimPortfolioPayload>,\n  claimMakeAppointment?: Maybe<ClaimPortfolioPayload>,\n  claimMakeSafeAppointment?: Maybe<ClaimPortfolioPayload>,\n  claimMakeSafeComplete?: Maybe<ClaimPortfolioPayload>,\n  claimMakeSafeInitialCall?: Maybe<ClaimPortfolioPayload>,\n  claimReallocateScopingSupplier?: Maybe<ClaimPortfolioPayload>,\n  claimRequestCostedScope?: Maybe<ClaimPortfolioPayload>,\n  claimRequestQuotes?: Maybe<ClaimPortfolioPayload>,\n  claimReserveUpdate?: Maybe<GeneralPayload>,\n  claimResetFinalise?: Maybe<ClaimPortfolioPayload>,\n  createClaimCommunication?: Maybe<ClaimCommunicationPayload>,\n  createClaimDocument?: Maybe<ClaimDocumentPayload>,\n  createClaimJob?: Maybe<ClaimJobPayload>,\n  createClaimLossAdjusterDocument?: Maybe<ClaimLossAdjusterDocumentPayload>,\n  createClaimNote?: Maybe<ClaimNotePayload>,\n  createJobContentItems?: Maybe<JobQuoteItemsPayload>,\n  createJobMakeSafeItems?: Maybe<JobMakeSafeItemsPayload>,\n  createJobQuoteItems?: Maybe<JobQuoteItemsPayload>,\n  createJobVariation?: Maybe<JobVariationPayload>,\n  createJobVariationItems?: Maybe<JobVariationItemsPayload>,\n  createJobWorkProgress?: Maybe<JobProgressPayload>,\n  csvProduceForJobQuote?: Maybe<GeneralPayload>,\n  deleteClaimDocument?: Maybe<GeneralPayload>,\n  deleteClaimLossAdjusterDocument?: Maybe<GeneralPayload>,\n  deleteJobMakeSafeItem?: Maybe<GeneralPayload>,\n  deleteJobQuoteItem?: Maybe<GeneralPayload>,\n  deleteJobVariationItem?: Maybe<GeneralPayload>,\n  estimatorCreate?: Maybe<EstimatorPayload>,\n  estimatorUpdate?: Maybe<EstimatorPayload>,\n  feeInvoiceDelete?: Maybe<FeeInvoicePayload>,\n  feeInvoiceUpdate?: Maybe<FeeInvoicePayload>,\n  feeInvoiceUpload?: Maybe<FeeInvoicePayload>,\n  feeItemCreate?: Maybe<FeeItemPayload>,\n  feeItemDelete?: Maybe<FeeItemPayload>,\n  feeItemEdit?: Maybe<FeeItemPayload>,\n  jobContentAuthorise?: Maybe<JobQuotePayload>,\n  jobContentComplete?: Maybe<JobQuotePayload>,\n  jobContentInitialCall?: Maybe<JobQuoteItemPayload>,\n  jobContentRemoveAuthority?: Maybe<JobQuotePayload>,\n  jobMakeSafeQuoteComplete?: Maybe<JobMakeSafePayload>,\n  jobMakeSafeQuoteReset?: Maybe<JobMakeSafePayload>,\n  jobQuoteAuthorise?: Maybe<JobQuotePayload>,\n  jobQuoteComplete?: Maybe<JobQuotePayload>,\n  jobQuoteRecommend?: Maybe<JobQuotePayload>,\n  jobQuoteReset?: Maybe<JobQuotePayload>,\n  jobQuoteReview?: Maybe<JobQuotePayload>,\n  jobVariationAudit?: Maybe<JobVariationPayload>,\n  jobVariationComplete?: Maybe<JobVariationPayload>,\n  pdfProduceForAdjusterDocuments?: Maybe<GeneralPayload>,\n  pdfProduceForClaimDocuments?: Maybe<GeneralPayload>,\n  pdfProduceForJobQuote?: Maybe<GeneralPayload>,\n  pdfProduceForMakeSafe?: Maybe<GeneralPayload>,\n  pdfProduceForSiteReport?: Maybe<GeneralPayload>,\n  pdfProduceForVariation?: Maybe<GeneralPayload>,\n  specialistRequestCreate?: Maybe<SpecialistRequestPayload>,\n  specialistRequestDelete?: Maybe<SpecialistRequestPayload>,\n  specialistRequestEdit?: Maybe<SpecialistRequestPayload>,\n  supervisorCreate?: Maybe<SupervisorPayload>,\n  supervisorUpdate?: Maybe<SupervisorPayload>,\n  updateClaimJob?: Maybe<ClaimJobPayload>,\n  updateJobContentItem?: Maybe<JobQuoteItemPayload>,\n  updateJobMakeSafeItem?: Maybe<JobMakeSafeItemPayload>,\n  updateJobQuoteItem?: Maybe<JobQuoteItemPayload>,\n  updateJobVariationItem?: Maybe<JobVariationItemPayload>,\n  updateJobWorkDate?: Maybe<JobWorkOrderItemCostCentreGroupPayload>,\n  updateSiteReport?: Maybe<GeneralPayload>,\n  userAuthenticateAllServer?: Maybe<Array<Maybe<UserValidation>>>,\n  userLogout?: Maybe<GeneralPayload>,\n  userRenewToken?: Maybe<UserValidation>,\n  userServiceToken?: Maybe<ServiceValidation>,\n  claimReportUpsert: Report,\n  claimReportSubmit: Report,\n  claimReportReset: Report,\n};\n\n\nexport type MutationAdjusterInitialCallArgs = {\n  input?: Maybe<MakeInitialCallInput>,\n  where: ClaimUniqueWhere\n};\n\n\nexport type MutationAdjusterMakeAppointmentArgs = {\n  input: AppointmentInput,\n  where: ClaimUniqueWhere\n};\n\n\nexport type MutationClaimAcceptRequestArgs = {\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationClaimAddPortfolioArgs = {\n  input: AddPortfolioInput,\n  where: EnDataEntityKey\n};\n\n\nexport type MutationClaimAwaitingInfoArgs = {\n  input: AwaitingInfoClaimInputType,\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationClaimCancelAwaitingInfoArgs = {\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationClaimCaseSettleCreateArgs = {\n  input: ClaimCashSettleInput\n};\n\n\nexport type MutationClaimCommunicationAcknoledgeArgs = {\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationClaimDeclineRequestArgs = {\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationClaimFinaliseArgs = {\n  input: FinaliseClaimInput,\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationClaimFollowUpArgs = {\n  input: FollowUpClaimInputType,\n  where: EnDataEntityKey\n};\n\n\nexport type MutationClaimInitialCallArgs = {\n  input?: Maybe<MakeInitialCallInput>,\n  where: EnDataEntityKey\n};\n\n\nexport type MutationClaimMakeAppointmentArgs = {\n  input: AppointmentInput,\n  where: EnDataEntityKey\n};\n\n\nexport type MutationClaimMakeSafeAppointmentArgs = {\n  input: AppointmentInput,\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationClaimMakeSafeCompleteArgs = {\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationClaimMakeSafeInitialCallArgs = {\n  input?: Maybe<MakeInitialCallInput>,\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationClaimReallocateScopingSupplierArgs = {\n  input: ReallocateScopingSupplierInput,\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationClaimRequestCostedScopeArgs = {\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationClaimRequestQuotesArgs = {\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationClaimReserveUpdateArgs = {\n  input: ClaimReserveInput,\n  where: ClaimUniqueWhere\n};\n\n\nexport type MutationClaimResetFinaliseArgs = {\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationCreateClaimCommunicationArgs = {\n  input: ClaimCommunicationCreate\n};\n\n\nexport type MutationCreateClaimDocumentArgs = {\n  input: ClaimDocumentCreate\n};\n\n\nexport type MutationCreateClaimJobArgs = {\n  input: ClaimJobCreate\n};\n\n\nexport type MutationCreateClaimLossAdjusterDocumentArgs = {\n  input: ClaimLossAdjusterDocumentCreate\n};\n\n\nexport type MutationCreateClaimNoteArgs = {\n  input: ClaimNoteCreate\n};\n\n\nexport type MutationCreateJobContentItemsArgs = {\n  input: JobContentItemsCreate\n};\n\n\nexport type MutationCreateJobMakeSafeItemsArgs = {\n  input: JobMakeSafeItemsCreate\n};\n\n\nexport type MutationCreateJobQuoteItemsArgs = {\n  input: JobQuoteItemsCreate\n};\n\n\nexport type MutationCreateJobVariationArgs = {\n  input: JobVariationCreate\n};\n\n\nexport type MutationCreateJobVariationItemsArgs = {\n  input: JobVariationItemsCreate\n};\n\n\nexport type MutationCreateJobWorkProgressArgs = {\n  input: JobWorkProgressInput\n};\n\n\nexport type MutationCsvProduceForJobQuoteArgs = {\n  where: JobQuoteIndex\n};\n\n\nexport type MutationDeleteClaimDocumentArgs = {\n  input: EnDataPortfolioKey\n};\n\n\nexport type MutationDeleteJobMakeSafeItemArgs = {\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationDeleteJobQuoteItemArgs = {\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationDeleteJobVariationItemArgs = {\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationEstimatorCreateArgs = {\n  input: EstimatorCreateInput\n};\n\n\nexport type MutationEstimatorUpdateArgs = {\n  input: EstimatorUpdateInput,\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationFeeInvoiceDeleteArgs = {\n  where: FeeInvoiceUniqueWhere\n};\n\n\nexport type MutationFeeInvoiceUpdateArgs = {\n  input: FeeInvoiceUpdateInput,\n  where: FeeInvoiceUniqueWhere\n};\n\n\nexport type MutationFeeInvoiceUploadArgs = {\n  input: FeeInvoiceUploadInput,\n  where: FeeInvoiceUploadWhere\n};\n\n\nexport type MutationFeeItemCreateArgs = {\n  input: FeeItemCreateInput\n};\n\n\nexport type MutationFeeItemDeleteArgs = {\n  where: FeeItemUniqueWhere\n};\n\n\nexport type MutationFeeItemEditArgs = {\n  input: FeeItemEditInput,\n  where: FeeItemUniqueWhere\n};\n\n\nexport type MutationJobContentAuthoriseArgs = {\n  where: EnDataEntityKey,\n  input: JobContentAuthoriseInput\n};\n\n\nexport type MutationJobContentCompleteArgs = {\n  where: EnDataEntityKey\n};\n\n\nexport type MutationJobContentInitialCallArgs = {\n  input?: Maybe<MakeInitialCallInput>,\n  where: EnDataEntityKey\n};\n\n\nexport type MutationJobContentRemoveAuthorityArgs = {\n  where: EnDataEntityKey,\n  input: JobContentRemoveAuthorityInput\n};\n\n\nexport type MutationJobMakeSafeQuoteCompleteArgs = {\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationJobMakeSafeQuoteResetArgs = {\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationJobQuoteAuthoriseArgs = {\n  where: EnDataPortfolioKey,\n  input?: Maybe<JobQuoteAuthoriseInput>\n};\n\n\nexport type MutationJobQuoteCompleteArgs = {\n  input?: Maybe<JobQuoteCompleteInput>,\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationJobQuoteRecommendArgs = {\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationJobQuoteResetArgs = {\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationJobQuoteReviewArgs = {\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationJobVariationAuditArgs = {\n  input: JobVariationAuditInput,\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationJobVariationCompleteArgs = {\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationPdfProduceForAdjusterDocumentsArgs = {\n  where: ClaimItemFilter\n};\n\n\nexport type MutationPdfProduceForClaimDocumentsArgs = {\n  where: ClaimItemFilter\n};\n\n\nexport type MutationPdfProduceForJobQuoteArgs = {\n  where: JobQuoteIndex\n};\n\n\nexport type MutationPdfProduceForMakeSafeArgs = {\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationPdfProduceForSiteReportArgs = {\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationPdfProduceForVariationArgs = {\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationSpecialistRequestCreateArgs = {\n  input: SpecialistRequestCreateInput\n};\n\n\nexport type MutationSpecialistRequestDeleteArgs = {\n  where: SpecialistRequestUniqueWhere\n};\n\n\nexport type MutationSpecialistRequestEditArgs = {\n  where: SpecialistRequestUniqueWhere,\n  input: SpecialistRequestEditInput\n};\n\n\nexport type MutationSupervisorCreateArgs = {\n  input: SupervisorCreateInput\n};\n\n\nexport type MutationSupervisorUpdateArgs = {\n  input: SupervisorUpdateInput,\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationUpdateClaimJobArgs = {\n  input: ClaimJobInput,\n  where: EnDataEntityKey\n};\n\n\nexport type MutationUpdateJobContentItemArgs = {\n  input: JobQuoteItemUpdate,\n  where: EnDataEntityKey\n};\n\n\nexport type MutationUpdateJobMakeSafeItemArgs = {\n  input: QuoteItemUpdate,\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationUpdateJobQuoteItemArgs = {\n  input: QuoteItemUpdate,\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationUpdateJobVariationItemArgs = {\n  input: QuoteItemUpdate,\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationUpdateJobWorkDateArgs = {\n  input: JobWorkOrderDateInput,\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationUpdateSiteReportArgs = {\n  input: SiteReportInput,\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationUserAuthenticateAllServerArgs = {\n  input: UserCredential\n};\n\n\nexport type MutationUserServiceTokenArgs = {\n  input: ServiceInput\n};\n\n\nexport type MutationClaimReportUpsertArgs = {\n  claimId: Scalars['ID'],\n  data: Scalars['Json']\n};\n\n\nexport type MutationClaimReportSubmitArgs = {\n  claimId: Scalars['ID']\n};\n\n\nexport type MutationClaimReportResetArgs = {\n  claimId: Scalars['ID']\n};\n\nexport type PageInfo = {\n   __typename?: 'PageInfo',\n  endCursor?: Maybe<Scalars['String']>,\n  hasNextPage: Scalars['Boolean'],\n  hasPreviousPage: Scalars['Boolean'],\n  startCursor?: Maybe<Scalars['String']>,\n};\n\nexport type PaymentMethod = {\n   __typename?: 'PaymentMethod',\n  id: Scalars['ID'],\n  name: Scalars['String'],\n  paymentMethodId: Scalars['Int'],\n};\n\nexport type PaymentMethodWhere = {\n  claimId: Scalars['ID'],\n};\n\nexport type PaymentType = {\n   __typename?: 'PaymentType',\n  id: Scalars['ID'],\n  name: Scalars['String'],\n  paymentTypeId: Scalars['Int'],\n};\n\nexport type PaymentTypeWhere = {\n  claimId: Scalars['ID'],\n  claimPortfolioType: PortfolioType,\n};\n\n\n\nexport type PolicyCover = {\n   __typename?: 'PolicyCover',\n  policyCoverId?: Maybe<Scalars['Short']>,\n  policyCoverName: Scalars['String'],\n};\n\nexport type PolicyType = {\n   __typename?: 'PolicyType',\n  policyTypeId?: Maybe<Scalars['Short']>,\n  policyTypeName: Scalars['String'],\n};\n\nexport enum PortfolioType {\n  Building = 'Building',\n  Contents = 'Contents',\n  Restoration = 'Restoration'\n}\n\nexport type PrivilegeAction = {\n   __typename?: 'PrivilegeAction',\n  nodeName: Scalars['String'],\n  privilegeCode: Scalars['String'],\n};\n\nexport type PrivilegeMenu = {\n   __typename?: 'PrivilegeMenu',\n  nodeName: Scalars['String'],\n  pages?: Maybe<Array<Maybe<PrivilegePage>>>,\n  privilegeCode: Scalars['String'],\n};\n\nexport type PrivilegePage = {\n   __typename?: 'PrivilegePage',\n  actions?: Maybe<Array<Maybe<PrivilegeAction>>>,\n  nodeName: Scalars['String'],\n  privilegeCode: Scalars['String'],\n};\n\nexport type Query = {\n   __typename?: 'Query',\n  _claimCategories: Array<Maybe<SelectOption>>,\n  _form?: Maybe<Form>,\n  _report?: Maybe<Report>,\n  _states: Array<Maybe<SelectOption>>,\n  claimCommuications?: Maybe<ClaimCommunicationConnection>,\n  claimDocuments?: Maybe<ClaimDocumentConnection>,\n  claimFilterOptions?: Maybe<Array<Maybe<FilterOption>>>,\n  claimFilters?: Maybe<Array<Maybe<FilterElement>>>,\n  claimJob?: Maybe<ClaimJob>,\n  claimJobs?: Maybe<ClaimJobConnection>,\n  claimLossAdjusterDocuments?: Maybe<ClaimLossAdjusterDocumentConnection>,\n  claimNextStep?: Maybe<Array<Maybe<ClaimJobStatusInfo>>>,\n  claimNotes?: Maybe<ClaimNoteConnection>,\n  claimParticipants?: Maybe<Array<Maybe<Company>>>,\n  communicationFilters?: Maybe<Array<Maybe<FilterElement>>>,\n  company?: Maybe<CompanyProfile>,\n  currentUser?: Maybe<AuthenticatedUser>,\n  dashboardFilters?: Maybe<Array<Maybe<FilterElement>>>,\n  dashboardWidgets?: Maybe<Array<Maybe<WidgetGraphType>>>,\n  dashboards?: Maybe<Array<Maybe<Dashboard>>>,\n  estimators?: Maybe<EstimatorConnection>,\n  feeCategories?: Maybe<Array<Maybe<FeeCategory>>>,\n  feeInvoice?: Maybe<FeeInvoice>,\n  feeInvoiceStatus?: Maybe<Array<Maybe<FeeInvoiceStatus>>>,\n  feeItem?: Maybe<FeeItem>,\n  feeItems?: Maybe<Array<Maybe<FeeItem>>>,\n  feePortfolios?: Maybe<Array<Maybe<FeePortfolio>>>,\n  internalAssessors?: Maybe<InternalAssesorConnection>,\n  jobMakeSafes?: Maybe<JobMakeSafeConnection>,\n  jobQuotes?: Maybe<JobQuoteConnection>,\n  jobVariationReasons?: Maybe<Array<Maybe<JobVariationReason>>>,\n  jobVariations?: Maybe<JobVariationConnection>,\n  jobWorkOrders?: Maybe<JobWorkOrderConnection>,\n  jobWorkProgresses?: Maybe<JobProgressConnection>,\n  me?: Maybe<User>,\n  paymentMethods?: Maybe<Array<Maybe<PaymentMethod>>>,\n  paymentTypes?: Maybe<Array<Maybe<PaymentType>>>,\n  quoteCostCentres?: Maybe<QuoteCostCentreConnection>,\n  quoteCostItems?: Maybe<QuoteCostItemConnection>,\n  quoteCostLocations?: Maybe<QuoteCostLocationConnection>,\n  reportingClaimJobGeneral?: Maybe<ClaimJobGeneralReportConnection>,\n  specialistCategories?: Maybe<Array<Maybe<SpecialistCategory>>>,\n  specialistRequests?: Maybe<Array<Maybe<SpecialistRequest>>>,\n  specialists?: Maybe<Array<Maybe<Company>>>,\n  supervisors?: Maybe<SupervisorConnection>,\n};\n\n\nexport type Query_FormArgs = {\n  id: Scalars['ID']\n};\n\n\nexport type Query_ReportArgs = {\n  claimId: Scalars['ID']\n};\n\n\nexport type QueryClaimCommuicationsArgs = {\n  after?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  where?: Maybe<CommunicationFilter>\n};\n\n\nexport type QueryClaimDocumentsArgs = {\n  after?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  where?: Maybe<ClaimItemFilter>\n};\n\n\nexport type QueryClaimFilterOptionsArgs = {\n  where?: Maybe<ClaimJobFilter>\n};\n\n\nexport type QueryClaimJobArgs = {\n  where: EnDataEntityKey\n};\n\n\nexport type QueryClaimJobsArgs = {\n  after?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  where?: Maybe<ClaimJobFilter>\n};\n\n\nexport type QueryClaimLossAdjusterDocumentsArgs = {\n  after?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  where?: Maybe<ClaimItemFilter>\n};\n\n\nexport type QueryClaimNextStepArgs = {\n  where: EnDataEntityKey\n};\n\n\nexport type QueryClaimNotesArgs = {\n  after?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  where?: Maybe<ClaimItemFilter>\n};\n\n\nexport type QueryClaimParticipantsArgs = {\n  where?: Maybe<ClaimParticipantIndex>\n};\n\n\nexport type QueryCompanyArgs = {\n  where: EnDataPortfolioKey\n};\n\n\nexport type QueryDashboardWidgetsArgs = {\n  where: DashboardWidgetIndex\n};\n\n\nexport type QueryEstimatorsArgs = {\n  after?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  where?: Maybe<SupplierManagerIndex>\n};\n\n\nexport type QueryFeeCategoriesArgs = {\n  where: FeeCategoryWhere\n};\n\n\nexport type QueryFeeInvoiceArgs = {\n  where: FeeInvoiceUniqueWhere\n};\n\n\nexport type QueryFeeInvoiceStatusArgs = {\n  where: FeeInvoiceStatusWhere\n};\n\n\nexport type QueryFeeItemArgs = {\n  where: FeeItemUniqueWhere\n};\n\n\nexport type QueryFeeItemsArgs = {\n  where: FeeItemWhere\n};\n\n\nexport type QueryFeePortfoliosArgs = {\n  where: ClaimPortfoliosWhere\n};\n\n\nexport type QueryInternalAssessorsArgs = {\n  after?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  where?: Maybe<SupplierManagerIndex>\n};\n\n\nexport type QueryJobMakeSafesArgs = {\n  after?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  where: JobMakeSafeIndex\n};\n\n\nexport type QueryJobQuotesArgs = {\n  after?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  where: JobQuoteIndex\n};\n\n\nexport type QueryJobVariationsArgs = {\n  after?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  where: JobVariationIndex\n};\n\n\nexport type QueryJobWorkOrdersArgs = {\n  after?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  where: JobWorkOrderIndex\n};\n\n\nexport type QueryJobWorkProgressesArgs = {\n  after?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  where: EnDataPortfolioKey\n};\n\n\nexport type QueryPaymentMethodsArgs = {\n  where: PaymentMethodWhere\n};\n\n\nexport type QueryPaymentTypesArgs = {\n  where: PaymentTypeWhere\n};\n\n\nexport type QueryQuoteCostCentresArgs = {\n  after?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  where: QuoteCostCentreIndex\n};\n\n\nexport type QueryQuoteCostItemsArgs = {\n  after?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  where: QuoteCostItemIndex\n};\n\n\nexport type QueryQuoteCostLocationsArgs = {\n  after?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  where: QuoteCostLocationIndex\n};\n\n\nexport type QueryReportingClaimJobGeneralArgs = {\n  after?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  where?: Maybe<CaseReportIndex>\n};\n\n\nexport type QuerySpecialistCategoriesArgs = {\n  where: SpecialistCategoryWhere\n};\n\n\nexport type QuerySpecialistRequestsArgs = {\n  where: SpecialistRequestWhere\n};\n\n\nexport type QuerySpecialistsArgs = {\n  where: SpecialistWhere\n};\n\n\nexport type QuerySupervisorsArgs = {\n  after?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  where?: Maybe<SupplierManagerIndex>\n};\n\nexport type QuoteCostCentre = {\n   __typename?: 'QuoteCostCentre',\n  costCentreId: Scalars['Int'],\n  costCentreName: Scalars['String'],\n  costType?: Maybe<QuoteCostType>,\n  directSupplier: Scalars['Boolean'],\n  id: Scalars['ID'],\n};\n\nexport type QuoteCostCentreConnection = {\n   __typename?: 'QuoteCostCentreConnection',\n  edges?: Maybe<Array<Maybe<QuoteCostCentreEdge>>>,\n  items?: Maybe<Array<Maybe<QuoteCostCentre>>>,\n  pageInfo: PageInfo,\n  totalCount?: Maybe<Scalars['Int']>,\n};\n\nexport type QuoteCostCentreEdge = {\n   __typename?: 'QuoteCostCentreEdge',\n  cursor: Scalars['String'],\n  node?: Maybe<QuoteCostCentre>,\n};\n\nexport type QuoteCostCentreIndex = {\n  insurerId?: Maybe<Scalars['Int']>,\n  costType?: Maybe<QuoteCostType>,\n  portfolioType: PortfolioType,\n};\n\nexport type QuoteCostItem = {\n   __typename?: 'QuoteCostItem',\n  costItemId: Scalars['Int'],\n  id: Scalars['ID'],\n  itemDescription: Scalars['String'],\n  units?: Maybe<Array<Maybe<QuoteItemUnit>>>,\n};\n\nexport type QuoteCostItemConnection = {\n   __typename?: 'QuoteCostItemConnection',\n  edges?: Maybe<Array<Maybe<QuoteCostItemEdge>>>,\n  items?: Maybe<Array<Maybe<QuoteCostItem>>>,\n  pageInfo: PageInfo,\n  totalCount?: Maybe<Scalars['Int']>,\n};\n\nexport type QuoteCostItemEdge = {\n   __typename?: 'QuoteCostItemEdge',\n  cursor: Scalars['String'],\n  node?: Maybe<QuoteCostItem>,\n};\n\nexport type QuoteCostItemIndex = {\n  costCentreId: Scalars['Int'],\n  portfolioType: PortfolioType,\n};\n\nexport type QuoteCostLocation = {\n   __typename?: 'QuoteCostLocation',\n  costLocationId: Scalars['Int'],\n  id: Scalars['ID'],\n  locationName: Scalars['String'],\n};\n\nexport type QuoteCostLocationConnection = {\n   __typename?: 'QuoteCostLocationConnection',\n  edges?: Maybe<Array<Maybe<QuoteCostLocationEdge>>>,\n  items?: Maybe<Array<Maybe<QuoteCostLocation>>>,\n  pageInfo: PageInfo,\n  totalCount?: Maybe<Scalars['Int']>,\n};\n\nexport type QuoteCostLocationEdge = {\n   __typename?: 'QuoteCostLocationEdge',\n  cursor: Scalars['String'],\n  node?: Maybe<QuoteCostLocation>,\n};\n\nexport type QuoteCostLocationIndex = {\n  portfolioType: PortfolioType,\n};\n\nexport enum QuoteCostType {\n  UnDefined = 'UnDefined',\n  Labour = 'Labour',\n  Material = 'Material'\n}\n\nexport type QuoteItemCreate = {\n  costCentreId: Scalars['Int'],\n  costItemId: Scalars['Int'],\n  lineDescription: Scalars['String'],\n  locationId: Scalars['Int'],\n  dimensions?: Maybe<Scalars['String']>,\n  qty: Scalars['Decimal'],\n  unitId: Scalars['Int'],\n  rate: Scalars['Decimal'],\n  marginRate: Scalars['Decimal'],\n  gst?: Maybe<Scalars['Decimal']>,\n};\n\nexport type QuoteItemUnit = {\n   __typename?: 'QuoteItemUnit',\n  defaultValue: Scalars['Decimal'],\n  unitId: Scalars['Int'],\n  unitName: Scalars['String'],\n};\n\nexport type QuoteItemUpdate = {\n  costCentreId?: Maybe<Scalars['Int']>,\n  costItemId?: Maybe<Scalars['Int']>,\n  locationId?: Maybe<Scalars['Int']>,\n  dimensions?: Maybe<Scalars['String']>,\n  lineDescription?: Maybe<Scalars['String']>,\n  unitId?: Maybe<Scalars['Int']>,\n  qty?: Maybe<Scalars['Decimal']>,\n  rate?: Maybe<Scalars['Decimal']>,\n  marginRate?: Maybe<Scalars['Decimal']>,\n  gst?: Maybe<Scalars['Decimal']>,\n};\n\nexport enum QuoteRequestStatus {\n  NewClaims = 'NewClaims',\n  OfferScopeAcc = 'OfferScopeAcc',\n  InitialCallMade = 'InitialCallMade',\n  AppointmentMade = 'AppointmentMade',\n  AwaitingInfo = 'AwaitingInfo',\n  AwaitingInfoContents = 'AwaitingInfoContents',\n  ClaimFinalised = 'ClaimFinalised',\n  JobAuthorised = 'JobAuthorised',\n  JobLost = 'JobLost',\n  AdditionalItems = 'AdditionalItems',\n  WaitingScope = 'WaitingScope',\n  WaitingQuotes = 'WaitingQuotes',\n  QuoteSubmitted = 'QuoteSubmitted',\n  WaitingResult = 'WaitingResult'\n}\n\nexport enum QuoteRequestType {\n  UnDefined = 'UnDefined',\n  Scoping = 'Scoping',\n  DesktopQuoting = 'DesktopQuoting'\n}\n\nexport type ReallocateScopingSupplierInput = {\n  supplierId: Scalars['Int'],\n  availableForQuoting: Scalars['Boolean'],\n  note?: Maybe<Scalars['String']>,\n};\n\nexport type Report = {\n   __typename?: 'Report',\n  id: Scalars['ID'],\n  data?: Maybe<Scalars['Json']>,\n  status: ReportStatus,\n};\n\nexport enum ReportStatus {\n  Reporting = 'REPORTING',\n  Reported = 'REPORTED'\n}\n\nexport enum RequestCategory {\n  All = 'All',\n  Scoping = 'Scoping',\n  DesktopQuoting = 'DesktopQuoting',\n  Authorised = 'Authorised',\n  Lost = 'Lost'\n}\n\n\nexport type SelectField = Field & {\n   __typename?: 'SelectField',\n  id: Scalars['ID'],\n  order?: Maybe<Scalars['Int']>,\n  grid?: Maybe<Scalars['Grid']>,\n  label?: Maybe<Scalars['String']>,\n  name?: Maybe<Scalars['String']>,\n  options?: Maybe<Array<SelectFieldOption>>,\n};\n\nexport type SelectFieldOption = {\n   __typename?: 'SelectFieldOption',\n  id: Scalars['ID'],\n  label: Scalars['String'],\n  value: Scalars['String'],\n};\n\nexport type SelectOption = {\n   __typename?: 'SelectOption',\n  label?: Maybe<Scalars['String']>,\n  value: Scalars['ID'],\n};\n\nexport enum Server {\n  All = 'ALL',\n  Endata = 'ENDATA',\n  Iag = 'IAG',\n  Alz = 'ALZ',\n  Rac = 'RAC',\n  Ract = 'RACT',\n  Qbe = 'QBE',\n  Aig = 'AIG',\n  Wbc = 'WBC',\n  Testuat_1 = 'TESTUAT_1',\n  Testuat_2 = 'TESTUAT_2',\n  Tsetpvt = 'TSETPVT'\n}\n\nexport type ServiceInput = {\n  serviceId: Scalars['Int'],\n};\n\nexport type ServiceValidation = {\n   __typename?: 'ServiceValidation',\n  server?: Maybe<Server>,\n  serviceToken: Scalars['String'],\n};\n\n\nexport type SiteCladdingType = {\n   __typename?: 'SiteCladdingType',\n  claddingTypeId: Scalars['Int'],\n  claddingTypeName: Scalars['String'],\n  id: Scalars['ID'],\n};\n\nexport type SiteDwellingAge = {\n   __typename?: 'SiteDwellingAge',\n  dwellingAgeId: Scalars['Int'],\n  dwellingAgeName: Scalars['String'],\n  id: Scalars['ID'],\n};\n\nexport type SiteDwellingType = {\n   __typename?: 'SiteDwellingType',\n  dwellingTypeId: Scalars['Int'],\n  dwellingTypeName: Scalars['String'],\n  id: Scalars['ID'],\n};\n\nexport type SiteFoundationType = {\n   __typename?: 'SiteFoundationType',\n  foundationTypeId: Scalars['Int'],\n  foundationTypeName: Scalars['String'],\n  id: Scalars['ID'],\n};\n\nexport type SiteHouseType = {\n   __typename?: 'SiteHouseType',\n  houseTypeId: Scalars['Int'],\n  houseTypeName: Scalars['String'],\n  id: Scalars['ID'],\n};\n\nexport type SiteIsAClaim = {\n   __typename?: 'SiteIsAClaim',\n  id: Scalars['ID'],\n  isAClaimId: Scalars['Int'],\n  isAClaimName: Scalars['String'],\n};\n\nexport type SiteReportInput = {\n  claddingTypeId?: Maybe<Scalars['Int']>,\n  dwellingAgeId?: Maybe<Scalars['Int']>,\n  dwellingTypeId?: Maybe<Scalars['Int']>,\n  foundationTypeId?: Maybe<Scalars['Int']>,\n  houseTypeId?: Maybe<Scalars['Int']>,\n  isAClaimId?: Maybe<Scalars['Int']>,\n  roofTypeId?: Maybe<Scalars['Int']>,\n  suppervisorId?: Maybe<Scalars['Int']>,\n  estimatorId?: Maybe<Scalars['Int']>,\n  claimrecommendationId?: Maybe<Scalars['Int']>,\n  reportDate?: Maybe<Scalars['DateString']>,\n  emergencyMakeSafeWorks?: Maybe<Scalars['Int']>,\n  sumInsuredAdequate?: Maybe<Scalars['Int']>,\n  siteReportDescription?: Maybe<Scalars['String']>,\n};\n\nexport type SiteRoofType = {\n   __typename?: 'SiteRoofType',\n  id: Scalars['ID'],\n  roofTypeId: Scalars['Int'],\n  roofTypeName: Scalars['String'],\n};\n\nexport type SpecialistCategory = {\n   __typename?: 'SpecialistCategory',\n  id: Scalars['ID'],\n  name: Scalars['String'],\n  specialistCategoryId: Scalars['Int'],\n};\n\nexport type SpecialistCategoryWhere = {\n  claimId: Scalars['ID'],\n  specialistId?: Maybe<Scalars['Int']>,\n};\n\nexport type SpecialistRequest = {\n   __typename?: 'SpecialistRequest',\n  actions: Array<Maybe<Action>>,\n  id: Scalars['ID'],\n  requestedDate?: Maybe<Scalars['DateString']>,\n  specialist?: Maybe<Company>,\n  specialistCategory?: Maybe<SpecialistCategory>,\n  specialistRequestId: Scalars['Int'],\n};\n\nexport type SpecialistRequestCreateInput = {\n  claimId: Scalars['ID'],\n  specialistCategoryId: Scalars['Int'],\n  specialistId: Scalars['Int'],\n};\n\nexport type SpecialistRequestEditInput = {\n  specialistCategoryId: Scalars['Int'],\n};\n\nexport type SpecialistRequestPayload = {\n   __typename?: 'SpecialistRequestPayload',\n  fieldErrors?: Maybe<Array<Maybe<EntityFieldError>>>,\n  messages: Array<Scalars['String']>,\n  result?: Maybe<SpecialistRequest>,\n  success: Scalars['Boolean'],\n};\n\nexport type SpecialistRequestUniqueWhere = {\n  specialistRequestId: Scalars['Int'],\n};\n\nexport type SpecialistRequestWhere = {\n  claimId: Scalars['ID'],\n};\n\nexport type SpecialistWhere = {\n  claimId: Scalars['ID'],\n  specialistCategoryId: Scalars['Int'],\n};\n\nexport enum State {\n  Qld = 'QLD',\n  Nsw = 'NSW',\n  Vic = 'VIC',\n  Wa = 'WA',\n  Act = 'ACT',\n  Sa = 'SA',\n  Tas = 'TAS',\n  Nt = 'NT'\n}\n\nexport type Supervisor = {\n   __typename?: 'Supervisor',\n  companyId: Scalars['Int'],\n  id: Scalars['ID'],\n  initials?: Maybe<Scalars['String']>,\n  name?: Maybe<Scalars['String']>,\n  phone?: Maybe<Scalars['String']>,\n  portfolioType?: Maybe<PortfolioType>,\n  suppervisorId: Scalars['Int'],\n};\n\nexport type SupervisorConnection = {\n   __typename?: 'SupervisorConnection',\n  edges?: Maybe<Array<Maybe<SupervisorEdge>>>,\n  items?: Maybe<Array<Maybe<Supervisor>>>,\n  pageInfo: PageInfo,\n  totalCount?: Maybe<Scalars['Int']>,\n};\n\nexport type SupervisorCreateInput = {\n  name: Scalars['String'],\n  initials?: Maybe<Scalars['String']>,\n  phone?: Maybe<Scalars['String']>,\n  companyId?: Maybe<Scalars['Int']>,\n  portfolioType?: Maybe<PortfolioType>,\n};\n\nexport type SupervisorEdge = {\n   __typename?: 'SupervisorEdge',\n  cursor: Scalars['String'],\n  node?: Maybe<Supervisor>,\n};\n\nexport type SupervisorPayload = {\n   __typename?: 'SupervisorPayload',\n  fieldErrors?: Maybe<Array<Maybe<EntityFieldError>>>,\n  messages: Array<Scalars['String']>,\n  result?: Maybe<Supervisor>,\n  success: Scalars['Boolean'],\n};\n\nexport type SupervisorUpdateInput = {\n  name?: Maybe<Scalars['String']>,\n  initials?: Maybe<Scalars['String']>,\n  phone?: Maybe<Scalars['String']>,\n};\n\nexport type SupplierManagerIndex = {\n  companyId?: Maybe<Scalars['Int']>,\n  portfolioType?: Maybe<PortfolioType>,\n};\n\nexport enum SupplierStatusFilter {\n  RequestedAndAvailable = 'RequestedAndAvailable',\n  RequestedOnly = 'RequestedOnly',\n  AcceptedOnly = 'AcceptedOnly'\n}\n\nexport enum SupplierTypeFilter {\n  ManagerAndSupplier = 'ManagerAndSupplier',\n  Supplier = 'Supplier',\n  SupplierExcludeScoping = 'SupplierExcludeScoping'\n}\n\nexport type SwitchField = Field & {\n   __typename?: 'SwitchField',\n  id: Scalars['ID'],\n  order?: Maybe<Scalars['Int']>,\n  grid?: Maybe<Scalars['Grid']>,\n  label?: Maybe<Scalars['String']>,\n  name?: Maybe<Scalars['String']>,\n};\n\nexport type TextAreaField = Field & {\n   __typename?: 'TextAreaField',\n  id: Scalars['ID'],\n  order?: Maybe<Scalars['Int']>,\n  grid?: Maybe<Scalars['Grid']>,\n  label?: Maybe<Scalars['String']>,\n  name?: Maybe<Scalars['String']>,\n  rows?: Maybe<Scalars['Int']>,\n  rowsMax?: Maybe<Scalars['Int']>,\n};\n\nexport type TextField = Field & {\n   __typename?: 'TextField',\n  id: Scalars['ID'],\n  order?: Maybe<Scalars['Int']>,\n  grid?: Maybe<Scalars['Grid']>,\n  label?: Maybe<Scalars['String']>,\n  name?: Maybe<Scalars['String']>,\n};\n\nexport type User = {\n   __typename?: 'User',\n  company?: Maybe<CompanyProfile>,\n  disabled: Scalars['Boolean'],\n  hasMultipleAccess: Scalars['Boolean'],\n  permitedCompanyIDs: Array<Scalars['Int']>,\n  preference?: Maybe<UserPreference>,\n  privileges?: Maybe<UserPrivileges>,\n  userEmail?: Maybe<Scalars['String']>,\n  userId: Scalars['Int'],\n  userName: Scalars['String'],\n  userPhone?: Maybe<Scalars['String']>,\n  userRole?: Maybe<AccessRole>,\n};\n\nexport type UserCredential = {\n  userLogin: Scalars['String'],\n  password: Scalars['String'],\n};\n\nexport type UserPreference = {\n   __typename?: 'UserPreference',\n  applicationFont: Scalars['String'],\n  applicationLanguage: Scalars['String'],\n  applicationTheme: Scalars['String'],\n  applicationTimeZone?: Maybe<Scalars['Byte']>,\n};\n\nexport type UserPrivileges = {\n   __typename?: 'UserPrivileges',\n  menus?: Maybe<Array<Maybe<PrivilegeMenu>>>,\n};\n\nexport enum UserType {\n  Administrator = 'Administrator',\n  Builder = 'Builder',\n  Restorer = 'Restorer',\n  ContentSupplier = 'ContentSupplier'\n}\n\nexport type UserValidation = {\n   __typename?: 'UserValidation',\n  accessToken: Scalars['String'],\n  refreshToken: Scalars['String'],\n  server?: Maybe<Server>,\n  token: Scalars['String'],\n  user?: Maybe<User>,\n};\n\nexport type WidgetData = {\n   __typename?: 'WidgetData',\n  dataSetName: Scalars['String'],\n  internalFilterName?: Maybe<Scalars['String']>,\n  legend?: Maybe<Scalars['String']>,\n  valueDisplay?: Maybe<DataDisplay>,\n  valueGroup?: Maybe<Scalars['Byte']>,\n  values?: Maybe<Array<Maybe<Scalars['Float']>>>,\n  valueSense?: Maybe<DataSense>,\n  valueUnit?: Maybe<DataUnit>,\n};\n\nexport type WidgetGraphType = {\n   __typename?: 'WidgetGraphType',\n  data?: Maybe<Array<Maybe<WidgetData>>>,\n  description?: Maybe<Scalars['String']>,\n  extended: Scalars['Boolean'],\n  id: Scalars['ID'],\n  labels: Array<Scalars['String']>,\n  title: Scalars['String'],\n  viewName?: Maybe<WidgetViewName>,\n  widgetId: Scalars['Int'],\n  width?: Maybe<Scalars['Byte']>,\n};\n\nexport enum WidgetViewName {\n  UnDefined = 'UnDefined',\n  DataSingle = 'DataSingle',\n  DataDouble = 'DataDouble',\n  ChartJs = 'ChartJs',\n  KpiGear = 'KPIGear',\n  ListData = 'ListData',\n  ListCheck = 'ListCheck',\n  Messages = 'Messages',\n  JobTasks = 'JobTasks'\n}\n\nexport type CommunicationmenuQueryVariables = {};\n\n\nexport type CommunicationmenuQuery = (\n  { __typename?: 'Query' }\n  & { communications: Maybe<(\n    { __typename?: 'ClaimCommunicationConnection' }\n    & Pick<ClaimCommunicationConnection, 'totalCount'>\n    & { edges: Maybe<Array<Maybe<(\n      { __typename?: 'ClaimCommunicationEdge' }\n      & { node: Maybe<(\n        { __typename?: 'ClaimCommunication' }\n        & Pick<ClaimCommunication, 'id' | 'claimRef' | 'message'>\n      )> }\n    )>>> }\n  )> }\n);\n\nexport type ClaimDetailsCardFragmentFragment = (\n  { __typename?: 'Query' }\n  & { me: Maybe<(\n    { __typename?: 'AuthenticatedUser' }\n    & Pick<AuthenticatedUser, 'userType'>\n  )>, managers: Maybe<Array<Maybe<(\n    { __typename?: 'FilterOption' }\n    & Pick<FilterOption, 'value'>\n    & { label: FilterOption['name'] }\n  )>>>, adjusters: Maybe<Array<Maybe<(\n    { __typename?: 'FilterOption' }\n    & Pick<FilterOption, 'value'>\n    & { label: FilterOption['name'] }\n  )>>>, builders: Maybe<Array<Maybe<(\n    { __typename?: 'FilterOption' }\n    & Pick<FilterOption, 'value'>\n    & { label: FilterOption['name'] }\n  )>>>, restorers: Maybe<Array<Maybe<(\n    { __typename?: 'FilterOption' }\n    & Pick<FilterOption, 'value'>\n    & { label: FilterOption['name'] }\n  )>>>, eventTypes: Maybe<Array<Maybe<(\n    { __typename?: 'FilterOption' }\n    & Pick<FilterOption, 'value'>\n    & { label: FilterOption['name'] }\n  )>>>, catCodes: Maybe<Array<Maybe<(\n    { __typename?: 'FilterOption' }\n    & Pick<FilterOption, 'value'>\n    & { label: FilterOption['name'] }\n  )>>>, policyTypes: Maybe<Array<Maybe<(\n    { __typename?: 'FilterOption' }\n    & Pick<FilterOption, 'value'>\n    & { label: FilterOption['name'] }\n  )>>>, policyCovers: Maybe<Array<Maybe<(\n    { __typename?: 'FilterOption' }\n    & Pick<FilterOption, 'value'>\n    & { label: FilterOption['name'] }\n  )>>>, internalAssessors: Maybe<Array<Maybe<(\n    { __typename?: 'FilterOption' }\n    & Pick<FilterOption, 'value'>\n    & { label: FilterOption['name'] }\n  )>>> }\n);\n\nexport type ClaimDetailsCardMetaFragmentFragment = (\n  { __typename?: 'CompanyProfile' }\n  & Pick<CompanyProfile, 'contentsref' | 'quickrepair' | 'policyTypeSuppliersView' | 'policyCoverSuppliersView' | 'isToProvideSiteReportView' | 'useInternalAssessor' | 'cm2nd' | 'enableMultipleRisks'>\n);\n\nexport type CustomerDetailsCardFragmentFragment = (\n  { __typename?: 'Query' }\n  & { catCodes: Maybe<Array<Maybe<(\n    { __typename?: 'FilterOption' }\n    & Pick<FilterOption, 'value'>\n    & { label: FilterOption['name'] }\n  )>>> }\n);\n\nexport type CustomerDetailsCardMetaFragmentFragment = (\n  { __typename?: 'CompanyProfile' }\n  & Pick<CompanyProfile, 'companyName' | 'policyTypeSuppliersView' | 'insrefnumLength' | 'removeHabitableAsbestos' | 'setupcustomerlogin' | 'hideCategoryOfClaim'>\n);\n\nexport type QuotingBuildersCardFragmentFragment = (\n  { __typename?: 'Query' }\n  & { builders: Maybe<Array<Maybe<(\n    { __typename?: 'FilterOption' }\n    & Pick<FilterOption, 'value'>\n    & { label: FilterOption['name'] }\n  )>>> }\n);\n\nexport type QuotingBuildersCardMetaFragmentFragment = (\n  { __typename?: 'CompanyProfile' }\n  & Pick<CompanyProfile, 'quotesperclaim'>\n);\n\nexport type QuotingRestorersCardFragmentFragment = (\n  { __typename?: 'Query' }\n  & { restorers: Maybe<Array<Maybe<(\n    { __typename?: 'FilterOption' }\n    & Pick<FilterOption, 'value'>\n    & { label: FilterOption['name'] }\n  )>>> }\n);\n\nexport type AddClaimMutationVariables = {\n  input: ClaimJobCreate\n};\n\n\nexport type AddClaimMutation = (\n  { __typename?: 'Mutation' }\n  & { createClaimJob: Maybe<(\n    { __typename?: 'ClaimJobPayload' }\n    & Pick<ClaimJobPayload, 'success' | 'messages'>\n    & { fieldErrors: Maybe<Array<Maybe<(\n      { __typename?: 'EntityFieldError' }\n      & Pick<EntityFieldError, 'fieldName' | 'level' | 'message'>\n    )>>>, result: Maybe<(\n      { __typename?: 'ClaimJob' }\n      & Pick<ClaimJob, 'id' | 'claimId'>\n    )> }\n  )> }\n);\n\nexport type AddClaimRootQueryVariables = {\n  companyWhere: EnDataPortfolioKey,\n  managersWhere?: Maybe<ClaimJobFilter>,\n  adjustersWhere?: Maybe<ClaimJobFilter>,\n  buildersWhere?: Maybe<ClaimJobFilter>,\n  restorersWhere?: Maybe<ClaimJobFilter>,\n  eventTypeWhere?: Maybe<ClaimJobFilter>,\n  catCodesWhere?: Maybe<ClaimJobFilter>,\n  policyTypesWhere?: Maybe<ClaimJobFilter>,\n  policyCoversWhere?: Maybe<ClaimJobFilter>,\n  internalAssessorsWhere?: Maybe<ClaimJobFilter>\n};\n\n\nexport type AddClaimRootQuery = (\n  { __typename?: 'Query' }\n  & { company: Maybe<(\n    { __typename?: 'CompanyProfile' }\n    & CustomerDetailsCardMetaFragmentFragment\n    & ClaimDetailsCardMetaFragmentFragment\n    & QuotingBuildersCardMetaFragmentFragment\n  )> }\n  & CustomerDetailsCardFragmentFragment\n  & ClaimDetailsCardFragmentFragment\n  & QuotingBuildersCardFragmentFragment\n  & QuotingRestorersCardFragmentFragment\n);\n\nexport type ChooseCompanyQueryVariables = {};\n\n\nexport type ChooseCompanyQuery = (\n  { __typename?: 'Query' }\n  & { claimFilterOptions: Maybe<Array<Maybe<(\n    { __typename?: 'FilterOption' }\n    & Pick<FilterOption, 'value'>\n    & { label: FilterOption['name'] }\n  )>>> }\n);\n\nexport type ClaimMetaContextQueryVariables = {\n  where: EnDataEntityKey\n};\n\n\nexport type ClaimMetaContextQuery = (\n  { __typename?: 'Query' }\n  & { me: Maybe<(\n    { __typename?: 'AuthenticatedUser' }\n    & AddDocumentMetaFragmentFragment\n  )>, user: Maybe<(\n    { __typename?: 'User' }\n    & { company: Maybe<(\n      { __typename?: 'CompanyProfile' }\n      & Pick<CompanyProfile, 'companyId'>\n    )> }\n  )>, claim: Maybe<(\n    { __typename?: 'ClaimJob' }\n    & Pick<ClaimJob, 'id' | 'claimId'>\n    & AddClaimTypeDialogClaimFragmentFragment\n    & AddDocumentClaimFragmentFragment\n    & JobInfo_ClaimDetailsCardMetaFragmentFragment\n    & JobInfo_CustomerInfoCardMetaFragmentFragment\n  )> }\n);\n\nexport type InfoCardDataFragmentFragment = (\n  { __typename?: 'ClaimJob' }\n  & Pick<ClaimJob, 'refNumber' | '_incidentAddress' | '_insuredPhone' | 'lodgeDate'>\n  & { insurer: Maybe<(\n    { __typename?: 'Company' }\n    & Pick<Company, 'companyName' | 'policyTypeSuppliersView' | 'policyCoverSuppliersView'>\n  )>, insured: Maybe<(\n    { __typename?: 'ContactDetail' }\n    & Pick<ContactDetail, 'name' | 'phone1' | 'phone2' | 'phone3' | 'email'>\n  )>, incidentDetail: Maybe<(\n    { __typename?: 'IncidentDetail' }\n    & { riskAddress: Maybe<(\n      { __typename?: 'Address' }\n      & Pick<Address, 'line1' | 'suburb' | 'state' | 'postcode'>\n    )>, eventType: Maybe<(\n      { __typename?: 'IncidentEvent' }\n      & Pick<IncidentEvent, 'eventName'>\n    )>, cATCode: Maybe<(\n      { __typename?: 'CATCode' }\n      & Pick<CatCode, 'cATCodeName'>\n    )> }\n  )>, policyType: Maybe<(\n    { __typename?: 'PolicyType' }\n    & Pick<PolicyType, 'policyTypeName'>\n  )>, policyCover: Maybe<(\n    { __typename?: 'PolicyCover' }\n    & Pick<PolicyCover, 'policyCoverName'>\n  )>, building: Maybe<(\n    { __typename?: 'ClaimPortfolio' }\n    & Pick<ClaimPortfolio, 'toCollectExcess' | 'excessValue' | '_providerAndStatus' | '_portfolioTooltips'>\n    & { claimStatus: Maybe<(\n      { __typename?: 'ClaimStatus' }\n      & Pick<ClaimStatus, 'statusName'>\n    )>, scopingSupplier: Maybe<(\n      { __typename?: 'Company' }\n      & Pick<Company, 'companyName' | 'companyPhone1' | 'companyPhone2'>\n    )>, authorisedSupplier: Maybe<(\n      { __typename?: 'Company' }\n      & Pick<Company, 'companyName' | 'companyPhone1' | 'companyPhone2'>\n    )>, jobSuppliers: Maybe<Array<Maybe<(\n      { __typename?: 'JobSupplier' }\n      & { quote: Maybe<(\n        { __typename?: 'JobQuote' }\n        & { supplier: Maybe<(\n          { __typename?: 'Company' }\n          & Pick<Company, 'companyName'>\n        )>, quoteStatus: Maybe<(\n          { __typename?: 'ClaimStatus' }\n          & Pick<ClaimStatus, 'statusName'>\n        )> }\n      )> }\n    )>>> }\n  )>, restoration: Maybe<(\n    { __typename?: 'ClaimPortfolio' }\n    & Pick<ClaimPortfolio, 'toCollectExcess' | 'excessValue' | '_providerAndStatus' | '_portfolioTooltips'>\n    & { claimStatus: Maybe<(\n      { __typename?: 'ClaimStatus' }\n      & Pick<ClaimStatus, 'statusName'>\n    )>, scopingSupplier: Maybe<(\n      { __typename?: 'Company' }\n      & Pick<Company, 'companyName' | 'companyPhone1' | 'companyPhone2'>\n    )>, authorisedSupplier: Maybe<(\n      { __typename?: 'Company' }\n      & Pick<Company, 'companyName' | 'companyPhone1' | 'companyPhone2'>\n    )>, jobSuppliers: Maybe<Array<Maybe<(\n      { __typename?: 'JobSupplier' }\n      & { quote: Maybe<(\n        { __typename?: 'JobQuote' }\n        & { supplier: Maybe<(\n          { __typename?: 'Company' }\n          & Pick<Company, 'companyName'>\n        )>, quoteStatus: Maybe<(\n          { __typename?: 'ClaimStatus' }\n          & Pick<ClaimStatus, 'statusName'>\n        )> }\n      )> }\n    )>>> }\n  )>, contents: Maybe<(\n    { __typename?: 'ClaimPortfolio' }\n    & Pick<ClaimPortfolio, 'portfolioType' | 'toCollectExcess' | 'excessValue' | '_providerAndStatus' | '_portfolioTooltips'>\n    & { claimStatus: Maybe<(\n      { __typename?: 'ClaimStatus' }\n      & Pick<ClaimStatus, 'statusName'>\n    )> }\n  )> }\n);\n\nexport type AddClaimTypeDialogClaimFragmentFragment = (\n  { __typename?: 'ClaimJob' }\n  & Pick<ClaimJob, 'claimId' | 'hasBuilding' | 'hasContents' | 'hasRestoration' | '_portfolios'>\n  & { insurer: Maybe<(\n    { __typename?: 'Company' }\n    & Pick<Company, 'companyId'>\n  )>, incidentDetail: Maybe<(\n    { __typename?: 'IncidentDetail' }\n    & { riskAddress: Maybe<(\n      { __typename?: 'Address' }\n      & Pick<Address, 'postcode'>\n    )> }\n  )> }\n);\n\nexport type AddClaimTypeDialogQueryVariables = {\n  buildersWhere?: Maybe<ClaimJobFilter>,\n  restorersWhere?: Maybe<ClaimJobFilter>\n};\n\n\nexport type AddClaimTypeDialogQuery = (\n  { __typename?: 'Query' }\n  & { building: Maybe<Array<Maybe<(\n    { __typename?: 'FilterOption' }\n    & Pick<FilterOption, 'value'>\n    & { label: FilterOption['name'] }\n  )>>>, restoration: Maybe<Array<Maybe<(\n    { __typename?: 'FilterOption' }\n    & Pick<FilterOption, 'value'>\n    & { label: FilterOption['name'] }\n  )>>> }\n);\n\nexport type AddClaimTypeMutationVariables = {\n  input: AddPortfolioInput,\n  where: EnDataEntityKey\n};\n\n\nexport type AddClaimTypeMutation = (\n  { __typename?: 'Mutation' }\n  & { claimAddPortfolio: Maybe<(\n    { __typename?: 'ClaimPortfolioPayload' }\n    & Pick<ClaimPortfolioPayload, 'success' | 'messages'>\n  )> }\n);\n\nexport type AddCommunicationActionQueryVariables = {\n  where?: Maybe<ClaimParticipantIndex>\n};\n\n\nexport type AddCommunicationActionQuery = (\n  { __typename?: 'Query' }\n  & { claimParticipants: Maybe<Array<Maybe<(\n    { __typename?: 'Company' }\n    & Pick<Company, 'isLossAdjuster'>\n    & { group: Company['companyType'], label: Company['companyName'], value: Company['companyId'] }\n  )>>> }\n);\n\nexport type AddCommunicationMutationVariables = {\n  input: ClaimCommunicationCreate\n};\n\n\nexport type AddCommunicationMutation = (\n  { __typename?: 'Mutation' }\n  & { createClaimCommunication: Maybe<(\n    { __typename?: 'ClaimCommunicationPayload' }\n    & Pick<ClaimCommunicationPayload, 'messages' | 'success'>\n  )> }\n);\n\nexport type AddDocumentClaimFragmentFragment = (\n  { __typename?: 'ClaimJob' }\n  & Pick<ClaimJob, 'claimId' | 'hasBuilding' | 'hasContents' | 'hasRestoration' | '_portfolios'>\n  & { insurer: Maybe<(\n    { __typename?: 'Company' }\n    & Pick<Company, 'isFeeModule'>\n  )> }\n);\n\nexport type AddDocumentMetaFragmentFragment = (\n  { __typename?: 'AuthenticatedUser' }\n  & Pick<AuthenticatedUser, 'userType'>\n);\n\nexport type UploadDocumentMutationVariables = {\n  input: ClaimDocumentCreate\n};\n\n\nexport type UploadDocumentMutation = (\n  { __typename?: 'Mutation' }\n  & { createClaimDocument: Maybe<(\n    { __typename?: 'ClaimDocumentPayload' }\n    & Pick<ClaimDocumentPayload, 'success' | 'messages'>\n  )> }\n);\n\nexport type AddJobNoteMutationVariables = {\n  input: ClaimNoteCreate\n};\n\n\nexport type AddJobNoteMutation = (\n  { __typename?: 'Mutation' }\n  & { createClaimNote: Maybe<(\n    { __typename?: 'ClaimNotePayload' }\n    & Pick<ClaimNotePayload, 'success' | 'messages'>\n  )> }\n);\n\nexport type NextStepDialogQueryVariables = {\n  where: EnDataEntityKey\n};\n\n\nexport type NextStepDialogQuery = (\n  { __typename?: 'Query' }\n  & { nextSteps: Maybe<Array<Maybe<(\n    { __typename?: 'ClaimJobStatusInfo' }\n    & Pick<ClaimJobStatusInfo, 'statusName' | 'description' | 'nextStep' | 'portfolioType'>\n  )>>> }\n);\n\nexport type ClaimDetailsQueryVariables = {\n  claimId: Scalars['ID']\n};\n\n\nexport type ClaimDetailsQuery = (\n  { __typename?: 'Query' }\n  & { claimJob: Maybe<(\n    { __typename?: 'ClaimJob' }\n    & InfoCardDataFragmentFragment\n    & JobInfoTabFragmentFragment\n    & ReportTabFragmentFragment\n    & JobNotesFragmentFragment\n  )> }\n);\n\nexport type JobInfo_ClaimDetailsCardFragmentFragment = (\n  { __typename?: 'Query' }\n  & { managers: Maybe<Array<Maybe<(\n    { __typename?: 'FilterOption' }\n    & Pick<FilterOption, 'value'>\n    & { label: FilterOption['name'] }\n  )>>>, externalAdjusters: Maybe<Array<Maybe<(\n    { __typename?: 'FilterOption' }\n    & Pick<FilterOption, 'value'>\n    & { label: FilterOption['name'] }\n  )>>>, eventTypes: Maybe<Array<Maybe<(\n    { __typename?: 'FilterOption' }\n    & Pick<FilterOption, 'value'>\n    & { label: FilterOption['name'] }\n  )>>>, catCodes: Maybe<Array<Maybe<(\n    { __typename?: 'FilterOption' }\n    & Pick<FilterOption, 'value'>\n    & { label: FilterOption['name'] }\n  )>>>, policyTypes: Maybe<Array<Maybe<(\n    { __typename?: 'FilterOption' }\n    & Pick<FilterOption, 'value'>\n    & { label: FilterOption['name'] }\n  )>>>, policyCovers: Maybe<Array<Maybe<(\n    { __typename?: 'FilterOption' }\n    & Pick<FilterOption, 'value'>\n    & { label: FilterOption['name'] }\n  )>>>, internalAssessors: Maybe<Array<Maybe<(\n    { __typename?: 'FilterOption' }\n    & Pick<FilterOption, 'value'>\n    & { label: FilterOption['name'] }\n  )>>> }\n);\n\nexport type JobInfo_ClaimDetailsCardMetaFragmentFragment = (\n  { __typename?: 'ClaimJob' }\n  & Pick<ClaimJob, 'hasContents'>\n  & { insurer: Maybe<(\n    { __typename?: 'Company' }\n    & Pick<Company, 'contentsref' | 'quickrepair' | 'policyTypeSuppliersView' | 'policyCoverSuppliersView' | 'enableMultipleRisks' | 'additionalRefNo' | 'useInternalAssessor' | 'cm2nd'>\n  )>, building: Maybe<(\n    { __typename?: 'ClaimPortfolio' }\n    & Pick<ClaimPortfolio, 'toCollectExcess' | 'excessValue'>\n  )>, contents: Maybe<(\n    { __typename?: 'ClaimPortfolio' }\n    & Pick<ClaimPortfolio, 'toCollectExcess' | 'excessValue'>\n  )>, restoration: Maybe<(\n    { __typename?: 'ClaimPortfolio' }\n    & Pick<ClaimPortfolio, 'toCollectExcess' | 'excessValue'>\n  )> }\n);\n\nexport type JobInfo_CustomerInfoCardMetaFragmentFragment = (\n  { __typename?: 'ClaimJob' }\n  & { insurer: Maybe<(\n    { __typename?: 'Company' }\n    & Pick<Company, 'setupcustomerlogin' | 'removeHabitableAsbestos' | 'hideCategoryOfClaim'>\n  )>, actions: Array<Maybe<(\n    { __typename?: 'Action' }\n    & Pick<Action, 'actionType' | 'isDisplay' | 'isDisabled'>\n  )>> }\n);\n\nexport type JobInfo_QuotingBuilderCardFragmentFragment = (\n  { __typename?: 'Query' }\n  & { quotingBuilders: Maybe<Array<Maybe<(\n    { __typename?: 'FilterOption' }\n    & Pick<FilterOption, 'value'>\n    & { label: FilterOption['name'] }\n  )>>> }\n);\n\nexport type JobInfo_QuotingRestorerCardFragmentFragment = (\n  { __typename?: 'Query' }\n  & { quotingRestorers: Maybe<Array<Maybe<(\n    { __typename?: 'FilterOption' }\n    & Pick<FilterOption, 'value'>\n    & { label: FilterOption['name'] }\n  )>>> }\n);\n\nexport type JobInfoTabFragmentFragment = (\n  { __typename?: 'ClaimJob' }\n  & Pick<ClaimJob, 'id' | 'refNumber' | 'contentsRefNum' | 'lodgeDate' | 'riskname' | 'additionalRefNumber' | '_allocatedBuilder' | '_allocatedRestorer' | 'requireCustomLogin' | 'customLoginEmail' | 'claimDescription'>\n  & { insurer: Maybe<(\n    { __typename?: 'Company' }\n    & Pick<Company, 'companyId' | 'companyName'>\n  )>, incidentDetail: Maybe<(\n    { __typename?: 'IncidentDetail' }\n    & Pick<IncidentDetail, 'incidentDate' | 'hold' | 'habitableProperty' | 'category'>\n    & { eventType: Maybe<(\n      { __typename?: 'IncidentEvent' }\n      & Pick<IncidentEvent, 'eventTypeId'>\n    )>, cATCode: Maybe<(\n      { __typename?: 'CATCode' }\n      & Pick<CatCode, 'cATCodeId'>\n    )>, riskAddress: Maybe<(\n      { __typename?: 'Address' }\n      & Pick<Address, 'line1' | 'line2' | 'suburb' | 'state' | 'postcode'>\n    )> }\n  )>, caseManager: Maybe<(\n    { __typename?: 'ClaimManager' }\n    & Pick<ClaimManager, 'managerId'>\n  )>, externalLossAdjuster: Maybe<(\n    { __typename?: 'Company' }\n    & Pick<Company, 'companyId'>\n  )>, building: Maybe<(\n    { __typename?: 'ClaimPortfolio' }\n    & Pick<ClaimPortfolio, 'toCollectExcess' | 'excessValue' | 'sumInsured'>\n    & { authorisedSupplier: Maybe<(\n      { __typename?: 'Company' }\n      & Pick<Company, 'companyName'>\n    )>, scopingSupplier: Maybe<(\n      { __typename?: 'Company' }\n      & Pick<Company, 'companyId' | 'companyName'>\n    )>, jobSuppliers: Maybe<Array<Maybe<(\n      { __typename?: 'JobSupplier' }\n      & { supplier: Maybe<(\n        { __typename?: 'Company' }\n        & Pick<Company, 'companyId' | 'companyName'>\n      )>, quote: Maybe<(\n        { __typename?: 'JobQuote' }\n        & { supplier: Maybe<(\n          { __typename?: 'Company' }\n          & Pick<Company, 'companyId' | 'companyName'>\n        )> }\n      )> }\n    )>>> }\n  )>, contents: Maybe<(\n    { __typename?: 'ClaimPortfolio' }\n    & Pick<ClaimPortfolio, 'toCollectExcess' | 'excessValue' | 'sumInsured'>\n  )>, restoration: Maybe<(\n    { __typename?: 'ClaimPortfolio' }\n    & Pick<ClaimPortfolio, 'toCollectExcess' | 'excessValue' | 'sumInsured'>\n    & { authorisedSupplier: Maybe<(\n      { __typename?: 'Company' }\n      & Pick<Company, 'companyName'>\n    )>, scopingSupplier: Maybe<(\n      { __typename?: 'Company' }\n      & Pick<Company, 'companyId' | 'companyName'>\n    )>, jobSuppliers: Maybe<Array<Maybe<(\n      { __typename?: 'JobSupplier' }\n      & { supplier: Maybe<(\n        { __typename?: 'Company' }\n        & Pick<Company, 'companyId' | 'companyName'>\n      )>, quote: Maybe<(\n        { __typename?: 'JobQuote' }\n        & { supplier: Maybe<(\n          { __typename?: 'Company' }\n          & Pick<Company, 'companyId' | 'companyName'>\n        )> }\n      )> }\n    )>>> }\n  )>, policyType: Maybe<(\n    { __typename?: 'PolicyType' }\n    & Pick<PolicyType, 'policyTypeId'>\n  )>, policyCover: Maybe<(\n    { __typename?: 'PolicyCover' }\n    & Pick<PolicyCover, 'policyCoverId'>\n  )>, homeAssessor: Maybe<(\n    { __typename?: 'InternalAssesor' }\n    & Pick<InternalAssesor, 'assesorId'>\n  )>, brc: Maybe<(\n    { __typename?: 'ClaimManager' }\n    & Pick<ClaimManager, 'managerId'>\n  )>, insured: Maybe<(\n    { __typename?: 'ContactDetail' }\n    & Pick<ContactDetail, 'salutation' | 'name' | 'email' | 'phone1' | 'phone2' | 'phone3' | 'fax'>\n    & { postalAddress: Maybe<(\n      { __typename?: 'Address' }\n      & Pick<Address, 'line1' | 'line2' | 'suburb' | 'state' | 'postcode'>\n    )> }\n  )>, tenantDetails: Maybe<(\n    { __typename?: 'Contact' }\n    & Pick<Contact, 'name' | 'phone1' | 'phone2' | 'phone3'>\n  )> }\n);\n\nexport type JobInfoQueryVariables = {\n  managersWhere?: Maybe<ClaimJobFilter>,\n  externalAdjustersWhere?: Maybe<ClaimJobFilter>,\n  eventTypeWhere?: Maybe<ClaimJobFilter>,\n  catCodesWhere?: Maybe<ClaimJobFilter>,\n  policyTypesWhere?: Maybe<ClaimJobFilter>,\n  policyCoversWhere?: Maybe<ClaimJobFilter>,\n  internalAssessorsWhere?: Maybe<ClaimJobFilter>,\n  whereQuotingBuilder?: Maybe<ClaimJobFilter>,\n  whereQuotingRestorer?: Maybe<ClaimJobFilter>\n};\n\n\nexport type JobInfoQuery = (\n  { __typename?: 'Query' }\n  & { _states: Array<Maybe<(\n    { __typename?: 'SelectOption' }\n    & Pick<SelectOption, 'label' | 'value'>\n  )>>, _claimCategories: Array<Maybe<(\n    { __typename?: 'SelectOption' }\n    & Pick<SelectOption, 'label' | 'value'>\n  )>> }\n  & JobInfo_ClaimDetailsCardFragmentFragment\n  & JobInfo_QuotingBuilderCardFragmentFragment\n  & JobInfo_QuotingRestorerCardFragmentFragment\n);\n\nexport type JobInfoTabUpdateMutationVariables = {\n  input: ClaimJobInput,\n  where: EnDataEntityKey\n};\n\n\nexport type JobInfoTabUpdateMutation = (\n  { __typename?: 'Mutation' }\n  & { updateClaimJob: Maybe<(\n    { __typename?: 'ClaimJobPayload' }\n    & Pick<ClaimJobPayload, 'success' | 'messages'>\n    & { fieldErrors: Maybe<Array<Maybe<(\n      { __typename?: 'EntityFieldError' }\n      & Pick<EntityFieldError, 'fieldName' | 'level' | 'message'>\n    )>>> }\n  )> }\n);\n\nexport type JobNoteListFragmentFragment = (\n  { __typename?: 'ClaimNote' }\n  & Pick<ClaimNote, 'portfolioType' | 'logDate' | 'private' | '_privacy' | 'message'>\n  & { user: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'userName'>\n    & { company: Maybe<(\n      { __typename?: 'CompanyProfile' }\n      & Pick<CompanyProfile, 'companyName'>\n    )> }\n  )> }\n);\n\nexport type JobNotesQueryVariables = {\n  where?: Maybe<ClaimItemFilter>,\n  first?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>\n};\n\n\nexport type JobNotesQuery = (\n  { __typename?: 'Query' }\n  & { claimNotes: Maybe<(\n    { __typename?: 'ClaimNoteConnection' }\n    & { edges: Maybe<Array<Maybe<(\n      { __typename?: 'ClaimNoteEdge' }\n      & { node: Maybe<(\n        { __typename?: 'ClaimNote' }\n        & Pick<ClaimNote, 'id'>\n        & JobNoteListFragmentFragment\n      )> }\n    )>>> }\n  )> }\n);\n\nexport type JobNotesFragmentFragment = (\n  { __typename?: 'ClaimJob' }\n  & { actions: Array<Maybe<(\n    { __typename?: 'Action' }\n    & Pick<Action, 'actionType' | 'name' | 'isDisplay' | 'isDisabled'>\n  )>>, building: Maybe<(\n    { __typename?: 'ClaimPortfolio' }\n    & { progress: Maybe<(\n      { __typename?: 'ClaimProgress' }\n      & Pick<ClaimProgress, 'initialCallMade' | 'appointmentBooked'>\n    )>, claimStatus: Maybe<(\n      { __typename?: 'ClaimStatus' }\n      & Pick<ClaimStatus, 'statusId'>\n    )>, jobSuppliers: Maybe<Array<Maybe<(\n      { __typename?: 'JobSupplier' }\n      & { quote: Maybe<(\n        { __typename?: 'JobQuote' }\n        & Pick<JobQuote, 'id'>\n      )> }\n    )>>> }\n  )>, restoration: Maybe<(\n    { __typename?: 'ClaimPortfolio' }\n    & { progress: Maybe<(\n      { __typename?: 'ClaimProgress' }\n      & Pick<ClaimProgress, 'initialCallMade' | 'appointmentBooked'>\n    )>, claimStatus: Maybe<(\n      { __typename?: 'ClaimStatus' }\n      & Pick<ClaimStatus, 'statusId'>\n    )>, jobSuppliers: Maybe<Array<Maybe<(\n      { __typename?: 'JobSupplier' }\n      & { quote: Maybe<(\n        { __typename?: 'JobQuote' }\n        & Pick<JobQuote, 'id'>\n      )> }\n    )>>> }\n  )> }\n);\n\nexport type AppointmentMadeMutationVariables = {\n  id: Scalars['ID'],\n  input: AppointmentInput\n};\n\n\nexport type AppointmentMadeMutation = (\n  { __typename?: 'Mutation' }\n  & { claimMakeAppointment: Maybe<(\n    { __typename?: 'ClaimPortfolioPayload' }\n    & Pick<ClaimPortfolioPayload, 'success' | 'messages'>\n  )> }\n);\n\nexport type CancelAwaitingInfoMutationVariables = {\n  where: EnDataPortfolioKey\n};\n\n\nexport type CancelAwaitingInfoMutation = (\n  { __typename?: 'Mutation' }\n  & { claimCancelAwaitingInfo: Maybe<(\n    { __typename?: 'ClaimPortfolioPayload' }\n    & Pick<ClaimPortfolioPayload, 'success' | 'messages'>\n  )> }\n);\n\nexport type AddAwaitingInfoMutationVariables = {\n  input: AwaitingInfoClaimInputType,\n  where: EnDataPortfolioKey\n};\n\n\nexport type AddAwaitingInfoMutation = (\n  { __typename?: 'Mutation' }\n  & { claimAwaitingInfo: Maybe<(\n    { __typename?: 'ClaimPortfolioPayload' }\n    & Pick<ClaimPortfolioPayload, 'success' | 'messages'>\n  )> }\n);\n\nexport type AwaitingInfoFormQueryVariables = {\n  portfolios?: Maybe<Array<Maybe<PortfolioType>>>\n};\n\n\nexport type AwaitingInfoFormQuery = (\n  { __typename?: 'Query' }\n  & { claimFilterOptions: Maybe<Array<Maybe<(\n    { __typename?: 'FilterOption' }\n    & Pick<FilterOption, 'value'>\n    & { label: FilterOption['name'] }\n  )>>> }\n);\n\nexport type ChangeAppointmentMutationVariables = {\n  id: Scalars['ID'],\n  input: AppointmentInput\n};\n\n\nexport type ChangeAppointmentMutation = (\n  { __typename?: 'Mutation' }\n  & { claimMakeAppointment: Maybe<(\n    { __typename?: 'ClaimPortfolioPayload' }\n    & Pick<ClaimPortfolioPayload, 'success' | 'messages'>\n  )> }\n);\n\nexport type InitCallMutationVariables = {\n  id: Scalars['ID']\n};\n\n\nexport type InitCallMutation = (\n  { __typename?: 'Mutation' }\n  & { claimInitialCall: Maybe<(\n    { __typename?: 'ClaimPortfolioPayload' }\n    & Pick<ClaimPortfolioPayload, 'success' | 'messages'>\n  )> }\n);\n\nexport type FormCardFragmentFragment = (\n  { __typename?: 'Card' }\n  & Pick<Card, 'id' | 'grid' | 'order' | 'title'>\n  & { fields: Maybe<Array<(\n    { __typename: 'DateTimeField' }\n    & Pick<DateTimeField, 'name' | 'id' | 'grid' | 'order' | 'label'>\n  ) | (\n    { __typename: 'FileField' }\n    & Pick<FileField, 'name' | 'id' | 'grid' | 'order' | 'label'>\n  ) | (\n    { __typename: 'GroupField' }\n    & Pick<GroupField, 'name' | 'id' | 'grid' | 'order' | 'label'>\n    & { fields: Maybe<Array<(\n      { __typename: 'DateTimeField' }\n      & Pick<DateTimeField, 'name' | 'order' | 'grid' | 'label'>\n    ) | (\n      { __typename: 'FileField' }\n      & Pick<FileField, 'name' | 'order' | 'grid' | 'label'>\n    ) | (\n      { __typename: 'GroupField' }\n      & Pick<GroupField, 'order' | 'grid' | 'label'>\n    ) | (\n      { __typename: 'InfoField' }\n      & Pick<InfoField, 'value' | 'order' | 'grid' | 'label'>\n    ) | (\n      { __typename: 'SelectField' }\n      & Pick<SelectField, 'name' | 'order' | 'grid' | 'label'>\n      & { options: Maybe<Array<(\n        { __typename?: 'SelectFieldOption' }\n        & Pick<SelectFieldOption, 'label' | 'value'>\n      )>> }\n    ) | (\n      { __typename: 'SwitchField' }\n      & Pick<SwitchField, 'name' | 'order' | 'grid' | 'label'>\n    ) | (\n      { __typename: 'TextAreaField' }\n      & Pick<TextAreaField, 'name' | 'rows' | 'rowsMax' | 'order' | 'grid' | 'label'>\n    ) | (\n      { __typename: 'TextField' }\n      & Pick<TextField, 'name' | 'order' | 'grid' | 'label'>\n    )>> }\n  ) | (\n    { __typename: 'InfoField' }\n    & Pick<InfoField, 'value' | 'id' | 'grid' | 'order' | 'label'>\n  ) | (\n    { __typename: 'SelectField' }\n    & Pick<SelectField, 'name' | 'id' | 'grid' | 'order' | 'label'>\n    & { options: Maybe<Array<(\n      { __typename?: 'SelectFieldOption' }\n      & Pick<SelectFieldOption, 'label' | 'value'>\n    )>> }\n  ) | (\n    { __typename: 'SwitchField' }\n    & Pick<SwitchField, 'name' | 'id' | 'grid' | 'order' | 'label'>\n  ) | (\n    { __typename: 'TextAreaField' }\n    & Pick<TextAreaField, 'name' | 'rows' | 'rowsMax' | 'id' | 'grid' | 'order' | 'label'>\n  ) | (\n    { __typename: 'TextField' }\n    & Pick<TextField, 'name' | 'id' | 'grid' | 'order' | 'label'>\n  )>> }\n);\n\nexport type ReportTabFragmentFragment = (\n  { __typename?: 'ClaimJob' }\n  & Pick<ClaimJob, 'id'>\n  & { reportForm: Maybe<(\n    { __typename?: 'Form' }\n    & Pick<Form, 'title'>\n    & { cards: Maybe<Array<(\n      { __typename?: 'Card' }\n      & Pick<Card, 'id'>\n      & FormCardFragmentFragment\n    )>> }\n  )>, reportData: Maybe<(\n    { __typename?: 'Report' }\n    & Pick<Report, 'data' | 'status'>\n  )> }\n);\n\nexport type SaveReportMutationVariables = {\n  claimId: Scalars['ID'],\n  data: Scalars['Json']\n};\n\n\nexport type SaveReportMutation = (\n  { __typename?: 'Mutation' }\n  & { claimReportUpsert: (\n    { __typename?: 'Report' }\n    & Pick<Report, 'id'>\n  ) }\n);\n\nexport type SubmitReportMutationVariables = {\n  claimId: Scalars['ID']\n};\n\n\nexport type SubmitReportMutation = (\n  { __typename?: 'Mutation' }\n  & { claimReportSubmit: (\n    { __typename?: 'Report' }\n    & Pick<Report, 'id'>\n  ) }\n);\n\nexport type ResetReportMutationVariables = {\n  claimId: Scalars['ID']\n};\n\n\nexport type ResetReportMutation = (\n  { __typename?: 'Mutation' }\n  & { claimReportReset: (\n    { __typename?: 'Report' }\n    & Pick<Report, 'id'>\n  ) }\n);\n\nexport type ClaimListBodyFragment = (\n  { __typename?: 'ClaimJob' }\n  & Pick<ClaimJob, 'id' | 'hasBuilding' | 'hasContents' | 'hasRestoration' | '_portfolios' | 'refNumber' | 'lodgeDate' | '_requestDate' | '_request' | '_claimValue' | '_claimStatus' | '_claimBuilder' | '_claimRestorer' | '_insuredPhone' | '_incidentAddress'>\n  & { insurer: Maybe<(\n    { __typename?: 'Company' }\n    & Pick<Company, 'companyName'>\n  )>, building: Maybe<(\n    { __typename?: 'ClaimPortfolio' }\n    & Pick<ClaimPortfolio, 'authorisedValue' | 'scopedValue' | 'daysAtStatus'>\n    & { jobSuppliers: Maybe<Array<Maybe<(\n      { __typename?: 'JobSupplier' }\n      & Pick<JobSupplier, 'requestDate' | 'requestType'>\n      & { quote: Maybe<(\n        { __typename?: 'JobQuote' }\n        & Pick<JobQuote, 'total'>\n        & { quoteStatus: Maybe<(\n          { __typename?: 'ClaimStatus' }\n          & Pick<ClaimStatus, 'statusName'>\n        )> }\n      )> }\n    )>>>, claimStatus: Maybe<(\n      { __typename?: 'ClaimStatus' }\n      & Pick<ClaimStatus, 'statusName'>\n    )>, authorisedSupplier: Maybe<(\n      { __typename?: 'Company' }\n      & Pick<Company, 'companyName'>\n    )>, scopingSupplier: Maybe<(\n      { __typename?: 'Company' }\n      & Pick<Company, 'companyName'>\n    )> }\n  )>, contents: Maybe<(\n    { __typename?: 'ClaimPortfolio' }\n    & { jobSuppliers: Maybe<Array<Maybe<(\n      { __typename?: 'JobSupplier' }\n      & Pick<JobSupplier, 'requestDate' | 'requestType'>\n      & { quote: Maybe<(\n        { __typename?: 'JobQuote' }\n        & Pick<JobQuote, 'total'>\n        & { quoteStatus: Maybe<(\n          { __typename?: 'ClaimStatus' }\n          & Pick<ClaimStatus, 'statusName'>\n        )> }\n      )> }\n    )>>>, claimStatus: Maybe<(\n      { __typename?: 'ClaimStatus' }\n      & Pick<ClaimStatus, 'statusName'>\n    )> }\n  )>, restoration: Maybe<(\n    { __typename?: 'ClaimPortfolio' }\n    & { jobSuppliers: Maybe<Array<Maybe<(\n      { __typename?: 'JobSupplier' }\n      & Pick<JobSupplier, 'requestDate' | 'requestType'>\n      & { quote: Maybe<(\n        { __typename?: 'JobQuote' }\n        & Pick<JobQuote, 'total'>\n        & { quoteStatus: Maybe<(\n          { __typename?: 'ClaimStatus' }\n          & Pick<ClaimStatus, 'statusName'>\n        )> }\n      )> }\n    )>>>, claimStatus: Maybe<(\n      { __typename?: 'ClaimStatus' }\n      & Pick<ClaimStatus, 'statusName'>\n    )>, authorisedSupplier: Maybe<(\n      { __typename?: 'Company' }\n      & Pick<Company, 'companyName'>\n    )>, scopingSupplier: Maybe<(\n      { __typename?: 'Company' }\n      & Pick<Company, 'companyName'>\n    )> }\n  )>, insured: Maybe<(\n    { __typename?: 'ContactDetail' }\n    & Pick<ContactDetail, 'name' | 'phone1' | 'phone2' | 'phone3' | 'email'>\n  )>, incidentDetail: Maybe<(\n    { __typename?: 'IncidentDetail' }\n    & Pick<IncidentDetail, 'incidentDate'>\n    & { riskAddress: Maybe<(\n      { __typename?: 'Address' }\n      & Pick<Address, 'suburb' | 'state' | 'line1' | 'postcode'>\n    )> }\n  )> }\n);\n\nexport type ClaimListFilterQueryVariables = {};\n\n\nexport type ClaimListFilterQuery = (\n  { __typename?: 'Query' }\n  & { currentUser: Maybe<(\n    { __typename?: 'AuthenticatedUser' }\n    & { claimFilters: Maybe<Array<Maybe<(\n      { __typename?: 'FilterInput' }\n      & Pick<FilterInput, 'id' | 'type' | 'label' | 'name'>\n      & { options: Maybe<Array<Maybe<(\n        { __typename?: 'FilterInputOption' }\n        & Pick<FilterInputOption, 'group' | 'label'>\n        & { value: FilterInputOption['id'] }\n      )>>> }\n    )>>> }\n  )> }\n);\n\nexport type ClaimListWaterfallFilterQueryVariables = {\n  where: ClaimStatusVolumeWhere\n};\n\n\nexport type ClaimListWaterfallFilterQuery = (\n  { __typename?: 'Query' }\n  & { currentUser: Maybe<(\n    { __typename?: 'AuthenticatedUser' }\n    & { waterfallFilters: Maybe<Array<(\n      { __typename?: 'ClaimStatusVolumeGroup' }\n      & Pick<ClaimStatusVolumeGroup, 'id'>\n      & { items: Array<(\n        { __typename?: 'ClaimStatusVolume' }\n        & Pick<ClaimStatusVolume, 'label' | 'claimCount' | 'color'>\n        & { value: ClaimStatusVolume['id'] }\n      )> }\n    )>> }\n  )> }\n);\n\nexport type ClaimListDataQueryVariables = {\n  first?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  where?: Maybe<ClaimJobFilter>\n};\n\n\nexport type ClaimListDataQuery = (\n  { __typename?: 'Query' }\n  & { currentUser: Maybe<(\n    { __typename?: 'AuthenticatedUser' }\n    & Pick<AuthenticatedUser, 'userType'>\n  )>, claimJobs: Maybe<(\n    { __typename?: 'ClaimJobConnection' }\n    & Pick<ClaimJobConnection, 'totalCount'>\n    & { edges: Maybe<Array<Maybe<(\n      { __typename?: 'ClaimJobEdge' }\n      & { node: Maybe<(\n        { __typename?: 'ClaimJob' }\n        & ClaimListBodyFragment\n      )> }\n    )>>>, pageInfo: (\n      { __typename?: 'PageInfo' }\n      & Pick<PageInfo, 'endCursor' | 'hasNextPage'>\n    ) }\n  )> }\n);\n\nexport type CommunicationActionAcknowledgeMutationVariables = {\n  where: EnDataPortfolioKey\n};\n\n\nexport type CommunicationActionAcknowledgeMutation = (\n  { __typename?: 'Mutation' }\n  & { claimCommunicationAcknoledge: Maybe<(\n    { __typename?: 'ClaimCommunicationPayload' }\n    & Pick<ClaimCommunicationPayload, 'messages' | 'success'>\n  )> }\n);\n\nexport type CommunicationActionReplyMutationVariables = {\n  input: ClaimCommunicationCreate\n};\n\n\nexport type CommunicationActionReplyMutation = (\n  { __typename?: 'Mutation' }\n  & { createClaimCommunication: Maybe<(\n    { __typename?: 'ClaimCommunicationPayload' }\n    & Pick<ClaimCommunicationPayload, 'messages' | 'success'>\n  )> }\n);\n\nexport type ClaimCommunicationBodyFragment = (\n  { __typename?: 'ClaimCommunication' }\n  & Pick<ClaimCommunication, 'id' | 'claimId' | 'portfolioType' | 'claimRef' | 'sendDate' | 'senderName' | 'senderCompanyName' | 'message' | 'senderCompanyId' | 'senderRole' | 'communicationId'>\n);\n\nexport type CommunicationHeaderFragmentFragment = (\n  { __typename?: 'FilterInput' }\n  & Pick<FilterInput, 'id' | 'type' | 'label' | 'name'>\n  & { options: Maybe<Array<Maybe<(\n    { __typename?: 'FilterInputOption' }\n    & Pick<FilterInputOption, 'group' | 'label'>\n    & { value: FilterInputOption['id'] }\n  )>>> }\n);\n\nexport type CommunicationListFiltersQueryVariables = {};\n\n\nexport type CommunicationListFiltersQuery = (\n  { __typename?: 'Query' }\n  & { currentUser: Maybe<(\n    { __typename?: 'AuthenticatedUser' }\n    & { communicationFilters: Maybe<Array<Maybe<(\n      { __typename?: 'FilterInput' }\n      & CommunicationHeaderFragmentFragment\n    )>>> }\n  )> }\n);\n\nexport type CommunicationsDataQueryVariables = {\n  first?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  where?: Maybe<CommunicationFilter>\n};\n\n\nexport type CommunicationsDataQuery = (\n  { __typename?: 'Query' }\n  & { claimCommunications: Maybe<(\n    { __typename?: 'ClaimCommunicationConnection' }\n    & Pick<ClaimCommunicationConnection, 'totalCount'>\n    & { edges: Maybe<Array<Maybe<(\n      { __typename?: 'ClaimCommunicationEdge' }\n      & { node: Maybe<(\n        { __typename?: 'ClaimCommunication' }\n        & ClaimCommunicationBodyFragment\n      )> }\n    )>>>, pageInfo: (\n      { __typename?: 'PageInfo' }\n      & Pick<PageInfo, 'endCursor' | 'hasNextPage'>\n    ) }\n  )> }\n);\n\nexport type KpiAlertDetailsQueryVariables = {\n  where: CaseReportIndex,\n  first?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>\n};\n\n\nexport type KpiAlertDetailsQuery = (\n  { __typename?: 'Query' }\n  & { reportingClaimJobGeneral: Maybe<(\n    { __typename?: 'ClaimJobGeneralReportConnection' }\n    & { edges: Maybe<Array<Maybe<(\n      { __typename?: 'ClaimJobGeneralReportEdge' }\n      & { node: Maybe<(\n        { __typename?: 'ClaimJobGeneral' }\n        & Pick<ClaimJobGeneral, 'id' | 'portfolioType' | 'refNumber' | 'insuredName' | 'caseManagerName' | 'daysAtStatus'>\n        & { status: Maybe<(\n          { __typename?: 'ClaimStatus' }\n          & Pick<ClaimStatus, 'statusName'>\n        )> }\n      )> }\n    )>>>, pageInfo: (\n      { __typename?: 'PageInfo' }\n      & Pick<PageInfo, 'endCursor' | 'hasNextPage'>\n    ) }\n  )> }\n);\n\nexport type DashboardHeaderFragmentFragment = (\n  { __typename?: 'FilterInput' }\n  & Pick<FilterInput, 'id' | 'type' | 'label' | 'name'>\n  & { options: Maybe<Array<Maybe<(\n    { __typename?: 'FilterInputOption' }\n    & Pick<FilterInputOption, 'group' | 'label'>\n    & { value: FilterInputOption['id'] }\n  )>>> }\n);\n\nexport type DashboardFiltersQueryVariables = {};\n\n\nexport type DashboardFiltersQuery = (\n  { __typename?: 'Query' }\n  & { currentUser: Maybe<(\n    { __typename?: 'AuthenticatedUser' }\n    & Pick<AuthenticatedUser, 'userType'>\n    & { dashboardFilters: Maybe<Array<Maybe<(\n      { __typename?: 'FilterInput' }\n      & DashboardHeaderFragmentFragment\n    )>>> }\n  )>, dashboardFilters: Maybe<Array<Maybe<(\n    { __typename?: 'FilterElement' }\n    & Pick<FilterElement, 'id' | 'name'>\n    & { options: Maybe<Array<Maybe<(\n      { __typename?: 'FilterOption' }\n      & Pick<FilterOption, 'group' | 'value'>\n      & { label: FilterOption['name'] }\n    )>>> }\n  )>>> }\n);\n\nexport type DashboardKpiQueryVariables = {\n  where: DashboardWidgetIndex\n};\n\n\nexport type DashboardKpiQuery = (\n  { __typename?: 'Query' }\n  & { dashboardWidgets: Maybe<Array<Maybe<(\n    { __typename?: 'WidgetGraphType' }\n    & Pick<WidgetGraphType, 'title' | 'viewName' | 'labels' | 'description'>\n    & { data: Maybe<Array<Maybe<(\n      { __typename?: 'WidgetData' }\n      & Pick<WidgetData, 'dataSetName' | 'internalFilterName' | 'legend' | 'valueDisplay' | 'valueGroup' | 'valueUnit' | 'valueSense' | 'values'>\n    )>>> }\n  )>>> }\n);\n\nexport type AppRootQueryVariables = {};\n\n\nexport type AppRootQuery = (\n  { __typename?: 'Query' }\n  & { currentUser: Maybe<(\n    { __typename?: 'AuthenticatedUser' }\n    & Pick<AuthenticatedUser, '_appRoutes' | '_rootRoute'>\n    & { _customisation: Maybe<(\n      { __typename?: 'AppCustomization' }\n      & Pick<AppCustomization, 'alias' | 'favicon' | 'logo' | 'companyLogo'>\n    )> }\n  )> }\n);\n\nexport type LoginQueryVariables = {};\n\n\nexport type LoginQuery = (\n  { __typename?: 'Query' }\n  & { me: Maybe<(\n    { __typename?: 'AuthenticatedUser' }\n    & Pick<AuthenticatedUser, 'id' | 'name'>\n  )> }\n);\n\nexport type SigninMutationVariables = {\n  input: UserCredential\n};\n\n\nexport type SigninMutation = (\n  { __typename?: 'Mutation' }\n  & { userAuthenticateAllServer: Maybe<Array<Maybe<(\n    { __typename?: 'UserValidation' }\n    & Pick<UserValidation, 'accessToken' | 'refreshToken'>\n    & { user: Maybe<(\n      { __typename?: 'User' }\n      & Pick<User, 'userName'>\n    )> }\n  )>>> }\n);\n\nexport const ClaimDetailsCardFragmentFragmentDoc = gql`\n    fragment ClaimDetailsCardFragment on Query {\n  me: currentUser {\n    userType\n  }\n  managers: claimFilterOptions(where: $managersWhere) {\n    label: name\n    value\n  }\n  adjusters: claimFilterOptions(where: $adjustersWhere) {\n    label: name\n    value\n  }\n  builders: claimFilterOptions(where: $buildersWhere) {\n    label: name\n    value\n  }\n  restorers: claimFilterOptions(where: $restorersWhere) {\n    label: name\n    value\n  }\n  eventTypes: claimFilterOptions(where: $eventTypeWhere) {\n    label: name\n    value\n  }\n  catCodes: claimFilterOptions(where: $catCodesWhere) {\n    label: name\n    value\n  }\n  policyTypes: claimFilterOptions(where: $policyTypesWhere) {\n    label: name\n    value\n  }\n  policyCovers: claimFilterOptions(where: $policyCoversWhere) {\n    label: name\n    value\n  }\n  internalAssessors: claimFilterOptions(where: $internalAssessorsWhere) {\n    label: name\n    value\n  }\n}\n    `;\nexport const ClaimDetailsCardMetaFragmentFragmentDoc = gql`\n    fragment ClaimDetailsCardMetaFragment on CompanyProfile {\n  contentsref\n  quickrepair\n  policyTypeSuppliersView\n  policyCoverSuppliersView\n  isToProvideSiteReportView\n  useInternalAssessor\n  cm2nd\n  enableMultipleRisks\n}\n    `;\nexport const CustomerDetailsCardFragmentFragmentDoc = gql`\n    fragment CustomerDetailsCardFragment on Query {\n  catCodes: claimFilterOptions(where: $catCodesWhere) {\n    label: name\n    value\n  }\n}\n    `;\nexport const CustomerDetailsCardMetaFragmentFragmentDoc = gql`\n    fragment CustomerDetailsCardMetaFragment on CompanyProfile {\n  companyName\n  policyTypeSuppliersView\n  insrefnumLength\n  removeHabitableAsbestos\n  setupcustomerlogin\n  hideCategoryOfClaim\n}\n    `;\nexport const QuotingBuildersCardFragmentFragmentDoc = gql`\n    fragment QuotingBuildersCardFragment on Query {\n  builders: claimFilterOptions(where: $buildersWhere) {\n    label: name\n    value\n  }\n}\n    `;\nexport const QuotingBuildersCardMetaFragmentFragmentDoc = gql`\n    fragment QuotingBuildersCardMetaFragment on CompanyProfile {\n  quotesperclaim\n}\n    `;\nexport const QuotingRestorersCardFragmentFragmentDoc = gql`\n    fragment QuotingRestorersCardFragment on Query {\n  restorers: claimFilterOptions(where: $restorersWhere) {\n    label: name\n    value\n  }\n}\n    `;\nexport const InfoCardDataFragmentFragmentDoc = gql`\n    fragment InfoCardDataFragment on ClaimJob {\n  insurer {\n    companyName\n    policyTypeSuppliersView\n    policyCoverSuppliersView\n  }\n  refNumber\n  insured {\n    name\n    phone1\n    phone2\n    phone3\n    email\n  }\n  incidentDetail {\n    riskAddress {\n      line1\n      suburb\n      state\n      postcode\n    }\n    eventType {\n      eventName\n    }\n    cATCode {\n      cATCodeName\n    }\n  }\n  _incidentAddress @client\n  insured {\n    name\n    phone1\n    phone2\n    phone3\n    email\n  }\n  _insuredPhone @client\n  lodgeDate\n  incidentDetail {\n    eventType {\n      eventName\n    }\n  }\n  incidentDetail {\n    cATCode {\n      cATCodeName\n    }\n  }\n  policyType {\n    policyTypeName\n  }\n  policyCover {\n    policyCoverName\n  }\n  insurer {\n    policyTypeSuppliersView\n    policyCoverSuppliersView\n  }\n  building {\n    claimStatus {\n      statusName\n    }\n    scopingSupplier {\n      companyName\n      companyPhone1\n      companyPhone2\n    }\n    authorisedSupplier {\n      companyName\n      companyPhone1\n      companyPhone2\n    }\n    jobSuppliers {\n      quote {\n        supplier {\n          companyName\n        }\n        quoteStatus: quoteJobStatus {\n          statusName\n        }\n      }\n    }\n    toCollectExcess\n    excessValue\n    _providerAndStatus @client\n    _portfolioTooltips @client\n  }\n  restoration {\n    claimStatus {\n      statusName\n    }\n    scopingSupplier {\n      companyName\n      companyPhone1\n      companyPhone2\n    }\n    authorisedSupplier {\n      companyName\n      companyPhone1\n      companyPhone2\n    }\n    jobSuppliers {\n      quote {\n        supplier {\n          companyName\n        }\n        quoteStatus: quoteJobStatus {\n          statusName\n        }\n      }\n    }\n    toCollectExcess\n    excessValue\n    _providerAndStatus @client\n    _portfolioTooltips @client\n  }\n  contents {\n    portfolioType\n    claimStatus {\n      statusName\n    }\n    toCollectExcess\n    excessValue\n    _providerAndStatus @client\n    _portfolioTooltips @client\n  }\n}\n    `;\nexport const AddClaimTypeDialogClaimFragmentFragmentDoc = gql`\n    fragment AddClaimTypeDialogClaimFragment on ClaimJob {\n  claimId\n  hasBuilding\n  hasContents\n  hasRestoration\n  _portfolios @client\n  insurer {\n    companyId\n  }\n  incidentDetail {\n    riskAddress {\n      postcode\n    }\n  }\n}\n    `;\nexport const AddDocumentClaimFragmentFragmentDoc = gql`\n    fragment AddDocumentClaimFragment on ClaimJob {\n  claimId\n  hasBuilding\n  hasContents\n  hasRestoration\n  _portfolios @client\n  insurer {\n    isFeeModule\n  }\n}\n    `;\nexport const AddDocumentMetaFragmentFragmentDoc = gql`\n    fragment AddDocumentMetaFragment on AuthenticatedUser {\n  userType\n}\n    `;\nexport const JobInfo_ClaimDetailsCardFragmentFragmentDoc = gql`\n    fragment JobInfo_ClaimDetailsCardFragment on Query {\n  managers: claimFilterOptions(where: $managersWhere) {\n    label: name\n    value\n  }\n  externalAdjusters: claimFilterOptions(where: $externalAdjustersWhere) {\n    label: name\n    value\n  }\n  eventTypes: claimFilterOptions(where: $eventTypeWhere) {\n    label: name\n    value\n  }\n  catCodes: claimFilterOptions(where: $catCodesWhere) {\n    label: name\n    value\n  }\n  policyTypes: claimFilterOptions(where: $policyTypesWhere) {\n    label: name\n    value\n  }\n  policyCovers: claimFilterOptions(where: $policyCoversWhere) {\n    label: name\n    value\n  }\n  internalAssessors: claimFilterOptions(where: $internalAssessorsWhere) {\n    label: name\n    value\n  }\n}\n    `;\nexport const JobInfo_ClaimDetailsCardMetaFragmentFragmentDoc = gql`\n    fragment JobInfo_ClaimDetailsCardMetaFragment on ClaimJob {\n  hasContents\n  insurer {\n    contentsref\n    quickrepair\n    policyTypeSuppliersView\n    policyCoverSuppliersView\n    enableMultipleRisks\n    additionalRefNo\n    useInternalAssessor\n    cm2nd\n  }\n  building {\n    toCollectExcess\n    excessValue\n  }\n  contents {\n    toCollectExcess\n    excessValue\n  }\n  restoration {\n    toCollectExcess\n    excessValue\n  }\n}\n    `;\nexport const JobInfo_CustomerInfoCardMetaFragmentFragmentDoc = gql`\n    fragment JobInfo_CustomerInfoCardMetaFragment on ClaimJob {\n  insurer {\n    setupcustomerlogin\n    removeHabitableAsbestos\n    hideCategoryOfClaim\n  }\n  actions {\n    actionType\n    isDisplay\n    isDisabled\n  }\n}\n    `;\nexport const JobInfo_QuotingBuilderCardFragmentFragmentDoc = gql`\n    fragment JobInfo_QuotingBuilderCardFragment on Query {\n  quotingBuilders: claimFilterOptions(where: $whereQuotingBuilder) {\n    label: name\n    value\n  }\n}\n    `;\nexport const JobInfo_QuotingRestorerCardFragmentFragmentDoc = gql`\n    fragment JobInfo_QuotingRestorerCardFragment on Query {\n  quotingRestorers: claimFilterOptions(where: $whereQuotingRestorer) {\n    label: name\n    value\n  }\n}\n    `;\nexport const JobInfoTabFragmentFragmentDoc = gql`\n    fragment JobInfoTabFragment on ClaimJob {\n  id\n  insurer {\n    companyId\n    companyName\n  }\n  incidentDetail {\n    incidentDate\n    hold\n    eventType {\n      eventTypeId\n    }\n    cATCode {\n      cATCodeId\n    }\n    riskAddress {\n      line1\n      line2\n      suburb\n      state\n      postcode\n    }\n    habitableProperty\n    category\n  }\n  caseManager {\n    managerId\n  }\n  externalLossAdjuster {\n    companyId\n  }\n  refNumber\n  contentsRefNum\n  lodgeDate\n  incidentDetail {\n    hold\n  }\n  incidentDetail {\n    eventType {\n      eventTypeId\n    }\n  }\n  incidentDetail {\n    cATCode {\n      cATCodeId\n    }\n  }\n  building {\n    toCollectExcess\n    excessValue\n    sumInsured\n    authorisedSupplier {\n      companyName\n    }\n    scopingSupplier {\n      companyId\n      companyName\n    }\n    jobSuppliers {\n      supplier {\n        companyId\n        companyName\n      }\n      quote {\n        supplier {\n          companyId\n          companyName\n        }\n      }\n    }\n  }\n  contents {\n    toCollectExcess\n    excessValue\n    sumInsured\n  }\n  restoration {\n    toCollectExcess\n    excessValue\n    sumInsured\n    authorisedSupplier {\n      companyName\n    }\n    scopingSupplier {\n      companyId\n      companyName\n    }\n    jobSuppliers {\n      supplier {\n        companyId\n        companyName\n      }\n      quote {\n        supplier {\n          companyId\n          companyName\n        }\n      }\n    }\n  }\n  policyType {\n    policyTypeId\n  }\n  policyCover {\n    policyCoverId\n  }\n  riskname\n  additionalRefNumber\n  homeAssessor {\n    assesorId\n  }\n  brc {\n    managerId\n  }\n  building {\n    authorisedSupplier {\n      companyName\n    }\n    scopingSupplier {\n      companyId\n      companyName\n    }\n    jobSuppliers {\n      supplier {\n        companyId\n        companyName\n      }\n      quote {\n        supplier {\n          companyId\n          companyName\n        }\n      }\n    }\n  }\n  _allocatedBuilder @client\n  restoration {\n    authorisedSupplier {\n      companyName\n    }\n    scopingSupplier {\n      companyId\n      companyName\n    }\n    jobSuppliers {\n      supplier {\n        companyId\n        companyName\n      }\n      quote {\n        supplier {\n          companyId\n          companyName\n        }\n      }\n    }\n  }\n  _allocatedRestorer @client\n  insured {\n    salutation\n    name\n    email\n    phone1\n    phone2\n    phone3\n    fax\n    postalAddress {\n      line1\n      line2\n      suburb\n      state\n      postcode\n    }\n  }\n  incidentDetail {\n    riskAddress {\n      line1\n      line2\n      suburb\n      state\n      postcode\n    }\n    habitableProperty\n    category\n  }\n  requireCustomLogin\n  customLoginEmail\n  tenantDetails {\n    name\n    phone1\n    phone2\n    phone3\n  }\n  claimDescription\n}\n    `;\nexport const JobNoteListFragmentFragmentDoc = gql`\n    fragment JobNoteListFragment on ClaimNote {\n  portfolioType\n  logDate\n  private\n  _privacy @client\n  message\n  user {\n    userName\n    company {\n      companyName\n    }\n  }\n}\n    `;\nexport const JobNotesFragmentFragmentDoc = gql`\n    fragment JobNotesFragment on ClaimJob {\n  actions {\n    actionType\n    name\n    isDisplay\n    isDisabled\n  }\n  building {\n    progress {\n      initialCallMade\n      appointmentBooked\n    }\n    claimStatus {\n      statusId\n    }\n    jobSuppliers {\n      quote {\n        id\n      }\n    }\n  }\n  restoration {\n    progress {\n      initialCallMade\n      appointmentBooked\n    }\n    claimStatus {\n      statusId\n    }\n    jobSuppliers {\n      quote {\n        id\n      }\n    }\n  }\n}\n    `;\nexport const FormCardFragmentFragmentDoc = gql`\n    fragment FormCardFragment on Card {\n  id\n  grid\n  order\n  title\n  fields {\n    __typename\n    id\n    grid\n    order\n    label\n    ... on InfoField {\n      value\n    }\n    ... on TextField {\n      name\n    }\n    ... on TextAreaField {\n      name\n      rows\n      rowsMax\n    }\n    ... on SelectField {\n      name\n      options {\n        label\n        value\n      }\n    }\n    ... on SwitchField {\n      name\n    }\n    ... on FileField {\n      name\n    }\n    ... on DateTimeField {\n      name\n    }\n    ... on GroupField {\n      name\n      fields {\n        __typename\n        order\n        grid\n        label\n        ... on InfoField {\n          value\n        }\n        ... on TextField {\n          name\n        }\n        ... on TextAreaField {\n          name\n          rows\n          rowsMax\n        }\n        ... on SelectField {\n          name\n          options {\n            label\n            value\n          }\n        }\n        ... on SwitchField {\n          name\n        }\n        ... on FileField {\n          name\n        }\n        ... on DateTimeField {\n          name\n        }\n      }\n    }\n  }\n}\n    `;\nexport const ReportTabFragmentFragmentDoc = gql`\n    fragment ReportTabFragment on ClaimJob {\n  id\n  reportForm {\n    title\n    cards {\n      id\n      ...FormCardFragment\n    }\n  }\n  reportData {\n    data\n    status\n  }\n}\n    ${FormCardFragmentFragmentDoc}`;\nexport const ClaimListBodyFragmentDoc = gql`\n    fragment ClaimListBody on ClaimJob {\n  id\n  hasBuilding\n  hasContents\n  hasRestoration\n  _portfolios @client\n  refNumber\n  insurer {\n    companyName\n  }\n  lodgeDate\n  building {\n    jobSuppliers {\n      requestDate\n      requestType\n      quote {\n        total\n        quoteStatus {\n          statusName\n        }\n      }\n    }\n    authorisedValue\n    scopedValue\n    claimStatus {\n      statusName\n    }\n    authorisedSupplier {\n      companyName\n    }\n    scopingSupplier {\n      companyName\n    }\n    daysAtStatus\n  }\n  contents {\n    jobSuppliers {\n      requestDate\n      requestType\n      quote {\n        total\n        quoteStatus {\n          statusName\n        }\n      }\n    }\n    claimStatus {\n      statusName\n    }\n  }\n  restoration {\n    jobSuppliers {\n      requestDate\n      requestType\n      quote {\n        total\n        quoteStatus {\n          statusName\n        }\n      }\n    }\n    claimStatus {\n      statusName\n    }\n    authorisedSupplier {\n      companyName\n    }\n    scopingSupplier {\n      companyName\n    }\n  }\n  _requestDate @client\n  _request @client\n  insured {\n    name\n    phone1\n    phone2\n    phone3\n    email\n  }\n  incidentDetail {\n    riskAddress {\n      suburb\n      state\n      line1\n      postcode\n    }\n    incidentDate\n  }\n  building {\n    authorisedValue\n    scopedValue\n  }\n  building {\n    jobSuppliers {\n      quote {\n        total\n        quoteStatus {\n          statusName\n        }\n      }\n    }\n  }\n  contents {\n    jobSuppliers {\n      quote {\n        total\n        quoteStatus {\n          statusName\n        }\n      }\n    }\n  }\n  restoration {\n    jobSuppliers {\n      quote {\n        total\n        quoteStatus {\n          statusName\n        }\n      }\n    }\n  }\n  _claimValue @client\n  building {\n    jobSuppliers {\n      quote {\n        quoteStatus {\n          statusName\n        }\n      }\n    }\n  }\n  building {\n    claimStatus {\n      statusName\n    }\n  }\n  contents {\n    jobSuppliers {\n      quote {\n        quoteStatus {\n          statusName\n        }\n      }\n    }\n  }\n  contents {\n    claimStatus {\n      statusName\n    }\n  }\n  restoration {\n    jobSuppliers {\n      quote {\n        quoteStatus {\n          statusName\n        }\n      }\n    }\n  }\n  restoration {\n    claimStatus {\n      statusName\n    }\n  }\n  _claimStatus @client\n  building {\n    authorisedSupplier {\n      companyName\n    }\n    scopingSupplier {\n      companyName\n    }\n  }\n  _claimBuilder @client\n  restoration {\n    authorisedSupplier {\n      companyName\n    }\n    scopingSupplier {\n      companyName\n    }\n  }\n  _claimRestorer @client\n  building {\n    claimStatus {\n      statusName\n    }\n  }\n  building {\n    daysAtStatus\n  }\n  restoration {\n    claimStatus {\n      statusName\n    }\n  }\n  contents {\n    claimStatus {\n      statusName\n    }\n  }\n  refNumber\n  insured {\n    name\n    phone1\n    phone2\n    phone3\n    email\n  }\n  _insuredPhone @client\n  incidentDetail {\n    incidentDate\n    riskAddress {\n      line1\n      suburb\n      state\n      postcode\n    }\n  }\n  _incidentAddress @client\n}\n    `;\nexport const ClaimCommunicationBodyFragmentDoc = gql`\n    fragment ClaimCommunicationBody on ClaimCommunication {\n  id\n  claimId\n  portfolioType\n  claimRef\n  sendDate\n  senderName\n  senderCompanyName\n  message\n  senderCompanyId\n  senderRole\n  communicationId\n}\n    `;\nexport const CommunicationHeaderFragmentFragmentDoc = gql`\n    fragment CommunicationHeaderFragment on FilterInput {\n  id\n  type\n  label\n  name\n  options {\n    group\n    label\n    value: id\n  }\n}\n    `;\nexport const DashboardHeaderFragmentFragmentDoc = gql`\n    fragment DashboardHeaderFragment on FilterInput {\n  id\n  type\n  label\n  name\n  options {\n    group\n    label\n    value: id\n  }\n}\n    `;\nexport const CommunicationmenuDocument = gql`\n    query Communicationmenu {\n  communications: claimCommuications(first: 2, where: {boxes: Inbox, acknowledged: false}) {\n    totalCount\n    edges {\n      node {\n        id\n        claimRef\n        message\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useCommunicationmenuQuery__\n *\n * To run a query within a React component, call `useCommunicationmenuQuery` and pass it any options that fit your needs.\n * When your component renders, `useCommunicationmenuQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCommunicationmenuQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useCommunicationmenuQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<CommunicationmenuQuery, CommunicationmenuQueryVariables>) {\n        return ApolloReactHooks.useQuery<CommunicationmenuQuery, CommunicationmenuQueryVariables>(CommunicationmenuDocument, baseOptions);\n      }\nexport function useCommunicationmenuLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CommunicationmenuQuery, CommunicationmenuQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<CommunicationmenuQuery, CommunicationmenuQueryVariables>(CommunicationmenuDocument, baseOptions);\n        }\nexport type CommunicationmenuQueryHookResult = ReturnType<typeof useCommunicationmenuQuery>;\nexport type CommunicationmenuLazyQueryHookResult = ReturnType<typeof useCommunicationmenuLazyQuery>;\nexport type CommunicationmenuQueryResult = ApolloReactCommon.QueryResult<CommunicationmenuQuery, CommunicationmenuQueryVariables>;\nexport const AddClaimDocument = gql`\n    mutation AddClaim($input: ClaimJobCreate!) {\n  createClaimJob(input: $input) {\n    success\n    messages\n    fieldErrors {\n      fieldName\n      level\n      message\n    }\n    result {\n      id\n      claimId\n    }\n  }\n}\n    `;\nexport type AddClaimMutationFn = ApolloReactCommon.MutationFunction<AddClaimMutation, AddClaimMutationVariables>;\n\n/**\n * __useAddClaimMutation__\n *\n * To run a mutation, you first call `useAddClaimMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddClaimMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addClaimMutation, { data, loading, error }] = useAddClaimMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useAddClaimMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AddClaimMutation, AddClaimMutationVariables>) {\n        return ApolloReactHooks.useMutation<AddClaimMutation, AddClaimMutationVariables>(AddClaimDocument, baseOptions);\n      }\nexport type AddClaimMutationHookResult = ReturnType<typeof useAddClaimMutation>;\nexport type AddClaimMutationResult = ApolloReactCommon.MutationResult<AddClaimMutation>;\nexport type AddClaimMutationOptions = ApolloReactCommon.BaseMutationOptions<AddClaimMutation, AddClaimMutationVariables>;\nexport const AddClaimRootDocument = gql`\n    query AddClaimRoot($companyWhere: ENDataPortfolioKey!, $managersWhere: ClaimJobFilter, $adjustersWhere: ClaimJobFilter, $buildersWhere: ClaimJobFilter, $restorersWhere: ClaimJobFilter, $eventTypeWhere: ClaimJobFilter, $catCodesWhere: ClaimJobFilter, $policyTypesWhere: ClaimJobFilter, $policyCoversWhere: ClaimJobFilter, $internalAssessorsWhere: ClaimJobFilter) {\n  ...CustomerDetailsCardFragment\n  ...ClaimDetailsCardFragment\n  ...QuotingBuildersCardFragment\n  ...QuotingRestorersCardFragment\n  company(where: $companyWhere) {\n    ...CustomerDetailsCardMetaFragment\n    ...ClaimDetailsCardMetaFragment\n    ...QuotingBuildersCardMetaFragment\n  }\n}\n    ${CustomerDetailsCardFragmentFragmentDoc}\n${ClaimDetailsCardFragmentFragmentDoc}\n${QuotingBuildersCardFragmentFragmentDoc}\n${QuotingRestorersCardFragmentFragmentDoc}\n${CustomerDetailsCardMetaFragmentFragmentDoc}\n${ClaimDetailsCardMetaFragmentFragmentDoc}\n${QuotingBuildersCardMetaFragmentFragmentDoc}`;\n\n/**\n * __useAddClaimRootQuery__\n *\n * To run a query within a React component, call `useAddClaimRootQuery` and pass it any options that fit your needs.\n * When your component renders, `useAddClaimRootQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAddClaimRootQuery({\n *   variables: {\n *      companyWhere: // value for 'companyWhere'\n *      managersWhere: // value for 'managersWhere'\n *      adjustersWhere: // value for 'adjustersWhere'\n *      buildersWhere: // value for 'buildersWhere'\n *      restorersWhere: // value for 'restorersWhere'\n *      eventTypeWhere: // value for 'eventTypeWhere'\n *      catCodesWhere: // value for 'catCodesWhere'\n *      policyTypesWhere: // value for 'policyTypesWhere'\n *      policyCoversWhere: // value for 'policyCoversWhere'\n *      internalAssessorsWhere: // value for 'internalAssessorsWhere'\n *   },\n * });\n */\nexport function useAddClaimRootQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AddClaimRootQuery, AddClaimRootQueryVariables>) {\n        return ApolloReactHooks.useQuery<AddClaimRootQuery, AddClaimRootQueryVariables>(AddClaimRootDocument, baseOptions);\n      }\nexport function useAddClaimRootLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AddClaimRootQuery, AddClaimRootQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<AddClaimRootQuery, AddClaimRootQueryVariables>(AddClaimRootDocument, baseOptions);\n        }\nexport type AddClaimRootQueryHookResult = ReturnType<typeof useAddClaimRootQuery>;\nexport type AddClaimRootLazyQueryHookResult = ReturnType<typeof useAddClaimRootLazyQuery>;\nexport type AddClaimRootQueryResult = ApolloReactCommon.QueryResult<AddClaimRootQuery, AddClaimRootQueryVariables>;\nexport const ChooseCompanyDocument = gql`\n    query ChooseCompany {\n  claimFilterOptions(where: {subject: \"insurers\"}) {\n    label: name\n    value\n  }\n}\n    `;\n\n/**\n * __useChooseCompanyQuery__\n *\n * To run a query within a React component, call `useChooseCompanyQuery` and pass it any options that fit your needs.\n * When your component renders, `useChooseCompanyQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useChooseCompanyQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useChooseCompanyQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ChooseCompanyQuery, ChooseCompanyQueryVariables>) {\n        return ApolloReactHooks.useQuery<ChooseCompanyQuery, ChooseCompanyQueryVariables>(ChooseCompanyDocument, baseOptions);\n      }\nexport function useChooseCompanyLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ChooseCompanyQuery, ChooseCompanyQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<ChooseCompanyQuery, ChooseCompanyQueryVariables>(ChooseCompanyDocument, baseOptions);\n        }\nexport type ChooseCompanyQueryHookResult = ReturnType<typeof useChooseCompanyQuery>;\nexport type ChooseCompanyLazyQueryHookResult = ReturnType<typeof useChooseCompanyLazyQuery>;\nexport type ChooseCompanyQueryResult = ApolloReactCommon.QueryResult<ChooseCompanyQuery, ChooseCompanyQueryVariables>;\nexport const ClaimMetaContextDocument = gql`\n    query ClaimMetaContext($where: ENDataEntityKey!) {\n  me: currentUser {\n    ...AddDocumentMetaFragment\n  }\n  user: me {\n    company {\n      companyId\n    }\n  }\n  claim: claimJob(where: $where) {\n    id\n    claimId\n    ...AddClaimTypeDialogClaimFragment\n    ...AddDocumentClaimFragment\n    ...JobInfo_ClaimDetailsCardMetaFragment\n    ...JobInfo_CustomerInfoCardMetaFragment\n  }\n}\n    ${AddDocumentMetaFragmentFragmentDoc}\n${AddClaimTypeDialogClaimFragmentFragmentDoc}\n${AddDocumentClaimFragmentFragmentDoc}\n${JobInfo_ClaimDetailsCardMetaFragmentFragmentDoc}\n${JobInfo_CustomerInfoCardMetaFragmentFragmentDoc}`;\n\n/**\n * __useClaimMetaContextQuery__\n *\n * To run a query within a React component, call `useClaimMetaContextQuery` and pass it any options that fit your needs.\n * When your component renders, `useClaimMetaContextQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useClaimMetaContextQuery({\n *   variables: {\n *      where: // value for 'where'\n *   },\n * });\n */\nexport function useClaimMetaContextQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ClaimMetaContextQuery, ClaimMetaContextQueryVariables>) {\n        return ApolloReactHooks.useQuery<ClaimMetaContextQuery, ClaimMetaContextQueryVariables>(ClaimMetaContextDocument, baseOptions);\n      }\nexport function useClaimMetaContextLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ClaimMetaContextQuery, ClaimMetaContextQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<ClaimMetaContextQuery, ClaimMetaContextQueryVariables>(ClaimMetaContextDocument, baseOptions);\n        }\nexport type ClaimMetaContextQueryHookResult = ReturnType<typeof useClaimMetaContextQuery>;\nexport type ClaimMetaContextLazyQueryHookResult = ReturnType<typeof useClaimMetaContextLazyQuery>;\nexport type ClaimMetaContextQueryResult = ApolloReactCommon.QueryResult<ClaimMetaContextQuery, ClaimMetaContextQueryVariables>;\nexport const AddClaimTypeDialogDocument = gql`\n    query AddClaimTypeDialog($buildersWhere: ClaimJobFilter, $restorersWhere: ClaimJobFilter) {\n  building: claimFilterOptions(where: $buildersWhere) {\n    label: name\n    value\n  }\n  restoration: claimFilterOptions(where: $restorersWhere) {\n    label: name\n    value\n  }\n}\n    `;\n\n/**\n * __useAddClaimTypeDialogQuery__\n *\n * To run a query within a React component, call `useAddClaimTypeDialogQuery` and pass it any options that fit your needs.\n * When your component renders, `useAddClaimTypeDialogQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAddClaimTypeDialogQuery({\n *   variables: {\n *      buildersWhere: // value for 'buildersWhere'\n *      restorersWhere: // value for 'restorersWhere'\n *   },\n * });\n */\nexport function useAddClaimTypeDialogQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AddClaimTypeDialogQuery, AddClaimTypeDialogQueryVariables>) {\n        return ApolloReactHooks.useQuery<AddClaimTypeDialogQuery, AddClaimTypeDialogQueryVariables>(AddClaimTypeDialogDocument, baseOptions);\n      }\nexport function useAddClaimTypeDialogLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AddClaimTypeDialogQuery, AddClaimTypeDialogQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<AddClaimTypeDialogQuery, AddClaimTypeDialogQueryVariables>(AddClaimTypeDialogDocument, baseOptions);\n        }\nexport type AddClaimTypeDialogQueryHookResult = ReturnType<typeof useAddClaimTypeDialogQuery>;\nexport type AddClaimTypeDialogLazyQueryHookResult = ReturnType<typeof useAddClaimTypeDialogLazyQuery>;\nexport type AddClaimTypeDialogQueryResult = ApolloReactCommon.QueryResult<AddClaimTypeDialogQuery, AddClaimTypeDialogQueryVariables>;\nexport const AddClaimTypeDocument = gql`\n    mutation AddClaimType($input: AddPortfolioInput!, $where: ENDataEntityKey!) {\n  claimAddPortfolio(input: $input, where: $where) {\n    success\n    messages\n  }\n}\n    `;\nexport type AddClaimTypeMutationFn = ApolloReactCommon.MutationFunction<AddClaimTypeMutation, AddClaimTypeMutationVariables>;\n\n/**\n * __useAddClaimTypeMutation__\n *\n * To run a mutation, you first call `useAddClaimTypeMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddClaimTypeMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addClaimTypeMutation, { data, loading, error }] = useAddClaimTypeMutation({\n *   variables: {\n *      input: // value for 'input'\n *      where: // value for 'where'\n *   },\n * });\n */\nexport function useAddClaimTypeMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AddClaimTypeMutation, AddClaimTypeMutationVariables>) {\n        return ApolloReactHooks.useMutation<AddClaimTypeMutation, AddClaimTypeMutationVariables>(AddClaimTypeDocument, baseOptions);\n      }\nexport type AddClaimTypeMutationHookResult = ReturnType<typeof useAddClaimTypeMutation>;\nexport type AddClaimTypeMutationResult = ApolloReactCommon.MutationResult<AddClaimTypeMutation>;\nexport type AddClaimTypeMutationOptions = ApolloReactCommon.BaseMutationOptions<AddClaimTypeMutation, AddClaimTypeMutationVariables>;\nexport const AddCommunicationActionDocument = gql`\n    query AddCommunicationAction($where: ClaimParticipantIndex) {\n  claimParticipants(where: $where) {\n    group: companyType\n    label: companyName\n    value: companyId\n    isLossAdjuster\n  }\n}\n    `;\n\n/**\n * __useAddCommunicationActionQuery__\n *\n * To run a query within a React component, call `useAddCommunicationActionQuery` and pass it any options that fit your needs.\n * When your component renders, `useAddCommunicationActionQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAddCommunicationActionQuery({\n *   variables: {\n *      where: // value for 'where'\n *   },\n * });\n */\nexport function useAddCommunicationActionQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AddCommunicationActionQuery, AddCommunicationActionQueryVariables>) {\n        return ApolloReactHooks.useQuery<AddCommunicationActionQuery, AddCommunicationActionQueryVariables>(AddCommunicationActionDocument, baseOptions);\n      }\nexport function useAddCommunicationActionLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AddCommunicationActionQuery, AddCommunicationActionQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<AddCommunicationActionQuery, AddCommunicationActionQueryVariables>(AddCommunicationActionDocument, baseOptions);\n        }\nexport type AddCommunicationActionQueryHookResult = ReturnType<typeof useAddCommunicationActionQuery>;\nexport type AddCommunicationActionLazyQueryHookResult = ReturnType<typeof useAddCommunicationActionLazyQuery>;\nexport type AddCommunicationActionQueryResult = ApolloReactCommon.QueryResult<AddCommunicationActionQuery, AddCommunicationActionQueryVariables>;\nexport const AddCommunicationDocument = gql`\n    mutation AddCommunication($input: ClaimCommunicationCreate!) {\n  createClaimCommunication(input: $input) {\n    messages\n    success\n  }\n}\n    `;\nexport type AddCommunicationMutationFn = ApolloReactCommon.MutationFunction<AddCommunicationMutation, AddCommunicationMutationVariables>;\n\n/**\n * __useAddCommunicationMutation__\n *\n * To run a mutation, you first call `useAddCommunicationMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddCommunicationMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addCommunicationMutation, { data, loading, error }] = useAddCommunicationMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useAddCommunicationMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AddCommunicationMutation, AddCommunicationMutationVariables>) {\n        return ApolloReactHooks.useMutation<AddCommunicationMutation, AddCommunicationMutationVariables>(AddCommunicationDocument, baseOptions);\n      }\nexport type AddCommunicationMutationHookResult = ReturnType<typeof useAddCommunicationMutation>;\nexport type AddCommunicationMutationResult = ApolloReactCommon.MutationResult<AddCommunicationMutation>;\nexport type AddCommunicationMutationOptions = ApolloReactCommon.BaseMutationOptions<AddCommunicationMutation, AddCommunicationMutationVariables>;\nexport const UploadDocumentDocument = gql`\n    mutation UploadDocument($input: ClaimDocumentCreate!) {\n  createClaimDocument(input: $input) {\n    success\n    messages\n  }\n}\n    `;\nexport type UploadDocumentMutationFn = ApolloReactCommon.MutationFunction<UploadDocumentMutation, UploadDocumentMutationVariables>;\n\n/**\n * __useUploadDocumentMutation__\n *\n * To run a mutation, you first call `useUploadDocumentMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUploadDocumentMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [uploadDocumentMutation, { data, loading, error }] = useUploadDocumentMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useUploadDocumentMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UploadDocumentMutation, UploadDocumentMutationVariables>) {\n        return ApolloReactHooks.useMutation<UploadDocumentMutation, UploadDocumentMutationVariables>(UploadDocumentDocument, baseOptions);\n      }\nexport type UploadDocumentMutationHookResult = ReturnType<typeof useUploadDocumentMutation>;\nexport type UploadDocumentMutationResult = ApolloReactCommon.MutationResult<UploadDocumentMutation>;\nexport type UploadDocumentMutationOptions = ApolloReactCommon.BaseMutationOptions<UploadDocumentMutation, UploadDocumentMutationVariables>;\nexport const AddJobNoteDocument = gql`\n    mutation AddJobNote($input: ClaimNoteCreate!) {\n  createClaimNote(input: $input) {\n    success\n    messages\n  }\n}\n    `;\nexport type AddJobNoteMutationFn = ApolloReactCommon.MutationFunction<AddJobNoteMutation, AddJobNoteMutationVariables>;\n\n/**\n * __useAddJobNoteMutation__\n *\n * To run a mutation, you first call `useAddJobNoteMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddJobNoteMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addJobNoteMutation, { data, loading, error }] = useAddJobNoteMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useAddJobNoteMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AddJobNoteMutation, AddJobNoteMutationVariables>) {\n        return ApolloReactHooks.useMutation<AddJobNoteMutation, AddJobNoteMutationVariables>(AddJobNoteDocument, baseOptions);\n      }\nexport type AddJobNoteMutationHookResult = ReturnType<typeof useAddJobNoteMutation>;\nexport type AddJobNoteMutationResult = ApolloReactCommon.MutationResult<AddJobNoteMutation>;\nexport type AddJobNoteMutationOptions = ApolloReactCommon.BaseMutationOptions<AddJobNoteMutation, AddJobNoteMutationVariables>;\nexport const NextStepDialogDocument = gql`\n    query NextStepDialog($where: ENDataEntityKey!) {\n  nextSteps: claimNextStep(where: $where) {\n    statusName\n    description\n    nextStep\n    portfolioType\n  }\n}\n    `;\n\n/**\n * __useNextStepDialogQuery__\n *\n * To run a query within a React component, call `useNextStepDialogQuery` and pass it any options that fit your needs.\n * When your component renders, `useNextStepDialogQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useNextStepDialogQuery({\n *   variables: {\n *      where: // value for 'where'\n *   },\n * });\n */\nexport function useNextStepDialogQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<NextStepDialogQuery, NextStepDialogQueryVariables>) {\n        return ApolloReactHooks.useQuery<NextStepDialogQuery, NextStepDialogQueryVariables>(NextStepDialogDocument, baseOptions);\n      }\nexport function useNextStepDialogLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<NextStepDialogQuery, NextStepDialogQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<NextStepDialogQuery, NextStepDialogQueryVariables>(NextStepDialogDocument, baseOptions);\n        }\nexport type NextStepDialogQueryHookResult = ReturnType<typeof useNextStepDialogQuery>;\nexport type NextStepDialogLazyQueryHookResult = ReturnType<typeof useNextStepDialogLazyQuery>;\nexport type NextStepDialogQueryResult = ApolloReactCommon.QueryResult<NextStepDialogQuery, NextStepDialogQueryVariables>;\nexport const ClaimDetailsDocument = gql`\n    query ClaimDetails($claimId: ID!) {\n  claimJob(where: {id: $claimId}) {\n    ...InfoCardDataFragment\n    ...JobInfoTabFragment\n    ...ReportTabFragment\n    ...JobNotesFragment\n  }\n}\n    ${InfoCardDataFragmentFragmentDoc}\n${JobInfoTabFragmentFragmentDoc}\n${ReportTabFragmentFragmentDoc}\n${JobNotesFragmentFragmentDoc}`;\n\n/**\n * __useClaimDetailsQuery__\n *\n * To run a query within a React component, call `useClaimDetailsQuery` and pass it any options that fit your needs.\n * When your component renders, `useClaimDetailsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useClaimDetailsQuery({\n *   variables: {\n *      claimId: // value for 'claimId'\n *   },\n * });\n */\nexport function useClaimDetailsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ClaimDetailsQuery, ClaimDetailsQueryVariables>) {\n        return ApolloReactHooks.useQuery<ClaimDetailsQuery, ClaimDetailsQueryVariables>(ClaimDetailsDocument, baseOptions);\n      }\nexport function useClaimDetailsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ClaimDetailsQuery, ClaimDetailsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<ClaimDetailsQuery, ClaimDetailsQueryVariables>(ClaimDetailsDocument, baseOptions);\n        }\nexport type ClaimDetailsQueryHookResult = ReturnType<typeof useClaimDetailsQuery>;\nexport type ClaimDetailsLazyQueryHookResult = ReturnType<typeof useClaimDetailsLazyQuery>;\nexport type ClaimDetailsQueryResult = ApolloReactCommon.QueryResult<ClaimDetailsQuery, ClaimDetailsQueryVariables>;\nexport const JobInfoDocument = gql`\n    query JobInfo($managersWhere: ClaimJobFilter, $externalAdjustersWhere: ClaimJobFilter, $eventTypeWhere: ClaimJobFilter, $catCodesWhere: ClaimJobFilter, $policyTypesWhere: ClaimJobFilter, $policyCoversWhere: ClaimJobFilter, $internalAssessorsWhere: ClaimJobFilter, $whereQuotingBuilder: ClaimJobFilter, $whereQuotingRestorer: ClaimJobFilter) {\n  ...JobInfo_ClaimDetailsCardFragment\n  ...JobInfo_QuotingBuilderCardFragment\n  ...JobInfo_QuotingRestorerCardFragment\n  _states @client {\n    label @client\n    value @client\n  }\n  _claimCategories @client {\n    label @client\n    value @client\n  }\n}\n    ${JobInfo_ClaimDetailsCardFragmentFragmentDoc}\n${JobInfo_QuotingBuilderCardFragmentFragmentDoc}\n${JobInfo_QuotingRestorerCardFragmentFragmentDoc}`;\n\n/**\n * __useJobInfoQuery__\n *\n * To run a query within a React component, call `useJobInfoQuery` and pass it any options that fit your needs.\n * When your component renders, `useJobInfoQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useJobInfoQuery({\n *   variables: {\n *      managersWhere: // value for 'managersWhere'\n *      externalAdjustersWhere: // value for 'externalAdjustersWhere'\n *      eventTypeWhere: // value for 'eventTypeWhere'\n *      catCodesWhere: // value for 'catCodesWhere'\n *      policyTypesWhere: // value for 'policyTypesWhere'\n *      policyCoversWhere: // value for 'policyCoversWhere'\n *      internalAssessorsWhere: // value for 'internalAssessorsWhere'\n *      whereQuotingBuilder: // value for 'whereQuotingBuilder'\n *      whereQuotingRestorer: // value for 'whereQuotingRestorer'\n *   },\n * });\n */\nexport function useJobInfoQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<JobInfoQuery, JobInfoQueryVariables>) {\n        return ApolloReactHooks.useQuery<JobInfoQuery, JobInfoQueryVariables>(JobInfoDocument, baseOptions);\n      }\nexport function useJobInfoLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<JobInfoQuery, JobInfoQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<JobInfoQuery, JobInfoQueryVariables>(JobInfoDocument, baseOptions);\n        }\nexport type JobInfoQueryHookResult = ReturnType<typeof useJobInfoQuery>;\nexport type JobInfoLazyQueryHookResult = ReturnType<typeof useJobInfoLazyQuery>;\nexport type JobInfoQueryResult = ApolloReactCommon.QueryResult<JobInfoQuery, JobInfoQueryVariables>;\nexport const JobInfoTabUpdateDocument = gql`\n    mutation JobInfoTabUpdate($input: ClaimJobInput!, $where: ENDataEntityKey!) {\n  updateClaimJob(input: $input, where: $where) {\n    success\n    messages\n    fieldErrors {\n      fieldName\n      level\n      message\n    }\n  }\n}\n    `;\nexport type JobInfoTabUpdateMutationFn = ApolloReactCommon.MutationFunction<JobInfoTabUpdateMutation, JobInfoTabUpdateMutationVariables>;\n\n/**\n * __useJobInfoTabUpdateMutation__\n *\n * To run a mutation, you first call `useJobInfoTabUpdateMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useJobInfoTabUpdateMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [jobInfoTabUpdateMutation, { data, loading, error }] = useJobInfoTabUpdateMutation({\n *   variables: {\n *      input: // value for 'input'\n *      where: // value for 'where'\n *   },\n * });\n */\nexport function useJobInfoTabUpdateMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<JobInfoTabUpdateMutation, JobInfoTabUpdateMutationVariables>) {\n        return ApolloReactHooks.useMutation<JobInfoTabUpdateMutation, JobInfoTabUpdateMutationVariables>(JobInfoTabUpdateDocument, baseOptions);\n      }\nexport type JobInfoTabUpdateMutationHookResult = ReturnType<typeof useJobInfoTabUpdateMutation>;\nexport type JobInfoTabUpdateMutationResult = ApolloReactCommon.MutationResult<JobInfoTabUpdateMutation>;\nexport type JobInfoTabUpdateMutationOptions = ApolloReactCommon.BaseMutationOptions<JobInfoTabUpdateMutation, JobInfoTabUpdateMutationVariables>;\nexport const JobNotesDocument = gql`\n    query JobNotes($where: ClaimItemFilter, $first: Int, $after: String) {\n  claimNotes(where: $where, first: $first, after: $after) {\n    edges {\n      node {\n        id\n        ...JobNoteListFragment\n      }\n    }\n  }\n}\n    ${JobNoteListFragmentFragmentDoc}`;\n\n/**\n * __useJobNotesQuery__\n *\n * To run a query within a React component, call `useJobNotesQuery` and pass it any options that fit your needs.\n * When your component renders, `useJobNotesQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useJobNotesQuery({\n *   variables: {\n *      where: // value for 'where'\n *      first: // value for 'first'\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useJobNotesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<JobNotesQuery, JobNotesQueryVariables>) {\n        return ApolloReactHooks.useQuery<JobNotesQuery, JobNotesQueryVariables>(JobNotesDocument, baseOptions);\n      }\nexport function useJobNotesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<JobNotesQuery, JobNotesQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<JobNotesQuery, JobNotesQueryVariables>(JobNotesDocument, baseOptions);\n        }\nexport type JobNotesQueryHookResult = ReturnType<typeof useJobNotesQuery>;\nexport type JobNotesLazyQueryHookResult = ReturnType<typeof useJobNotesLazyQuery>;\nexport type JobNotesQueryResult = ApolloReactCommon.QueryResult<JobNotesQuery, JobNotesQueryVariables>;\nexport const AppointmentMadeDocument = gql`\n    mutation AppointmentMade($id: ID!, $input: AppointmentInput!) {\n  claimMakeAppointment(where: {id: $id}, input: $input) {\n    success\n    messages\n  }\n}\n    `;\nexport type AppointmentMadeMutationFn = ApolloReactCommon.MutationFunction<AppointmentMadeMutation, AppointmentMadeMutationVariables>;\n\n/**\n * __useAppointmentMadeMutation__\n *\n * To run a mutation, you first call `useAppointmentMadeMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAppointmentMadeMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [appointmentMadeMutation, { data, loading, error }] = useAppointmentMadeMutation({\n *   variables: {\n *      id: // value for 'id'\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useAppointmentMadeMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AppointmentMadeMutation, AppointmentMadeMutationVariables>) {\n        return ApolloReactHooks.useMutation<AppointmentMadeMutation, AppointmentMadeMutationVariables>(AppointmentMadeDocument, baseOptions);\n      }\nexport type AppointmentMadeMutationHookResult = ReturnType<typeof useAppointmentMadeMutation>;\nexport type AppointmentMadeMutationResult = ApolloReactCommon.MutationResult<AppointmentMadeMutation>;\nexport type AppointmentMadeMutationOptions = ApolloReactCommon.BaseMutationOptions<AppointmentMadeMutation, AppointmentMadeMutationVariables>;\nexport const CancelAwaitingInfoDocument = gql`\n    mutation CancelAwaitingInfo($where: ENDataPortfolioKey!) {\n  claimCancelAwaitingInfo(where: $where) {\n    success\n    messages\n  }\n}\n    `;\nexport type CancelAwaitingInfoMutationFn = ApolloReactCommon.MutationFunction<CancelAwaitingInfoMutation, CancelAwaitingInfoMutationVariables>;\n\n/**\n * __useCancelAwaitingInfoMutation__\n *\n * To run a mutation, you first call `useCancelAwaitingInfoMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCancelAwaitingInfoMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [cancelAwaitingInfoMutation, { data, loading, error }] = useCancelAwaitingInfoMutation({\n *   variables: {\n *      where: // value for 'where'\n *   },\n * });\n */\nexport function useCancelAwaitingInfoMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CancelAwaitingInfoMutation, CancelAwaitingInfoMutationVariables>) {\n        return ApolloReactHooks.useMutation<CancelAwaitingInfoMutation, CancelAwaitingInfoMutationVariables>(CancelAwaitingInfoDocument, baseOptions);\n      }\nexport type CancelAwaitingInfoMutationHookResult = ReturnType<typeof useCancelAwaitingInfoMutation>;\nexport type CancelAwaitingInfoMutationResult = ApolloReactCommon.MutationResult<CancelAwaitingInfoMutation>;\nexport type CancelAwaitingInfoMutationOptions = ApolloReactCommon.BaseMutationOptions<CancelAwaitingInfoMutation, CancelAwaitingInfoMutationVariables>;\nexport const AddAwaitingInfoDocument = gql`\n    mutation AddAwaitingInfo($input: AwaitingInfoClaimInputType!, $where: ENDataPortfolioKey!) {\n  claimAwaitingInfo(input: $input, where: $where) {\n    success\n    messages\n  }\n}\n    `;\nexport type AddAwaitingInfoMutationFn = ApolloReactCommon.MutationFunction<AddAwaitingInfoMutation, AddAwaitingInfoMutationVariables>;\n\n/**\n * __useAddAwaitingInfoMutation__\n *\n * To run a mutation, you first call `useAddAwaitingInfoMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddAwaitingInfoMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addAwaitingInfoMutation, { data, loading, error }] = useAddAwaitingInfoMutation({\n *   variables: {\n *      input: // value for 'input'\n *      where: // value for 'where'\n *   },\n * });\n */\nexport function useAddAwaitingInfoMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AddAwaitingInfoMutation, AddAwaitingInfoMutationVariables>) {\n        return ApolloReactHooks.useMutation<AddAwaitingInfoMutation, AddAwaitingInfoMutationVariables>(AddAwaitingInfoDocument, baseOptions);\n      }\nexport type AddAwaitingInfoMutationHookResult = ReturnType<typeof useAddAwaitingInfoMutation>;\nexport type AddAwaitingInfoMutationResult = ApolloReactCommon.MutationResult<AddAwaitingInfoMutation>;\nexport type AddAwaitingInfoMutationOptions = ApolloReactCommon.BaseMutationOptions<AddAwaitingInfoMutation, AddAwaitingInfoMutationVariables>;\nexport const AwaitingInfoFormDocument = gql`\n    query AwaitingInfoForm($portfolios: [PortfolioType]) {\n  claimFilterOptions(where: {subject: \"awaitingInfoReasons\", portfolios: $portfolios}) {\n    label: name\n    value\n  }\n}\n    `;\n\n/**\n * __useAwaitingInfoFormQuery__\n *\n * To run a query within a React component, call `useAwaitingInfoFormQuery` and pass it any options that fit your needs.\n * When your component renders, `useAwaitingInfoFormQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAwaitingInfoFormQuery({\n *   variables: {\n *      portfolios: // value for 'portfolios'\n *   },\n * });\n */\nexport function useAwaitingInfoFormQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AwaitingInfoFormQuery, AwaitingInfoFormQueryVariables>) {\n        return ApolloReactHooks.useQuery<AwaitingInfoFormQuery, AwaitingInfoFormQueryVariables>(AwaitingInfoFormDocument, baseOptions);\n      }\nexport function useAwaitingInfoFormLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AwaitingInfoFormQuery, AwaitingInfoFormQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<AwaitingInfoFormQuery, AwaitingInfoFormQueryVariables>(AwaitingInfoFormDocument, baseOptions);\n        }\nexport type AwaitingInfoFormQueryHookResult = ReturnType<typeof useAwaitingInfoFormQuery>;\nexport type AwaitingInfoFormLazyQueryHookResult = ReturnType<typeof useAwaitingInfoFormLazyQuery>;\nexport type AwaitingInfoFormQueryResult = ApolloReactCommon.QueryResult<AwaitingInfoFormQuery, AwaitingInfoFormQueryVariables>;\nexport const ChangeAppointmentDocument = gql`\n    mutation ChangeAppointment($id: ID!, $input: AppointmentInput!) {\n  claimMakeAppointment(where: {id: $id}, input: $input) {\n    success\n    messages\n  }\n}\n    `;\nexport type ChangeAppointmentMutationFn = ApolloReactCommon.MutationFunction<ChangeAppointmentMutation, ChangeAppointmentMutationVariables>;\n\n/**\n * __useChangeAppointmentMutation__\n *\n * To run a mutation, you first call `useChangeAppointmentMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useChangeAppointmentMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [changeAppointmentMutation, { data, loading, error }] = useChangeAppointmentMutation({\n *   variables: {\n *      id: // value for 'id'\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useChangeAppointmentMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ChangeAppointmentMutation, ChangeAppointmentMutationVariables>) {\n        return ApolloReactHooks.useMutation<ChangeAppointmentMutation, ChangeAppointmentMutationVariables>(ChangeAppointmentDocument, baseOptions);\n      }\nexport type ChangeAppointmentMutationHookResult = ReturnType<typeof useChangeAppointmentMutation>;\nexport type ChangeAppointmentMutationResult = ApolloReactCommon.MutationResult<ChangeAppointmentMutation>;\nexport type ChangeAppointmentMutationOptions = ApolloReactCommon.BaseMutationOptions<ChangeAppointmentMutation, ChangeAppointmentMutationVariables>;\nexport const InitCallDocument = gql`\n    mutation InitCall($id: ID!) {\n  claimInitialCall(where: {id: $id}) {\n    success\n    messages\n  }\n}\n    `;\nexport type InitCallMutationFn = ApolloReactCommon.MutationFunction<InitCallMutation, InitCallMutationVariables>;\n\n/**\n * __useInitCallMutation__\n *\n * To run a mutation, you first call `useInitCallMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useInitCallMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [initCallMutation, { data, loading, error }] = useInitCallMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useInitCallMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<InitCallMutation, InitCallMutationVariables>) {\n        return ApolloReactHooks.useMutation<InitCallMutation, InitCallMutationVariables>(InitCallDocument, baseOptions);\n      }\nexport type InitCallMutationHookResult = ReturnType<typeof useInitCallMutation>;\nexport type InitCallMutationResult = ApolloReactCommon.MutationResult<InitCallMutation>;\nexport type InitCallMutationOptions = ApolloReactCommon.BaseMutationOptions<InitCallMutation, InitCallMutationVariables>;\nexport const SaveReportDocument = gql`\n    mutation SaveReport($claimId: ID!, $data: Json!) {\n  claimReportUpsert(claimId: $claimId, data: $data) {\n    id\n  }\n}\n    `;\nexport type SaveReportMutationFn = ApolloReactCommon.MutationFunction<SaveReportMutation, SaveReportMutationVariables>;\n\n/**\n * __useSaveReportMutation__\n *\n * To run a mutation, you first call `useSaveReportMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSaveReportMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [saveReportMutation, { data, loading, error }] = useSaveReportMutation({\n *   variables: {\n *      claimId: // value for 'claimId'\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useSaveReportMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SaveReportMutation, SaveReportMutationVariables>) {\n        return ApolloReactHooks.useMutation<SaveReportMutation, SaveReportMutationVariables>(SaveReportDocument, baseOptions);\n      }\nexport type SaveReportMutationHookResult = ReturnType<typeof useSaveReportMutation>;\nexport type SaveReportMutationResult = ApolloReactCommon.MutationResult<SaveReportMutation>;\nexport type SaveReportMutationOptions = ApolloReactCommon.BaseMutationOptions<SaveReportMutation, SaveReportMutationVariables>;\nexport const SubmitReportDocument = gql`\n    mutation SubmitReport($claimId: ID!) {\n  claimReportSubmit(claimId: $claimId) {\n    id\n  }\n}\n    `;\nexport type SubmitReportMutationFn = ApolloReactCommon.MutationFunction<SubmitReportMutation, SubmitReportMutationVariables>;\n\n/**\n * __useSubmitReportMutation__\n *\n * To run a mutation, you first call `useSubmitReportMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSubmitReportMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [submitReportMutation, { data, loading, error }] = useSubmitReportMutation({\n *   variables: {\n *      claimId: // value for 'claimId'\n *   },\n * });\n */\nexport function useSubmitReportMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SubmitReportMutation, SubmitReportMutationVariables>) {\n        return ApolloReactHooks.useMutation<SubmitReportMutation, SubmitReportMutationVariables>(SubmitReportDocument, baseOptions);\n      }\nexport type SubmitReportMutationHookResult = ReturnType<typeof useSubmitReportMutation>;\nexport type SubmitReportMutationResult = ApolloReactCommon.MutationResult<SubmitReportMutation>;\nexport type SubmitReportMutationOptions = ApolloReactCommon.BaseMutationOptions<SubmitReportMutation, SubmitReportMutationVariables>;\nexport const ResetReportDocument = gql`\n    mutation ResetReport($claimId: ID!) {\n  claimReportReset(claimId: $claimId) {\n    id\n  }\n}\n    `;\nexport type ResetReportMutationFn = ApolloReactCommon.MutationFunction<ResetReportMutation, ResetReportMutationVariables>;\n\n/**\n * __useResetReportMutation__\n *\n * To run a mutation, you first call `useResetReportMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useResetReportMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [resetReportMutation, { data, loading, error }] = useResetReportMutation({\n *   variables: {\n *      claimId: // value for 'claimId'\n *   },\n * });\n */\nexport function useResetReportMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ResetReportMutation, ResetReportMutationVariables>) {\n        return ApolloReactHooks.useMutation<ResetReportMutation, ResetReportMutationVariables>(ResetReportDocument, baseOptions);\n      }\nexport type ResetReportMutationHookResult = ReturnType<typeof useResetReportMutation>;\nexport type ResetReportMutationResult = ApolloReactCommon.MutationResult<ResetReportMutation>;\nexport type ResetReportMutationOptions = ApolloReactCommon.BaseMutationOptions<ResetReportMutation, ResetReportMutationVariables>;\nexport const ClaimListFilterDocument = gql`\n    query ClaimListFilter {\n  currentUser {\n    claimFilters {\n      id\n      type\n      label\n      name\n      options {\n        group\n        label\n        value: id\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useClaimListFilterQuery__\n *\n * To run a query within a React component, call `useClaimListFilterQuery` and pass it any options that fit your needs.\n * When your component renders, `useClaimListFilterQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useClaimListFilterQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useClaimListFilterQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ClaimListFilterQuery, ClaimListFilterQueryVariables>) {\n        return ApolloReactHooks.useQuery<ClaimListFilterQuery, ClaimListFilterQueryVariables>(ClaimListFilterDocument, baseOptions);\n      }\nexport function useClaimListFilterLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ClaimListFilterQuery, ClaimListFilterQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<ClaimListFilterQuery, ClaimListFilterQueryVariables>(ClaimListFilterDocument, baseOptions);\n        }\nexport type ClaimListFilterQueryHookResult = ReturnType<typeof useClaimListFilterQuery>;\nexport type ClaimListFilterLazyQueryHookResult = ReturnType<typeof useClaimListFilterLazyQuery>;\nexport type ClaimListFilterQueryResult = ApolloReactCommon.QueryResult<ClaimListFilterQuery, ClaimListFilterQueryVariables>;\nexport const ClaimListWaterfallFilterDocument = gql`\n    query ClaimListWaterfallFilter($where: ClaimStatusVolumeWhere!) {\n  currentUser {\n    waterfallFilters(where: $where) {\n      id\n      items {\n        value: id\n        label\n        claimCount\n        color\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useClaimListWaterfallFilterQuery__\n *\n * To run a query within a React component, call `useClaimListWaterfallFilterQuery` and pass it any options that fit your needs.\n * When your component renders, `useClaimListWaterfallFilterQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useClaimListWaterfallFilterQuery({\n *   variables: {\n *      where: // value for 'where'\n *   },\n * });\n */\nexport function useClaimListWaterfallFilterQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ClaimListWaterfallFilterQuery, ClaimListWaterfallFilterQueryVariables>) {\n        return ApolloReactHooks.useQuery<ClaimListWaterfallFilterQuery, ClaimListWaterfallFilterQueryVariables>(ClaimListWaterfallFilterDocument, baseOptions);\n      }\nexport function useClaimListWaterfallFilterLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ClaimListWaterfallFilterQuery, ClaimListWaterfallFilterQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<ClaimListWaterfallFilterQuery, ClaimListWaterfallFilterQueryVariables>(ClaimListWaterfallFilterDocument, baseOptions);\n        }\nexport type ClaimListWaterfallFilterQueryHookResult = ReturnType<typeof useClaimListWaterfallFilterQuery>;\nexport type ClaimListWaterfallFilterLazyQueryHookResult = ReturnType<typeof useClaimListWaterfallFilterLazyQuery>;\nexport type ClaimListWaterfallFilterQueryResult = ApolloReactCommon.QueryResult<ClaimListWaterfallFilterQuery, ClaimListWaterfallFilterQueryVariables>;\nexport const ClaimListDataDocument = gql`\n    query ClaimListData($first: Int, $after: String, $where: ClaimJobFilter) {\n  currentUser {\n    userType\n  }\n  claimJobs(first: $first, after: $after, where: $where) @connection(key: \"claimJobs\", filter: [\"where\"]) {\n    totalCount\n    edges {\n      node {\n        ...ClaimListBody\n      }\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n}\n    ${ClaimListBodyFragmentDoc}`;\n\n/**\n * __useClaimListDataQuery__\n *\n * To run a query within a React component, call `useClaimListDataQuery` and pass it any options that fit your needs.\n * When your component renders, `useClaimListDataQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useClaimListDataQuery({\n *   variables: {\n *      first: // value for 'first'\n *      after: // value for 'after'\n *      where: // value for 'where'\n *   },\n * });\n */\nexport function useClaimListDataQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ClaimListDataQuery, ClaimListDataQueryVariables>) {\n        return ApolloReactHooks.useQuery<ClaimListDataQuery, ClaimListDataQueryVariables>(ClaimListDataDocument, baseOptions);\n      }\nexport function useClaimListDataLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ClaimListDataQuery, ClaimListDataQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<ClaimListDataQuery, ClaimListDataQueryVariables>(ClaimListDataDocument, baseOptions);\n        }\nexport type ClaimListDataQueryHookResult = ReturnType<typeof useClaimListDataQuery>;\nexport type ClaimListDataLazyQueryHookResult = ReturnType<typeof useClaimListDataLazyQuery>;\nexport type ClaimListDataQueryResult = ApolloReactCommon.QueryResult<ClaimListDataQuery, ClaimListDataQueryVariables>;\nexport const CommunicationActionAcknowledgeDocument = gql`\n    mutation CommunicationActionAcknowledge($where: ENDataPortfolioKey!) {\n  claimCommunicationAcknoledge(where: $where) {\n    messages\n    success\n  }\n}\n    `;\nexport type CommunicationActionAcknowledgeMutationFn = ApolloReactCommon.MutationFunction<CommunicationActionAcknowledgeMutation, CommunicationActionAcknowledgeMutationVariables>;\n\n/**\n * __useCommunicationActionAcknowledgeMutation__\n *\n * To run a mutation, you first call `useCommunicationActionAcknowledgeMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCommunicationActionAcknowledgeMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [communicationActionAcknowledgeMutation, { data, loading, error }] = useCommunicationActionAcknowledgeMutation({\n *   variables: {\n *      where: // value for 'where'\n *   },\n * });\n */\nexport function useCommunicationActionAcknowledgeMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CommunicationActionAcknowledgeMutation, CommunicationActionAcknowledgeMutationVariables>) {\n        return ApolloReactHooks.useMutation<CommunicationActionAcknowledgeMutation, CommunicationActionAcknowledgeMutationVariables>(CommunicationActionAcknowledgeDocument, baseOptions);\n      }\nexport type CommunicationActionAcknowledgeMutationHookResult = ReturnType<typeof useCommunicationActionAcknowledgeMutation>;\nexport type CommunicationActionAcknowledgeMutationResult = ApolloReactCommon.MutationResult<CommunicationActionAcknowledgeMutation>;\nexport type CommunicationActionAcknowledgeMutationOptions = ApolloReactCommon.BaseMutationOptions<CommunicationActionAcknowledgeMutation, CommunicationActionAcknowledgeMutationVariables>;\nexport const CommunicationActionReplyDocument = gql`\n    mutation CommunicationActionReply($input: ClaimCommunicationCreate!) {\n  createClaimCommunication(input: $input) {\n    messages\n    success\n  }\n}\n    `;\nexport type CommunicationActionReplyMutationFn = ApolloReactCommon.MutationFunction<CommunicationActionReplyMutation, CommunicationActionReplyMutationVariables>;\n\n/**\n * __useCommunicationActionReplyMutation__\n *\n * To run a mutation, you first call `useCommunicationActionReplyMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCommunicationActionReplyMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [communicationActionReplyMutation, { data, loading, error }] = useCommunicationActionReplyMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useCommunicationActionReplyMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CommunicationActionReplyMutation, CommunicationActionReplyMutationVariables>) {\n        return ApolloReactHooks.useMutation<CommunicationActionReplyMutation, CommunicationActionReplyMutationVariables>(CommunicationActionReplyDocument, baseOptions);\n      }\nexport type CommunicationActionReplyMutationHookResult = ReturnType<typeof useCommunicationActionReplyMutation>;\nexport type CommunicationActionReplyMutationResult = ApolloReactCommon.MutationResult<CommunicationActionReplyMutation>;\nexport type CommunicationActionReplyMutationOptions = ApolloReactCommon.BaseMutationOptions<CommunicationActionReplyMutation, CommunicationActionReplyMutationVariables>;\nexport const CommunicationListFiltersDocument = gql`\n    query CommunicationListFilters {\n  currentUser {\n    communicationFilters {\n      ...CommunicationHeaderFragment\n    }\n  }\n}\n    ${CommunicationHeaderFragmentFragmentDoc}`;\n\n/**\n * __useCommunicationListFiltersQuery__\n *\n * To run a query within a React component, call `useCommunicationListFiltersQuery` and pass it any options that fit your needs.\n * When your component renders, `useCommunicationListFiltersQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCommunicationListFiltersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useCommunicationListFiltersQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<CommunicationListFiltersQuery, CommunicationListFiltersQueryVariables>) {\n        return ApolloReactHooks.useQuery<CommunicationListFiltersQuery, CommunicationListFiltersQueryVariables>(CommunicationListFiltersDocument, baseOptions);\n      }\nexport function useCommunicationListFiltersLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CommunicationListFiltersQuery, CommunicationListFiltersQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<CommunicationListFiltersQuery, CommunicationListFiltersQueryVariables>(CommunicationListFiltersDocument, baseOptions);\n        }\nexport type CommunicationListFiltersQueryHookResult = ReturnType<typeof useCommunicationListFiltersQuery>;\nexport type CommunicationListFiltersLazyQueryHookResult = ReturnType<typeof useCommunicationListFiltersLazyQuery>;\nexport type CommunicationListFiltersQueryResult = ApolloReactCommon.QueryResult<CommunicationListFiltersQuery, CommunicationListFiltersQueryVariables>;\nexport const CommunicationsDataDocument = gql`\n    query CommunicationsData($first: Int, $after: String, $where: CommunicationFilter) {\n  claimCommunications: claimCommuications(first: $first, after: $after, where: $where) @connection(key: \"claimCommunications\", filter: [\"where\"]) {\n    totalCount\n    edges {\n      node {\n        ...ClaimCommunicationBody\n      }\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n}\n    ${ClaimCommunicationBodyFragmentDoc}`;\n\n/**\n * __useCommunicationsDataQuery__\n *\n * To run a query within a React component, call `useCommunicationsDataQuery` and pass it any options that fit your needs.\n * When your component renders, `useCommunicationsDataQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCommunicationsDataQuery({\n *   variables: {\n *      first: // value for 'first'\n *      after: // value for 'after'\n *      where: // value for 'where'\n *   },\n * });\n */\nexport function useCommunicationsDataQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<CommunicationsDataQuery, CommunicationsDataQueryVariables>) {\n        return ApolloReactHooks.useQuery<CommunicationsDataQuery, CommunicationsDataQueryVariables>(CommunicationsDataDocument, baseOptions);\n      }\nexport function useCommunicationsDataLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CommunicationsDataQuery, CommunicationsDataQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<CommunicationsDataQuery, CommunicationsDataQueryVariables>(CommunicationsDataDocument, baseOptions);\n        }\nexport type CommunicationsDataQueryHookResult = ReturnType<typeof useCommunicationsDataQuery>;\nexport type CommunicationsDataLazyQueryHookResult = ReturnType<typeof useCommunicationsDataLazyQuery>;\nexport type CommunicationsDataQueryResult = ApolloReactCommon.QueryResult<CommunicationsDataQuery, CommunicationsDataQueryVariables>;\nexport const KpiAlertDetailsDocument = gql`\n    query KpiAlertDetails($where: CaseReportIndex!, $first: Int, $after: String) {\n  reportingClaimJobGeneral(where: $where, first: $first, after: $after) {\n    edges {\n      node {\n        id\n        portfolioType\n        refNumber\n        insuredName\n        caseManagerName\n        status {\n          statusName\n        }\n        daysAtStatus\n      }\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n}\n    `;\n\n/**\n * __useKpiAlertDetailsQuery__\n *\n * To run a query within a React component, call `useKpiAlertDetailsQuery` and pass it any options that fit your needs.\n * When your component renders, `useKpiAlertDetailsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useKpiAlertDetailsQuery({\n *   variables: {\n *      where: // value for 'where'\n *      first: // value for 'first'\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useKpiAlertDetailsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<KpiAlertDetailsQuery, KpiAlertDetailsQueryVariables>) {\n        return ApolloReactHooks.useQuery<KpiAlertDetailsQuery, KpiAlertDetailsQueryVariables>(KpiAlertDetailsDocument, baseOptions);\n      }\nexport function useKpiAlertDetailsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<KpiAlertDetailsQuery, KpiAlertDetailsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<KpiAlertDetailsQuery, KpiAlertDetailsQueryVariables>(KpiAlertDetailsDocument, baseOptions);\n        }\nexport type KpiAlertDetailsQueryHookResult = ReturnType<typeof useKpiAlertDetailsQuery>;\nexport type KpiAlertDetailsLazyQueryHookResult = ReturnType<typeof useKpiAlertDetailsLazyQuery>;\nexport type KpiAlertDetailsQueryResult = ApolloReactCommon.QueryResult<KpiAlertDetailsQuery, KpiAlertDetailsQueryVariables>;\nexport const DashboardFiltersDocument = gql`\n    query DashboardFilters {\n  currentUser {\n    userType\n    dashboardFilters {\n      ...DashboardHeaderFragment\n    }\n  }\n  dashboardFilters {\n    id\n    name\n    options {\n      group\n      label: name\n      value\n    }\n  }\n}\n    ${DashboardHeaderFragmentFragmentDoc}`;\n\n/**\n * __useDashboardFiltersQuery__\n *\n * To run a query within a React component, call `useDashboardFiltersQuery` and pass it any options that fit your needs.\n * When your component renders, `useDashboardFiltersQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useDashboardFiltersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useDashboardFiltersQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<DashboardFiltersQuery, DashboardFiltersQueryVariables>) {\n        return ApolloReactHooks.useQuery<DashboardFiltersQuery, DashboardFiltersQueryVariables>(DashboardFiltersDocument, baseOptions);\n      }\nexport function useDashboardFiltersLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<DashboardFiltersQuery, DashboardFiltersQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<DashboardFiltersQuery, DashboardFiltersQueryVariables>(DashboardFiltersDocument, baseOptions);\n        }\nexport type DashboardFiltersQueryHookResult = ReturnType<typeof useDashboardFiltersQuery>;\nexport type DashboardFiltersLazyQueryHookResult = ReturnType<typeof useDashboardFiltersLazyQuery>;\nexport type DashboardFiltersQueryResult = ApolloReactCommon.QueryResult<DashboardFiltersQuery, DashboardFiltersQueryVariables>;\nexport const DashboardKpiDocument = gql`\n    query DashboardKpi($where: DashboardWidgetIndex!) {\n  dashboardWidgets(where: $where) {\n    title\n    viewName\n    labels\n    description\n    data {\n      dataSetName\n      internalFilterName\n      legend\n      valueDisplay\n      valueGroup\n      valueUnit\n      valueSense\n      values\n    }\n  }\n}\n    `;\n\n/**\n * __useDashboardKpiQuery__\n *\n * To run a query within a React component, call `useDashboardKpiQuery` and pass it any options that fit your needs.\n * When your component renders, `useDashboardKpiQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useDashboardKpiQuery({\n *   variables: {\n *      where: // value for 'where'\n *   },\n * });\n */\nexport function useDashboardKpiQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<DashboardKpiQuery, DashboardKpiQueryVariables>) {\n        return ApolloReactHooks.useQuery<DashboardKpiQuery, DashboardKpiQueryVariables>(DashboardKpiDocument, baseOptions);\n      }\nexport function useDashboardKpiLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<DashboardKpiQuery, DashboardKpiQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<DashboardKpiQuery, DashboardKpiQueryVariables>(DashboardKpiDocument, baseOptions);\n        }\nexport type DashboardKpiQueryHookResult = ReturnType<typeof useDashboardKpiQuery>;\nexport type DashboardKpiLazyQueryHookResult = ReturnType<typeof useDashboardKpiLazyQuery>;\nexport type DashboardKpiQueryResult = ApolloReactCommon.QueryResult<DashboardKpiQuery, DashboardKpiQueryVariables>;\nexport const AppRootDocument = gql`\n    query AppRoot {\n  currentUser {\n    _appRoutes @client\n    _rootRoute @client\n    _customisation @client {\n      alias\n      favicon\n      logo\n      companyLogo\n    }\n  }\n}\n    `;\n\n/**\n * __useAppRootQuery__\n *\n * To run a query within a React component, call `useAppRootQuery` and pass it any options that fit your needs.\n * When your component renders, `useAppRootQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAppRootQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useAppRootQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AppRootQuery, AppRootQueryVariables>) {\n        return ApolloReactHooks.useQuery<AppRootQuery, AppRootQueryVariables>(AppRootDocument, baseOptions);\n      }\nexport function useAppRootLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AppRootQuery, AppRootQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<AppRootQuery, AppRootQueryVariables>(AppRootDocument, baseOptions);\n        }\nexport type AppRootQueryHookResult = ReturnType<typeof useAppRootQuery>;\nexport type AppRootLazyQueryHookResult = ReturnType<typeof useAppRootLazyQuery>;\nexport type AppRootQueryResult = ApolloReactCommon.QueryResult<AppRootQuery, AppRootQueryVariables>;\nexport const LoginDocument = gql`\n    query Login {\n  me: currentUser {\n    id\n    name\n  }\n}\n    `;\n\n/**\n * __useLoginQuery__\n *\n * To run a query within a React component, call `useLoginQuery` and pass it any options that fit your needs.\n * When your component renders, `useLoginQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useLoginQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useLoginQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<LoginQuery, LoginQueryVariables>) {\n        return ApolloReactHooks.useQuery<LoginQuery, LoginQueryVariables>(LoginDocument, baseOptions);\n      }\nexport function useLoginLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<LoginQuery, LoginQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<LoginQuery, LoginQueryVariables>(LoginDocument, baseOptions);\n        }\nexport type LoginQueryHookResult = ReturnType<typeof useLoginQuery>;\nexport type LoginLazyQueryHookResult = ReturnType<typeof useLoginLazyQuery>;\nexport type LoginQueryResult = ApolloReactCommon.QueryResult<LoginQuery, LoginQueryVariables>;\nexport const SigninDocument = gql`\n    mutation Signin($input: UserCredential!) {\n  userAuthenticateAllServer(input: $input) {\n    accessToken\n    refreshToken\n    user {\n      userName\n    }\n  }\n}\n    `;\nexport type SigninMutationFn = ApolloReactCommon.MutationFunction<SigninMutation, SigninMutationVariables>;\n\n/**\n * __useSigninMutation__\n *\n * To run a mutation, you first call `useSigninMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSigninMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [signinMutation, { data, loading, error }] = useSigninMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useSigninMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SigninMutation, SigninMutationVariables>) {\n        return ApolloReactHooks.useMutation<SigninMutation, SigninMutationVariables>(SigninDocument, baseOptions);\n      }\nexport type SigninMutationHookResult = ReturnType<typeof useSigninMutation>;\nexport type SigninMutationResult = ApolloReactCommon.MutationResult<SigninMutation>;\nexport type SigninMutationOptions = ApolloReactCommon.BaseMutationOptions<SigninMutation, SigninMutationVariables>;"],"sourceRoot":""}