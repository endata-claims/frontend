{"version":3,"sources":["../node_modules/@material-ui/core/esm/TableContainer/TableContainer.js","../node_modules/@material-ui/core/esm/Table/Table.js","../node_modules/@material-ui/core/esm/TableHead/TableHead.js","../node_modules/@material-ui/core/esm/TableRow/TableRow.js","../node_modules/@material-ui/core/esm/TableCell/TableCell.js","../node_modules/@material-ui/core/esm/TableBody/TableBody.js","../../src/publicUtils.js","../../src/utils.js","../../src/makeDefaultPluginHooks.js","../../src/hooks/useColumnVisibility.js","../../src/hooks/useTable.js","../../src/plugin-hooks/useExpanded.js","../../src/filterTypes.js","../../src/plugin-hooks/useFilters.js","../../src/plugin-hooks/useGlobalFilter.js","../../src/plugin-hooks/useGroupBy.js","../../src/plugin-hooks/useSortBy.js","../../src/plugin-hooks/usePagination.js","../../src/plugin-hooks/_UNSTABLE_usePivotColumns.js","../../src/plugin-hooks/useRowSelect.js","../../src/plugin-hooks/useRowState.js","../../src/plugin-hooks/useColumnOrder.js","../../src/plugin-hooks/useResizeColumns.js","../node_modules/@material-ui/core/esm/Table/Tablelvl2Context.js","../node_modules/@material-ui/core/esm/Table/TableContext.js"],"names":["TableContainer","React","forwardRef","props","ref","classes","className","_props$component","component","Component","other","_objectWithoutProperties","createElement","_extends","clsx","root","withStyles","width","overflowX","name","Table","_props$padding","padding","_props$size","size","_props$stickyHeader","stickyHeader","table","useMemo","TableContext","Provider","value","theme","display","borderCollapse","borderSpacing","typography","body2","spacing","color","palette","text","secondary","textAlign","captionSide","tablelvl2","variant","TableHead","Tablelvl2Context","TableRow","_props$hover","hover","_props$selected","selected","useContext","head","footer","verticalAlign","outline","backgroundColor","action","fade","main","selectedOpacity","TableCell","_props$align","align","paddingProp","scopeProp","scope","sizeProp","sortDirection","variantProp","ariaSort","concat","capitalize","borderBottom","type","lighten","divider","darken","primary","lineHeight","pxToRem","fontWeight","fontWeightMedium","body","fontSize","sizeSmall","paddingRight","paddingLeft","paddingCheckbox","paddingNone","alignLeft","alignCenter","alignRight","flexDirection","alignJustify","position","top","left","zIndex","background","default","TableBody","actions","init","defaultColumn","Cell","minWidth","maxWidth","Number","MAX_SAFE_INTEGER","mergeProps","propList","style","next","makePropGetter","hooks","meta","userProps","handlePropGetter","prevProps","Array","prev","reduceHooks","initial","loopHooks","context","hook","ensurePluginOrder","plugins","befores","pluginName","afters","plugin","before","functionalUpdate","updater","old","useGetLatest","obj","safeUseLayoutEffect","document","useEffect","useMountedLayoutEffect","fn","deps","mountedRef","makeRenderer","instance","column","Comp","console","Error","isReactComponent","proto","Object","isClassComponent","isFunctionComponent","includes","isExoticComponent","flexRender","linkColumnStructure","columns","parent","depth","assignColumnAccessor","flattenColumns","flattenBy","id","accessor","Header","accessorPath","row","path","def","cacheKey","JSON","pathObj","pathObjCache","flattenDeep","arr","newArr","i","d","String","makePathArray","val","cursor","e","getBy","dedupeBy","all","dd","decorateColumn","userDefaultColumn","Footer","makeHeaderGroups","allColumns","headerGroups","scanColumns","uid","getUID","headerGroup","headers","parentColumns","hasParents","latestParentColumn","newParent","originalId","placeholderOf","key","flat","recurse","expandRows","manualExpandedKey","expanded","expandSubRows","expandedRows","rows","handleRow","unpreparedAccessWarning","reOpenBracket","reCloseBracket","defaultGetTableProps","role","defaultGetTableBodyProps","defaultGetHeaderProps","colSpan","defaultGetFooterProps","totalVisibleHeaderCount","defaultGetHeaderGroupProps","defaultGetFooterGroupProps","defaultGetRowProps","defaultGetCellProps","cell","makeDefaultPluginHooks","useOptions","stateReducers","useControlledState","columnsDeps","allColumnsDeps","accessValue","materializedColumns","materializedColumnsDeps","useInstanceAfterData","visibleColumns","visibleColumnsDeps","headerGroupsDeps","useInstanceBeforeDimensions","useInstance","prepareRow","getTableProps","getTableBodyProps","getHeaderGroupProps","getFooterGroupProps","getHeaderProps","getFooterProps","getRowProps","getCellProps","useFinalInstance","useColumnVisibility","defaultGetToggleHiddenProps","onChange","checked","title","defaultGetToggleHideAllColumnsProps","indeterminate","length","reducer","state","previousState","hiddenColumns","subHeader","handleColumn","parentVisible","subColumn","flatHeaders","dispatch","getHooks","getInstance","allColumnsHidden","toggleHideColumn","columnId","setHiddenColumns","toggleHideAllColumns","getToggleHideAllColumnsProps","defaultInitialState","defaultColumnInstance","defaultReducer","prevState","defaultGetSubRows","index","defaultGetRowId","defaultUseControlledState","applyDefaults","initialState","getSubRows","getRowId","stateReducer","useTable","instanceRef","data","userColumns","getStateReducer","handler","s","reducerState","coreDataModel","flatRows","rowsById","allColumnsQueue","accessRowsForColumn","accessValueHooks","materializedColumnsQueue","visibleColumnsDep","calculateHeaderWidths","totalColumnsMinWidth","totalColumnsWidth","totalColumnsMaxWidth","sumTotalMinWidth","sumTotalWidth","sumTotalMaxWidth","sumTotalFlexWidth","header","subHeaders","totalMinWidth","totalWidth","totalMaxWidth","totalFlexWidth","Math","accessRow","originalRow","rowIndex","original","cells","parentRows","subRows","undefined","useExpanded","defaultGetToggleAllRowsExpandedProps","onClick","defaultGetToggleRowExpandedProps","isAllRowsExpanded","rowId","setExpanded","exists","shouldExist","paginateExpandedRows","autoResetExpanded","getAutoResetExpanded","Boolean","resetExpanded","toggleRowExpanded","toggleAllRowsExpanded","expandedDepth","maxDepth","splitId","findExpandedDepth","getToggleAllRowsExpandedProps","preExpandedRows","set","ids","filterValue","rowValue","exactText","exactTextCase","includesAll","exact","equals","between","min","max","temp","createContext"],"mappings":"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","file":"static/js/4.0b51ead4.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    width: '100%',\n    overflowX: 'auto'\n  }\n};\nvar TableContainer = React.forwardRef(function TableContainer(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\"]);\n\n  return React.createElement(Component, _extends({\n    ref: ref,\n    className: clsx(classes.root, className)\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? TableContainer.propTypes = {\n  /**\n   * The table itself, normally `<Table />`\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTableContainer'\n})(TableContainer);","import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport TableContext from './TableContext';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      display: 'table',\n      width: '100%',\n      borderCollapse: 'collapse',\n      borderSpacing: 0,\n      '& caption': _extends({}, theme.typography.body2, {\n        padding: theme.spacing(2),\n        color: theme.palette.text.secondary,\n        textAlign: 'left',\n        captionSide: 'bottom'\n      })\n    },\n\n    /* Styles applied to the root element if `stickyHeader={true}`. */\n    stickyHeader: {\n      borderCollapse: 'separate'\n    }\n  };\n};\nvar Table = React.forwardRef(function Table(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'table' : _props$component,\n      _props$padding = props.padding,\n      padding = _props$padding === void 0 ? 'default' : _props$padding,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'medium' : _props$size,\n      _props$stickyHeader = props.stickyHeader,\n      stickyHeader = _props$stickyHeader === void 0 ? false : _props$stickyHeader,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\", \"padding\", \"size\", \"stickyHeader\"]);\n\n  var table = React.useMemo(function () {\n    return {\n      padding: padding,\n      size: size,\n      stickyHeader: stickyHeader\n    };\n  }, [padding, size, stickyHeader]);\n  return React.createElement(TableContext.Provider, {\n    value: table\n  }, React.createElement(Component, _extends({\n    ref: ref,\n    className: clsx(classes.root, className, stickyHeader && classes.stickyHeader)\n  }, other)));\n});\nprocess.env.NODE_ENV !== \"production\" ? Table.propTypes = {\n  /**\n   * The content of the table, normally `TableHead` and `TableBody`.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * Allows TableCells to inherit padding of the Table.\n   */\n  padding: PropTypes.oneOf(['default', 'checkbox', 'none']),\n\n  /**\n   * Allows TableCells to inherit size of the Table.\n   */\n  size: PropTypes.oneOf(['small', 'medium']),\n\n  /**\n   * Set the header sticky.\n   *\n   * ⚠️ It doesn't work with IE 11.\n   */\n  stickyHeader: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTable'\n})(Table);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Tablelvl2Context from '../Table/Tablelvl2Context';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'table-header-group'\n  }\n};\nvar tablelvl2 = {\n  variant: 'head'\n};\nvar TableHead = React.forwardRef(function TableHead(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'thead' : _props$component,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\"]);\n\n  return React.createElement(Tablelvl2Context.Provider, {\n    value: tablelvl2\n  }, React.createElement(Component, _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other)));\n});\nprocess.env.NODE_ENV !== \"production\" ? TableHead.propTypes = {\n  /**\n   * The content of the component, normally `TableRow`.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTableHead'\n})(TableHead);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Tablelvl2Context from '../Table/Tablelvl2Context';\nimport { fade } from '../styles/colorManipulator';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      color: 'inherit',\n      display: 'table-row',\n      verticalAlign: 'middle',\n      // We disable the focus ring for mouse, touch and keyboard users.\n      outline: 0,\n      '&$hover:hover': {\n        backgroundColor: theme.palette.action.hover\n      },\n      '&$selected,&$selected:hover': {\n        backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.selectedOpacity)\n      }\n    },\n\n    /* Pseudo-class applied to the root element if `selected={true}`. */\n    selected: {},\n\n    /* Pseudo-class applied to the root element if `hover={true}`. */\n    hover: {},\n\n    /* Styles applied to the root element if table variant=\"head\". */\n    head: {},\n\n    /* Styles applied to the root element if table variant=\"footer\". */\n    footer: {}\n  };\n};\n/**\n * Will automatically set dynamic row height\n * based on the material table element parent (head, body, etc).\n */\n\nvar TableRow = React.forwardRef(function TableRow(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'tr' : _props$component,\n      _props$hover = props.hover,\n      hover = _props$hover === void 0 ? false : _props$hover,\n      _props$selected = props.selected,\n      selected = _props$selected === void 0 ? false : _props$selected,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\", \"hover\", \"selected\"]);\n\n  var tablelvl2 = React.useContext(Tablelvl2Context);\n  return React.createElement(Component, _extends({\n    ref: ref,\n    className: clsx(classes.root, className, tablelvl2 && {\n      'head': classes.head,\n      'footer': classes.footer\n    }[tablelvl2.variant], hover && classes.hover, selected && classes.selected)\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? TableRow.propTypes = {\n  /**\n   * Should be valid <tr> children such as `TableCell`.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, the table row will shade on hover.\n   */\n  hover: PropTypes.bool,\n\n  /**\n   * If `true`, the table row will have the selected shading.\n   */\n  selected: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTableRow'\n})(TableRow);","import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\nimport { darken, fade, lighten } from '../styles/colorManipulator';\nimport TableContext from '../Table/TableContext';\nimport Tablelvl2Context from '../Table/Tablelvl2Context';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: _extends({}, theme.typography.body2, {\n      display: 'table-cell',\n      verticalAlign: 'inherit',\n      // Workaround for a rendering bug with spanned columns in Chrome 62.0.\n      // Removes the alpha (sets it to 1), and lightens or darkens the theme color.\n      borderBottom: \"1px solid\\n    \".concat(theme.palette.type === 'light' ? lighten(fade(theme.palette.divider, 1), 0.88) : darken(fade(theme.palette.divider, 1), 0.68)),\n      textAlign: 'left',\n      padding: 16\n    }),\n\n    /* Styles applied to the root element if `variant=\"head\"` or `context.table.head`. */\n    head: {\n      color: theme.palette.text.primary,\n      lineHeight: theme.typography.pxToRem(24),\n      fontWeight: theme.typography.fontWeightMedium\n    },\n\n    /* Styles applied to the root element if `variant=\"body\"` or `context.table.body`. */\n    body: {\n      color: theme.palette.text.primary\n    },\n\n    /* Styles applied to the root element if `variant=\"footer\"` or `context.table.footer`. */\n    footer: {\n      color: theme.palette.text.secondary,\n      lineHeight: theme.typography.pxToRem(21),\n      fontSize: theme.typography.pxToRem(12)\n    },\n\n    /* Styles applied to the root element if `size=\"small\"`. */\n    sizeSmall: {\n      padding: '6px 24px 6px 16px',\n      '&:last-child': {\n        paddingRight: 16\n      },\n      '&$paddingCheckbox': {\n        width: 24,\n        // prevent the checkbox column from growing\n        padding: '0px 12px 0 16px',\n        '&:last-child': {\n          paddingLeft: 12,\n          paddingRight: 16\n        },\n        '& > *': {\n          padding: 0\n        }\n      }\n    },\n\n    /* Styles applied to the root element if `padding=\"checkbox\"`. */\n    paddingCheckbox: {\n      width: 48,\n      // prevent the checkbox column from growing\n      padding: '0 0 0 4px',\n      '&:last-child': {\n        paddingLeft: 0,\n        paddingRight: 4\n      }\n    },\n\n    /* Styles applied to the root element if `padding=\"none\"`. */\n    paddingNone: {\n      padding: 0,\n      '&:last-child': {\n        padding: 0\n      }\n    },\n\n    /* Styles applied to the root element if `align=\"left\"`. */\n    alignLeft: {\n      textAlign: 'left'\n    },\n\n    /* Styles applied to the root element if `align=\"center\"`. */\n    alignCenter: {\n      textAlign: 'center'\n    },\n\n    /* Styles applied to the root element if `align=\"right\"`. */\n    alignRight: {\n      textAlign: 'right',\n      flexDirection: 'row-reverse'\n    },\n\n    /* Styles applied to the root element if `align=\"justify\"`. */\n    alignJustify: {\n      textAlign: 'justify'\n    },\n\n    /* Styles applied to the root element if `context.table.stickyHeader={true}`. */\n    stickyHeader: {\n      position: 'sticky',\n      top: 0,\n      left: 0,\n      zIndex: 2,\n      backgroundColor: theme.palette.background.default\n    }\n  };\n};\n/**\n * The component renders a `<th>` element when the parent context is a header\n * or otherwise a `<td>` element.\n */\n\nvar TableCell = React.forwardRef(function TableCell(props, ref) {\n  var _props$align = props.align,\n      align = _props$align === void 0 ? 'inherit' : _props$align,\n      classes = props.classes,\n      className = props.className,\n      component = props.component,\n      paddingProp = props.padding,\n      scopeProp = props.scope,\n      sizeProp = props.size,\n      sortDirection = props.sortDirection,\n      variantProp = props.variant,\n      other = _objectWithoutProperties(props, [\"align\", \"classes\", \"className\", \"component\", \"padding\", \"scope\", \"size\", \"sortDirection\", \"variant\"]);\n\n  var table = React.useContext(TableContext);\n  var tablelvl2 = React.useContext(Tablelvl2Context);\n  var Component;\n\n  if (component) {\n    Component = component;\n  } else {\n    Component = tablelvl2 && tablelvl2.variant === 'head' ? 'th' : 'td';\n  }\n\n  var scope = scopeProp;\n\n  if (!scope && tablelvl2 && tablelvl2.variant === 'head') {\n    scope = 'col';\n  }\n\n  var padding = paddingProp || (table && table.padding ? table.padding : 'default');\n  var size = sizeProp || (table && table.size ? table.size : 'medium');\n  var variant = variantProp || tablelvl2 && tablelvl2.variant;\n  var ariaSort = null;\n\n  if (sortDirection) {\n    ariaSort = sortDirection === 'asc' ? 'ascending' : 'descending';\n  }\n\n  return React.createElement(Component, _extends({\n    ref: ref,\n    className: clsx(classes.root, classes[variant], className, align !== 'inherit' && classes[\"align\".concat(capitalize(align))], padding !== 'default' && classes[\"padding\".concat(capitalize(padding))], size !== 'medium' && classes[\"size\".concat(capitalize(size))], variant === 'head' && table && table.stickyHeader && classes.stickyHeader),\n    \"aria-sort\": ariaSort,\n    scope: scope\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? TableCell.propTypes = {\n  /**\n   * Set the text-align on the table cell content.\n   *\n   * Monetary or generally number fields **should be right aligned** as that allows\n   * you to add them up quickly in your head without having to worry about decimals.\n   */\n  align: PropTypes.oneOf(['inherit', 'left', 'center', 'right', 'justify']),\n\n  /**\n   * The table cell contents.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * Sets the padding applied to the cell.\n   * By default, the Table parent component set the value (`default`).\n   */\n  padding: PropTypes.oneOf(['default', 'checkbox', 'none']),\n\n  /**\n   * Set scope attribute.\n   */\n  scope: PropTypes.string,\n\n  /**\n   * Specify the size of the cell.\n   * By default, the Table parent component set the value (`medium`).\n   */\n  size: PropTypes.oneOf(['small', 'medium']),\n\n  /**\n   * Set aria-sort direction.\n   */\n  sortDirection: PropTypes.oneOf(['asc', 'desc', false]),\n\n  /**\n   * Specify the cell type.\n   * By default, the TableHead, TableBody or TableFooter parent component set the value.\n   */\n  variant: PropTypes.oneOf(['head', 'body', 'footer'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTableCell'\n})(TableCell);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Tablelvl2Context from '../Table/Tablelvl2Context';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'table-row-group'\n  }\n};\nvar tablelvl2 = {\n  variant: 'body'\n};\nvar TableBody = React.forwardRef(function TableBody(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'tbody' : _props$component,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\"]);\n\n  return React.createElement(Tablelvl2Context.Provider, {\n    value: tablelvl2\n  }, React.createElement(Component, _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other)));\n});\nprocess.env.NODE_ENV !== \"production\" ? TableBody.propTypes = {\n  /**\n   * The content of the component, normally `TableRow`.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTableBody'\n})(TableBody);","import React from 'react'\n\nlet renderErr = 'Renderer Error ☝️'\n\nexport const actions = {\n  init: 'init',\n}\n\nexport const defaultColumn = {\n  Cell: ({ cell: { value = '' } }) => value,\n  width: 150,\n  minWidth: 0,\n  maxWidth: Number.MAX_SAFE_INTEGER,\n}\n\nexport function defaultOrderByFn(arr, funcs, dirs) {\n  return [...arr].sort((rowA, rowB) => {\n    for (let i = 0; i < funcs.length; i += 1) {\n      const sortFn = funcs[i]\n      const desc = dirs[i] === false || dirs[i] === 'desc'\n      const sortInt = sortFn(rowA, rowB)\n      if (sortInt !== 0) {\n        return desc ? -sortInt : sortInt\n      }\n    }\n    return dirs[0] ? rowA.index - rowB.index : rowB.index - rowA.index\n  })\n}\n\nexport function defaultGroupByFn(rows, columnId) {\n  return rows.reduce((prev, row, i) => {\n    // TODO: Might want to implement a key serializer here so\n    // irregular column values can still be grouped if needed?\n    const resKey = `${row.values[columnId]}`\n    prev[resKey] = Array.isArray(prev[resKey]) ? prev[resKey] : []\n    prev[resKey].push(row)\n    return prev\n  }, {})\n}\n\nfunction mergeProps(...propList) {\n  return propList.reduce((props, next) => {\n    const { style, className, ...rest } = next\n\n    props = {\n      ...props,\n      ...rest,\n    }\n\n    if (style) {\n      props.style = props.style\n        ? { ...(props.style || {}), ...(style || {}) }\n        : style\n    }\n\n    if (className) {\n      props.className = props.className\n        ? props.className + ' ' + className\n        : className\n    }\n\n    if (props.className === '') {\n      delete props.className\n    }\n\n    return props\n  }, {})\n}\n\nfunction handlePropGetter(prevProps, userProps, meta) {\n  // Handle a lambda, pass it the previous props\n  if (typeof userProps === 'function') {\n    return handlePropGetter({}, userProps(prevProps, meta))\n  }\n\n  // Handle an array, merge each item as separate props\n  if (Array.isArray(userProps)) {\n    return mergeProps(prevProps, ...userProps)\n  }\n\n  // Handle an object by default, merge the two objects\n  return mergeProps(prevProps, userProps)\n}\n\nexport const makePropGetter = (hooks, meta = {}) => {\n  return (userProps = {}) =>\n    [...hooks, userProps].reduce(\n      (prev, next) =>\n        handlePropGetter(prev, next, {\n          ...meta,\n          userProps,\n        }),\n      {}\n    )\n}\n\nexport const reduceHooks = (hooks, initial, meta = {}, allowUndefined) =>\n  hooks.reduce((prev, next) => {\n    const nextValue = next(prev, meta)\n    if (process.env.NODE_ENV !== 'production') {\n      if (!allowUndefined && typeof nextValue === 'undefined') {\n        console.info(next)\n        throw new Error(\n          'React Table: A reducer hook ☝️ just returned undefined! This is not allowed.'\n        )\n      }\n    }\n    return nextValue\n  }, initial)\n\nexport const loopHooks = (hooks, context, meta = {}) =>\n  hooks.forEach(hook => {\n    const nextValue = hook(context, meta)\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof nextValue !== 'undefined') {\n        console.info(hook, nextValue)\n        throw new Error(\n          'React Table: A loop-type hook ☝️ just returned a value! This is not allowed.'\n        )\n      }\n    }\n  })\n\nexport function ensurePluginOrder(plugins, befores, pluginName, afters) {\n  if (process.env.NODE_ENV !== 'production' && afters) {\n    throw new Error(\n      `Defining plugins in the \"after\" section of ensurePluginOrder is no longer supported (see plugin ${pluginName})`\n    )\n  }\n  const pluginIndex = plugins.findIndex(\n    plugin => plugin.pluginName === pluginName\n  )\n\n  if (pluginIndex === -1) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`The plugin \"${pluginName}\" was not found in the plugin list!\nThis usually means you need to need to name your plugin hook by setting the 'pluginName' property of the hook function, eg:\n\n  ${pluginName}.pluginName = '${pluginName}'\n`)\n    }\n  }\n\n  befores.forEach(before => {\n    const beforeIndex = plugins.findIndex(\n      plugin => plugin.pluginName === before\n    )\n    if (beforeIndex > -1 && beforeIndex > pluginIndex) {\n      if (process.env.NODE_ENV !== 'production') {\n        throw new Error(\n          `React Table: The ${pluginName} plugin hook must be placed after the ${before} plugin hook!`\n        )\n      }\n    }\n  })\n}\n\nexport function functionalUpdate(updater, old) {\n  return typeof updater === 'function' ? updater(old) : updater\n}\n\nexport function useGetLatest(obj) {\n  const ref = React.useRef()\n  ref.current = obj\n\n  return React.useCallback(() => ref.current, [])\n}\n\n// SSR has issues with useLayoutEffect still, so use useEffect during SSR\nexport const safeUseLayoutEffect =\n  typeof document !== 'undefined' ? React.useLayoutEffect : React.useEffect\n\nexport function useMountedLayoutEffect(fn, deps) {\n  const mountedRef = React.useRef(false)\n\n  safeUseLayoutEffect(() => {\n    if (mountedRef.current) {\n      fn()\n    }\n    mountedRef.current = true\n    // eslint-disable-next-line\n  }, deps)\n}\n\nexport function useAsyncDebounce(defaultFn, defaultWait = 0) {\n  const debounceRef = React.useRef({})\n\n  const getDefaultFn = useGetLatest(defaultFn)\n  const getDefaultWait = useGetLatest(defaultWait)\n\n  return React.useCallback(\n    async (...args) => {\n      if (!debounceRef.current.promise) {\n        debounceRef.current.promise = new Promise((resolve, reject) => {\n          debounceRef.current.resolve = resolve\n          debounceRef.current.reject = reject\n        })\n      }\n\n      if (debounceRef.current.timeout) {\n        clearTimeout(debounceRef.current.timeout)\n      }\n\n      debounceRef.current.timeout = setTimeout(async () => {\n        delete debounceRef.current.timeout\n        try {\n          debounceRef.current.resolve(await getDefaultFn()(...args))\n        } catch (err) {\n          debounceRef.current.reject(err)\n        } finally {\n          delete debounceRef.current.promise\n        }\n      }, getDefaultWait())\n\n      return debounceRef.current.promise\n    },\n    [getDefaultFn, getDefaultWait]\n  )\n}\n\nexport function makeRenderer(instance, column, meta = {}) {\n  return (type, userProps = {}) => {\n    const Comp = typeof type === 'string' ? column[type] : type\n\n    if (typeof Comp === 'undefined') {\n      console.info(column)\n      throw new Error(renderErr)\n    }\n\n    return flexRender(Comp, { ...instance, column, ...meta, ...userProps })\n  }\n}\n\nexport function flexRender(Comp, props) {\n  return isReactComponent(Comp) ? <Comp {...props} /> : Comp\n}\n\nfunction isClassComponent(component) {\n  return (\n    typeof component === 'function' &&\n    !!(() => {\n      let proto = Object.getPrototypeOf(component)\n      return proto.prototype && proto.prototype.isReactComponent\n    })()\n  )\n}\n\nfunction isFunctionComponent(component) {\n  return typeof component === 'function'\n}\n\nfunction isExoticComponent(component) {\n  return (\n    typeof component === 'object' &&\n    typeof component.$$typeof === 'symbol' &&\n    ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description)\n  )\n}\n\nfunction isReactComponent(component) {\n  return (\n    isClassComponent(component) ||\n    isFunctionComponent(component) ||\n    isExoticComponent(component)\n  )\n}\n","import React from 'react'\nimport { defaultColumn } from './publicUtils'\n\n// Find the depth of the columns\nexport function findMaxDepth(columns, depth = 0) {\n  return columns.reduce((prev, curr) => {\n    if (curr.columns) {\n      return Math.max(prev, findMaxDepth(curr.columns, depth + 1))\n    }\n    return depth\n  }, 0)\n}\n\n// Build the visible columns, headers and flat column list\nexport function linkColumnStructure(columns, parent, depth = 0) {\n  return columns.map(column => {\n    column = {\n      ...column,\n      parent,\n      depth,\n    }\n\n    assignColumnAccessor(column)\n\n    if (column.columns) {\n      column.columns = linkColumnStructure(column.columns, column, depth + 1)\n    }\n    return column\n  })\n}\n\nexport function flattenColumns(columns) {\n  return flattenBy(columns, 'columns')\n}\n\nexport function assignColumnAccessor(column) {\n  // First check for string accessor\n  let { id, accessor, Header } = column\n\n  if (typeof accessor === 'string') {\n    id = id || accessor\n    const accessorPath = accessor.split('.')\n    accessor = row => getBy(row, accessorPath)\n  }\n\n  if (!id && typeof Header === 'string' && Header) {\n    id = Header\n  }\n\n  if (!id && column.columns) {\n    console.error(column)\n    throw new Error('A column ID (or unique \"Header\" value) is required!')\n  }\n\n  if (!id) {\n    console.error(column)\n    throw new Error('A column ID (or string accessor) is required!')\n  }\n\n  Object.assign(column, {\n    id,\n    accessor,\n  })\n\n  return column\n}\n\n// Find the depth of the columns\nexport function dedupeBy(arr, fn) {\n  return [...arr]\n    .reverse()\n    .filter((d, i, all) => all.findIndex(dd => fn(dd) === fn(d)) === i)\n    .reverse()\n}\n\nexport function decorateColumn(column, userDefaultColumn) {\n  if (!userDefaultColumn) {\n    throw new Error()\n  }\n  Object.assign(column, {\n    // Make sure there is a fallback header, just in case\n    Header: () => <>&nbsp;</>,\n    Footer: () => <>&nbsp;</>,\n    ...defaultColumn,\n    ...userDefaultColumn,\n    ...column,\n  })\n  return column\n}\n\n// Build the header groups from the bottom up\nexport function makeHeaderGroups(allColumns, defaultColumn) {\n  const headerGroups = []\n\n  let scanColumns = allColumns\n\n  let uid = 0\n  const getUID = () => uid++\n\n  while (scanColumns.length) {\n    // The header group we are creating\n    const headerGroup = {\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const parentColumns = []\n\n    const hasParents = scanColumns.some(d => d.parent)\n\n    // Scan each column for parents\n    scanColumns.forEach(column => {\n      // What is the latest (last) parent column?\n      let latestParentColumn = [...parentColumns].reverse()[0]\n\n      let newParent\n\n      if (hasParents) {\n        // If the column has a parent, add it if necessary\n        if (column.parent) {\n          newParent = {\n            ...column.parent,\n            originalId: column.parent.id,\n            id: `${column.parent.id}_${getUID()}`,\n            headers: [column],\n          }\n        } else {\n          // If other columns have parents, we'll need to add a place holder if necessary\n          const originalId = `${column.id}_placeholder`\n          newParent = decorateColumn(\n            {\n              originalId,\n              id: `${column.id}_placeholder_${getUID()}`,\n              placeholderOf: column,\n              headers: [column],\n            },\n            defaultColumn\n          )\n        }\n\n        // If the resulting parent columns are the same, just add\n        // the column and increment the header span\n        if (\n          latestParentColumn &&\n          latestParentColumn.originalId === newParent.originalId\n        ) {\n          latestParentColumn.headers.push(column)\n        } else {\n          parentColumns.push(newParent)\n        }\n      }\n\n      headerGroup.headers.push(column)\n    })\n\n    headerGroups.push(headerGroup)\n\n    // Start scanning the parent columns\n    scanColumns = parentColumns\n  }\n\n  return headerGroups.reverse()\n}\n\nconst pathObjCache = new Map()\n\nexport function getBy(obj, path, def) {\n  if (!path) {\n    return obj\n  }\n  const cacheKey = typeof path === 'function' ? path : JSON.stringify(path)\n\n  const pathObj =\n    pathObjCache.get(cacheKey) ||\n    (() => {\n      const pathObj = makePathArray(path)\n      pathObjCache.set(cacheKey, pathObj)\n      return pathObj\n    })()\n\n  let val\n\n  try {\n    val = pathObj.reduce((cursor, pathPart) => cursor[pathPart], obj)\n  } catch (e) {\n    // continue regardless of error\n  }\n  return typeof val !== 'undefined' ? val : def\n}\n\nexport function getFirstDefined(...args) {\n  for (let i = 0; i < args.length; i += 1) {\n    if (typeof args[i] !== 'undefined') {\n      return args[i]\n    }\n  }\n}\n\nexport function getElementDimensions(element) {\n  const rect = element.getBoundingClientRect()\n  const style = window.getComputedStyle(element)\n  const margins = {\n    left: parseInt(style.marginLeft),\n    right: parseInt(style.marginRight),\n  }\n  const padding = {\n    left: parseInt(style.paddingLeft),\n    right: parseInt(style.paddingRight),\n  }\n  return {\n    left: Math.ceil(rect.left),\n    width: Math.ceil(rect.width),\n    outerWidth: Math.ceil(\n      rect.width + margins.left + margins.right + padding.left + padding.right\n    ),\n    marginLeft: margins.left,\n    marginRight: margins.right,\n    paddingLeft: padding.left,\n    paddingRight: padding.right,\n    scrollWidth: element.scrollWidth,\n  }\n}\n\nexport function isFunction(a) {\n  if (typeof a === 'function') {\n    return a\n  }\n}\n\nexport function flattenBy(arr, key) {\n  const flat = []\n\n  const recurse = arr => {\n    arr.forEach(d => {\n      if (!d[key]) {\n        flat.push(d)\n      } else {\n        recurse(d[key])\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function expandRows(\n  rows,\n  { manualExpandedKey, expanded, expandSubRows = true }\n) {\n  const expandedRows = []\n\n  const handleRow = row => {\n    row.isExpanded =\n      (row.original && row.original[manualExpandedKey]) || expanded[row.id]\n\n    row.canExpand = row.subRows && !!row.subRows.length\n\n    expandedRows.push(row)\n\n    if (expandSubRows && row.subRows && row.subRows.length && row.isExpanded) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rows.forEach(handleRow)\n\n  return expandedRows\n}\n\nexport function getFilterMethod(filter, userFilterTypes, filterTypes) {\n  return (\n    isFunction(filter) ||\n    userFilterTypes[filter] ||\n    filterTypes[filter] ||\n    filterTypes.text\n  )\n}\n\nexport function shouldAutoRemoveFilter(autoRemove, value, column) {\n  return autoRemove ? autoRemove(value, column) : typeof value === 'undefined'\n}\n\nexport function unpreparedAccessWarning() {\n  throw new Error(\n    'React-Table: You have not called prepareRow(row) one or more rows you are attempting to render.'\n  )\n}\n\n//\n\nconst reOpenBracket = /\\[/g\nconst reCloseBracket = /\\]/g\n\nfunction makePathArray(obj) {\n  return (\n    flattenDeep(obj)\n      // remove all periods in parts\n      .map(d => String(d).replace('.', '_'))\n      // join parts using period\n      .join('.')\n      // replace brackets with periods\n      .replace(reOpenBracket, '.')\n      .replace(reCloseBracket, '')\n      // split it back out on periods\n      .split('.')\n  )\n}\n\nfunction flattenDeep(arr, newArr = []) {\n  if (!Array.isArray(arr)) {\n    newArr.push(arr)\n  } else {\n    for (let i = 0; i < arr.length; i += 1) {\n      flattenDeep(arr[i], newArr)\n    }\n  }\n  return newArr\n}\n","const defaultGetTableProps = props => ({\n  role: 'table',\n  ...props,\n})\n\nconst defaultGetTableBodyProps = props => ({\n  role: 'rowgroup',\n  ...props,\n})\n\nconst defaultGetHeaderProps = (props, { column }) => ({\n  key: `header_${column.id}`,\n  colSpan: column.totalVisibleHeaderCount,\n  role: 'columnheader',\n  ...props,\n})\n\nconst defaultGetFooterProps = (props, { column }) => ({\n  key: `footer_${column.id}`,\n  colSpan: column.totalVisibleHeaderCount,\n  ...props,\n})\n\nconst defaultGetHeaderGroupProps = (props, { index }) => ({\n  key: `headerGroup_${index}`,\n  role: 'row',\n  ...props,\n})\n\nconst defaultGetFooterGroupProps = (props, { index }) => ({\n  key: `footerGroup_${index}`,\n  ...props,\n})\n\nconst defaultGetRowProps = (props, { row }) => ({\n  key: `row_${row.id}`,\n  role: 'row',\n  ...props,\n})\n\nconst defaultGetCellProps = (props, { cell }) => ({\n  key: `cell_${cell.row.id}_${cell.column.id}`,\n  role: 'cell',\n  ...props,\n})\n\nexport default function makeDefaultPluginHooks() {\n  return {\n    useOptions: [],\n    stateReducers: [],\n    useControlledState: [],\n    columns: [],\n    columnsDeps: [],\n    allColumns: [],\n    allColumnsDeps: [],\n    accessValue: [],\n    materializedColumns: [],\n    materializedColumnsDeps: [],\n    useInstanceAfterData: [],\n    visibleColumns: [],\n    visibleColumnsDeps: [],\n    headerGroups: [],\n    headerGroupsDeps: [],\n    useInstanceBeforeDimensions: [],\n    useInstance: [],\n    prepareRow: [],\n    getTableProps: [defaultGetTableProps],\n    getTableBodyProps: [defaultGetTableBodyProps],\n    getHeaderGroupProps: [defaultGetHeaderGroupProps],\n    getFooterGroupProps: [defaultGetFooterGroupProps],\n    getHeaderProps: [defaultGetHeaderProps],\n    getFooterProps: [defaultGetFooterProps],\n    getRowProps: [defaultGetRowProps],\n    getCellProps: [defaultGetCellProps],\n    useFinalInstance: [],\n  }\n}\n","import React from 'react'\n\nimport {\n  actions,\n  functionalUpdate,\n  useGetLatest,\n  makePropGetter,\n} from '../publicUtils'\n\nactions.resetHiddenColumns = 'resetHiddenColumns'\nactions.toggleHideColumn = 'toggleHideColumn'\nactions.setHiddenColumns = 'setHiddenColumns'\nactions.toggleHideAllColumns = 'toggleHideAllColumns'\n\nexport const useColumnVisibility = hooks => {\n  hooks.getToggleHiddenProps = [defaultGetToggleHiddenProps]\n  hooks.getToggleHideAllColumnsProps = [defaultGetToggleHideAllColumnsProps]\n\n  hooks.stateReducers.push(reducer)\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions)\n  hooks.headerGroupsDeps.push((deps, { instance }) => [\n    ...deps,\n    instance.state.hiddenColumns,\n  ])\n  hooks.useInstance.push(useInstance)\n}\n\nuseColumnVisibility.pluginName = 'useColumnVisibility'\n\nconst defaultGetToggleHiddenProps = (props, { column }) => [\n  props,\n  {\n    onChange: e => {\n      column.toggleHidden(!e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: column.isVisible,\n    title: 'Toggle Column Visible',\n  },\n]\n\nconst defaultGetToggleHideAllColumnsProps = (props, { instance }) => [\n  props,\n  {\n    onChange: e => {\n      instance.toggleHideAllColumns(!e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: !instance.allColumnsHidden && !instance.state.hiddenColumns.length,\n    title: 'Toggle All Columns Hidden',\n    indeterminate:\n      !instance.allColumnsHidden && instance.state.hiddenColumns.length,\n  },\n]\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      hiddenColumns: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetHiddenColumns) {\n    return {\n      ...state,\n      hiddenColumns: instance.initialState.hiddenColumns || [],\n    }\n  }\n\n  if (action.type === actions.toggleHideColumn) {\n    const should =\n      typeof action.value !== 'undefined'\n        ? action.value\n        : !state.hiddenColumns.includes(action.columnId)\n\n    const hiddenColumns = should\n      ? [...state.hiddenColumns, action.columnId]\n      : state.hiddenColumns.filter(d => d !== action.columnId)\n\n    return {\n      ...state,\n      hiddenColumns,\n    }\n  }\n\n  if (action.type === actions.setHiddenColumns) {\n    return {\n      ...state,\n      hiddenColumns: functionalUpdate(action.value, state.hiddenColumns),\n    }\n  }\n\n  if (action.type === actions.toggleHideAllColumns) {\n    const shouldAll =\n      typeof action.value !== 'undefined'\n        ? action.value\n        : !state.hiddenColumns.length\n\n    return {\n      ...state,\n      hiddenColumns: shouldAll ? instance.allColumns.map(d => d.id) : [],\n    }\n  }\n}\n\nfunction useInstanceBeforeDimensions(instance) {\n  const {\n    headers,\n    state: { hiddenColumns },\n  } = instance\n\n  const isMountedRef = React.useRef(false)\n\n  if (!isMountedRef.current) {\n  }\n\n  const handleColumn = (column, parentVisible) => {\n    column.isVisible = parentVisible && !hiddenColumns.includes(column.id)\n\n    let totalVisibleHeaderCount = 0\n\n    if (column.headers && column.headers.length) {\n      column.headers.forEach(\n        subColumn =>\n          (totalVisibleHeaderCount += handleColumn(subColumn, column.isVisible))\n      )\n    } else {\n      totalVisibleHeaderCount = column.isVisible ? 1 : 0\n    }\n\n    column.totalVisibleHeaderCount = totalVisibleHeaderCount\n\n    return totalVisibleHeaderCount\n  }\n\n  let totalVisibleHeaderCount = 0\n\n  headers.forEach(\n    subHeader => (totalVisibleHeaderCount += handleColumn(subHeader, true))\n  )\n}\n\nfunction useInstance(instance) {\n  const {\n    flatHeaders,\n    dispatch,\n    allColumns,\n    getHooks,\n    state: { hiddenColumns },\n  } = instance\n\n  const getInstance = useGetLatest(instance)\n\n  const allColumnsHidden = allColumns.length === hiddenColumns.length\n\n  const toggleHideColumn = React.useCallback(\n    (columnId, value) =>\n      dispatch({ type: actions.toggleHideColumn, columnId, value }),\n    [dispatch]\n  )\n\n  const setHiddenColumns = React.useCallback(\n    value => dispatch({ type: actions.setHiddenColumns, value }),\n    [dispatch]\n  )\n\n  const toggleHideAllColumns = React.useCallback(\n    value => dispatch({ type: actions.toggleHideAllColumns, value }),\n    [dispatch]\n  )\n\n  const getToggleHideAllColumnsProps = makePropGetter(\n    getHooks().getToggleHideAllColumnsProps,\n    { instance: getInstance() }\n  )\n\n  flatHeaders.forEach(column => {\n    column.toggleHidden = value => {\n      dispatch({\n        type: actions.toggleHideColumn,\n        columnId: column.id,\n        value,\n      })\n    }\n\n    column.getToggleHiddenProps = makePropGetter(\n      getHooks().getToggleHiddenProps,\n      {\n        instance: getInstance(),\n        column,\n      }\n    )\n  })\n\n  Object.assign(instance, {\n    allColumnsHidden,\n    toggleHideColumn,\n    setHiddenColumns,\n    toggleHideAllColumns,\n    getToggleHideAllColumnsProps,\n  })\n}\n","import React from 'react'\n\n//\n\nimport {\n  linkColumnStructure,\n  flattenColumns,\n  assignColumnAccessor,\n  unpreparedAccessWarning,\n  makeHeaderGroups,\n  decorateColumn,\n  dedupeBy,\n} from '../utils'\n\nimport {\n  useGetLatest,\n  reduceHooks,\n  actions,\n  loopHooks,\n  makePropGetter,\n  makeRenderer,\n} from '../publicUtils'\n\nimport makeDefaultPluginHooks from '../makeDefaultPluginHooks'\n\nimport { useColumnVisibility } from './useColumnVisibility'\n\nconst defaultInitialState = {}\nconst defaultColumnInstance = {}\nconst defaultReducer = (state, action, prevState) => state\nconst defaultGetSubRows = (row, index) => row.subRows || []\nconst defaultGetRowId = (row, index, parent) =>\n  `${parent ? [parent.id, index].join('.') : index}`\nconst defaultUseControlledState = d => d\n\nfunction applyDefaults(props) {\n  const {\n    initialState = defaultInitialState,\n    defaultColumn = defaultColumnInstance,\n    getSubRows = defaultGetSubRows,\n    getRowId = defaultGetRowId,\n    stateReducer = defaultReducer,\n    useControlledState = defaultUseControlledState,\n    ...rest\n  } = props\n\n  return {\n    ...rest,\n    initialState,\n    defaultColumn,\n    getSubRows,\n    getRowId,\n    stateReducer,\n    useControlledState,\n  }\n}\n\nexport const useTable = (props, ...plugins) => {\n  // Apply default props\n  props = applyDefaults(props)\n\n  // Add core plugins\n  plugins = [useColumnVisibility, ...plugins]\n\n  // Create the table instance\n  let instanceRef = React.useRef({})\n\n  // Create a getter for the instance (helps avoid a lot of potential memory leaks)\n  const getInstance = useGetLatest(instanceRef.current)\n\n  // Assign the props, plugins and hooks to the instance\n  Object.assign(getInstance(), {\n    ...props,\n    plugins,\n    hooks: makeDefaultPluginHooks(),\n  })\n\n  // Allow plugins to register hooks as early as possible\n  plugins.filter(Boolean).forEach(plugin => {\n    plugin(getInstance().hooks)\n  })\n\n  // Consume all hooks and make a getter for them\n  const getHooks = useGetLatest(getInstance().hooks)\n  getInstance().getHooks = getHooks\n  delete getInstance().hooks\n\n  // Allow useOptions hooks to modify the options coming into the table\n  Object.assign(\n    getInstance(),\n    reduceHooks(getHooks().useOptions, applyDefaults(props))\n  )\n\n  const {\n    data,\n    columns: userColumns,\n    initialState,\n    defaultColumn,\n    getSubRows,\n    getRowId,\n    stateReducer,\n    useControlledState,\n  } = getInstance()\n\n  // Setup user reducer ref\n  const getStateReducer = useGetLatest(stateReducer)\n\n  // Build the reducer\n  const reducer = React.useCallback(\n    (state, action) => {\n      // Detect invalid actions\n      if (!action.type) {\n        console.info({ action })\n        throw new Error('Unknown Action 👆')\n      }\n\n      // Reduce the state from all plugin reducers\n      return [\n        ...getHooks().stateReducers,\n        // Allow the user to add their own state reducer(s)\n        ...(Array.isArray(getStateReducer())\n          ? getStateReducer()\n          : [getStateReducer()]),\n      ].reduce(\n        (s, handler) => handler(s, action, state, getInstance()) || s,\n        state\n      )\n    },\n    [getHooks, getStateReducer, getInstance]\n  )\n\n  // Start the reducer\n  const [reducerState, dispatch] = React.useReducer(reducer, undefined, () =>\n    reducer(initialState, { type: actions.init })\n  )\n\n  // Allow the user to control the final state with hooks\n  const state = reduceHooks(\n    [...getHooks().useControlledState, useControlledState],\n    reducerState,\n    { instance: getInstance() }\n  )\n\n  Object.assign(getInstance(), {\n    state,\n    dispatch,\n  })\n\n  // Decorate All the columns\n  const columns = React.useMemo(\n    () =>\n      linkColumnStructure(\n        reduceHooks(getHooks().columns, userColumns, {\n          instance: getInstance(),\n        })\n      ),\n    [\n      getHooks,\n      getInstance,\n      userColumns,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().columnsDeps, [], { instance: getInstance() }),\n    ]\n  )\n  getInstance().columns = columns\n\n  // Get the flat list of all columns and allow hooks to decorate\n  // those columns (and trigger this memoization via deps)\n  let allColumns = React.useMemo(\n    () =>\n      reduceHooks(getHooks().allColumns, flattenColumns(columns), {\n        instance: getInstance(),\n      }).map(assignColumnAccessor),\n    [\n      columns,\n      getHooks,\n      getInstance,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().allColumnsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n  getInstance().allColumns = allColumns\n\n  // Access the row model using initial columns\n  const coreDataModel = React.useMemo(() => {\n    let rows = []\n    let flatRows = []\n    const rowsById = {}\n\n    const allColumnsQueue = [...allColumns]\n\n    while (allColumnsQueue.length) {\n      const column = allColumnsQueue.shift()\n      accessRowsForColumn({\n        data,\n        rows,\n        flatRows,\n        rowsById,\n        column,\n        getRowId,\n        getSubRows,\n        accessValueHooks: getHooks().accessValue,\n        getInstance,\n      })\n    }\n\n    return { rows, flatRows, rowsById }\n  }, [allColumns, data, getRowId, getSubRows, getHooks, getInstance])\n\n  // Allow materialized columns to also access data\n  const [rows, flatRows, rowsById, materializedColumns] = React.useMemo(() => {\n    const { rows, flatRows, rowsById } = coreDataModel\n    const materializedColumns = reduceHooks(\n      getHooks().materializedColumns,\n      [],\n      {\n        instance: getInstance(),\n      }\n    )\n\n    materializedColumns.forEach(d => assignColumnAccessor(d))\n\n    const materializedColumnsQueue = [...materializedColumns]\n\n    while (materializedColumnsQueue.length) {\n      const column = materializedColumnsQueue.shift()\n      accessRowsForColumn({\n        data,\n        rows,\n        flatRows,\n        rowsById,\n        column,\n        getRowId,\n        getSubRows,\n        accessValueHooks: getHooks().accessValue,\n        getInstance,\n      })\n    }\n\n    return [rows, flatRows, rowsById, materializedColumns]\n  }, [\n    coreDataModel,\n    getHooks,\n    getInstance,\n    data,\n    getRowId,\n    getSubRows,\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    ...reduceHooks(getHooks().materializedColumnsDeps, [], {\n      instance: getInstance(),\n    }),\n  ])\n\n  Object.assign(getInstance(), {\n    rows,\n    flatRows,\n    rowsById,\n    materializedColumns,\n  })\n\n  loopHooks(getHooks().useInstanceAfterData, getInstance())\n\n  // Combine new materialized columns with all columns (dedupe prefers later columns)\n  allColumns = React.useMemo(\n    () => dedupeBy([...allColumns, ...materializedColumns], d => d.id),\n    [allColumns, materializedColumns]\n  )\n  getInstance().allColumns = allColumns\n\n  // Get the flat list of all columns AFTER the rows\n  // have been access, and allow hooks to decorate\n  // those columns (and trigger this memoization via deps)\n  let visibleColumns = React.useMemo(\n    () =>\n      reduceHooks(getHooks().visibleColumns, allColumns, {\n        instance: getInstance(),\n      }).map(d => decorateColumn(d, defaultColumn)),\n    [\n      getHooks,\n      allColumns,\n      getInstance,\n      defaultColumn,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().visibleColumnsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n\n  // Combine new visible columns with all columns (dedupe prefers later columns)\n  allColumns = React.useMemo(\n    () => dedupeBy([...allColumns, ...visibleColumns], d => d.id),\n    [allColumns, visibleColumns]\n  )\n  getInstance().allColumns = allColumns\n\n  // Make the headerGroups\n  const headerGroups = React.useMemo(\n    () =>\n      reduceHooks(\n        getHooks().headerGroups,\n        makeHeaderGroups(visibleColumns, defaultColumn),\n        getInstance()\n      ),\n    [\n      getHooks,\n      visibleColumns,\n      defaultColumn,\n      getInstance,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().headerGroupsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n  getInstance().headerGroups = headerGroups\n\n  // Get the first level of headers\n  const headers = React.useMemo(\n    () => (headerGroups.length ? headerGroups[0].headers : []),\n    [headerGroups]\n  )\n  getInstance().headers = headers\n\n  // Provide a flat header list for utilities\n  getInstance().flatHeaders = headerGroups.reduce(\n    (all, headerGroup) => [...all, ...headerGroup.headers],\n    []\n  )\n\n  loopHooks(getHooks().useInstanceBeforeDimensions, getInstance())\n\n  // Filter columns down to visible ones\n  const visibleColumnsDep = visibleColumns\n    .filter(d => d.isVisible)\n    .map(d => d.id)\n    .sort()\n    .join('_')\n\n  visibleColumns = React.useMemo(\n    () => visibleColumns.filter(d => d.isVisible),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [visibleColumns, visibleColumnsDep]\n  )\n  getInstance().visibleColumns = visibleColumns\n\n  // Header Visibility is needed by this point\n  const [\n    totalColumnsMinWidth,\n    totalColumnsWidth,\n    totalColumnsMaxWidth,\n  ] = calculateHeaderWidths(headers)\n\n  getInstance().totalColumnsMinWidth = totalColumnsMinWidth\n  getInstance().totalColumnsWidth = totalColumnsWidth\n  getInstance().totalColumnsMaxWidth = totalColumnsMaxWidth\n\n  loopHooks(getHooks().useInstance, getInstance())\n\n  // Each materialized header needs to be assigned a render function and other\n  // prop getter properties here.\n  ;[...getInstance().flatHeaders, ...getInstance().allColumns].forEach(\n    column => {\n      // Give columns/headers rendering power\n      column.render = makeRenderer(getInstance(), column)\n\n      // Give columns/headers a default getHeaderProps\n      column.getHeaderProps = makePropGetter(getHooks().getHeaderProps, {\n        instance: getInstance(),\n        column,\n      })\n\n      // Give columns/headers a default getFooterProps\n      column.getFooterProps = makePropGetter(getHooks().getFooterProps, {\n        instance: getInstance(),\n        column,\n      })\n    }\n  )\n\n  getInstance().headerGroups = getInstance().headerGroups.filter(\n    (headerGroup, i) => {\n      // Filter out any headers and headerGroups that don't have visible columns\n      headerGroup.headers = headerGroup.headers.filter(column => {\n        const recurse = headers =>\n          headers.filter(column => {\n            if (column.headers) {\n              return recurse(column.headers)\n            }\n            return column.isVisible\n          }).length\n        if (column.headers) {\n          return recurse(column.headers)\n        }\n        return column.isVisible\n      })\n\n      // Give headerGroups getRowProps\n      if (headerGroup.headers.length) {\n        headerGroup.getHeaderGroupProps = makePropGetter(\n          getHooks().getHeaderGroupProps,\n          { instance: getInstance(), headerGroup, index: i }\n        )\n\n        headerGroup.getFooterGroupProps = makePropGetter(\n          getHooks().getFooterGroupProps,\n          { instance: getInstance(), headerGroup, index: i }\n        )\n\n        return true\n      }\n\n      return false\n    }\n  )\n\n  getInstance().footerGroups = [...getInstance().headerGroups].reverse()\n\n  // The prepareRow function is absolutely necessary and MUST be called on\n  // any rows the user wishes to be displayed.\n\n  getInstance().prepareRow = React.useCallback(\n    row => {\n      row.getRowProps = makePropGetter(getHooks().getRowProps, {\n        instance: getInstance(),\n        row,\n      })\n\n      // Build the visible cells for each row\n      row.allCells = allColumns.map(column => {\n        const cell = {\n          column,\n          row,\n          value: row.values[column.id],\n        }\n\n        // Give each cell a getCellProps base\n        cell.getCellProps = makePropGetter(getHooks().getCellProps, {\n          instance: getInstance(),\n          cell,\n        })\n\n        // Give each cell a renderer function (supports multiple renderers)\n        cell.render = makeRenderer(getInstance(), column, {\n          row,\n          cell,\n        })\n\n        return cell\n      })\n\n      row.cells = visibleColumns.map(column =>\n        row.allCells.find(cell => cell.column.id === column.id)\n      )\n\n      // need to apply any row specific hooks (useExpanded requires this)\n      loopHooks(getHooks().prepareRow, row, { instance: getInstance() })\n    },\n    [getHooks, getInstance, allColumns, visibleColumns]\n  )\n\n  getInstance().getTableProps = makePropGetter(getHooks().getTableProps, {\n    instance: getInstance(),\n  })\n\n  getInstance().getTableBodyProps = makePropGetter(\n    getHooks().getTableBodyProps,\n    {\n      instance: getInstance(),\n    }\n  )\n\n  loopHooks(getHooks().useFinalInstance, getInstance())\n\n  return getInstance()\n}\n\nfunction calculateHeaderWidths(headers, left = 0) {\n  let sumTotalMinWidth = 0\n  let sumTotalWidth = 0\n  let sumTotalMaxWidth = 0\n  let sumTotalFlexWidth = 0\n\n  headers.forEach(header => {\n    let { headers: subHeaders } = header\n\n    header.totalLeft = left\n\n    if (subHeaders && subHeaders.length) {\n      const [\n        totalMinWidth,\n        totalWidth,\n        totalMaxWidth,\n        totalFlexWidth,\n      ] = calculateHeaderWidths(subHeaders, left)\n      header.totalMinWidth = totalMinWidth\n      header.totalWidth = totalWidth\n      header.totalMaxWidth = totalMaxWidth\n      header.totalFlexWidth = totalFlexWidth\n    } else {\n      header.totalMinWidth = header.minWidth\n      header.totalWidth = Math.min(\n        Math.max(header.minWidth, header.width),\n        header.maxWidth\n      )\n      header.totalMaxWidth = header.maxWidth\n      header.totalFlexWidth = header.canResize ? header.totalWidth : 0\n    }\n    if (header.isVisible) {\n      left += header.totalWidth\n      sumTotalMinWidth += header.totalMinWidth\n      sumTotalWidth += header.totalWidth\n      sumTotalMaxWidth += header.totalMaxWidth\n      sumTotalFlexWidth += header.totalFlexWidth\n    }\n  })\n\n  return [sumTotalMinWidth, sumTotalWidth, sumTotalMaxWidth, sumTotalFlexWidth]\n}\n\nfunction accessRowsForColumn({\n  data,\n  rows,\n  flatRows,\n  rowsById,\n  column,\n  getRowId,\n  getSubRows,\n  accessValueHooks,\n  getInstance,\n}) {\n  // Access the row's data column-by-column\n  // We do it this way so we can incrementally add materialized\n  // columns after the first pass and avoid excessive looping\n  const accessRow = (originalRow, rowIndex, depth = 0, parent, parentRows) => {\n    // Keep the original reference around\n    const original = originalRow\n\n    const id = getRowId(originalRow, rowIndex, parent)\n\n    let row = rowsById[id]\n\n    // If the row hasn't been created, let's make it\n    if (!row) {\n      row = {\n        id,\n        original,\n        index: rowIndex,\n        depth,\n        cells: [{}], // This is a dummy cell\n      }\n\n      // Override common array functions (and the dummy cell's getCellProps function)\n      // to show an error if it is accessed without calling prepareRow\n      row.cells.map = unpreparedAccessWarning\n      row.cells.filter = unpreparedAccessWarning\n      row.cells.forEach = unpreparedAccessWarning\n      row.cells[0].getCellProps = unpreparedAccessWarning\n\n      // Create the cells and values\n      row.values = {}\n\n      // Push this row into the parentRows array\n      parentRows.push(row)\n      // Keep track of every row in a flat array\n      flatRows.push(row)\n      // Also keep track of every row by its ID\n      rowsById[id] = row\n\n      // Get the original subrows\n      row.originalSubRows = getSubRows(originalRow, rowIndex)\n\n      // Then recursively access them\n      if (row.originalSubRows) {\n        const subRows = []\n        row.originalSubRows.forEach((d, i) =>\n          accessRow(d, i, depth + 1, row, subRows)\n        )\n        // Keep the new subRows array on the row\n        row.subRows = subRows\n      }\n    } else if (row.subRows) {\n      // If the row exists, then it's already been accessed\n      // Keep recursing, but don't worry about passing the\n      // accumlator array (those rows already exist)\n      row.originalSubRows.forEach((d, i) => accessRow(d, i, depth + 1, row))\n    }\n\n    // If the column has an accessor, use it to get a value\n    if (column.accessor) {\n      row.values[column.id] = column.accessor(originalRow, rowIndex, row)\n    }\n\n    // Allow plugins to manipulate the column value\n    row.values[column.id] = reduceHooks(\n      accessValueHooks,\n      row.values[column.id],\n      {\n        row,\n        column,\n        instance: getInstance(),\n      },\n      true\n    )\n  }\n\n  data.forEach((originalRow, rowIndex) =>\n    accessRow(originalRow, rowIndex, 0, undefined, rows)\n  )\n}\n","import React from 'react'\n\nimport { expandRows } from '../utils'\n\nimport {\n  useGetLatest,\n  actions,\n  useMountedLayoutEffect,\n  makePropGetter,\n  ensurePluginOrder,\n} from '../publicUtils'\n\n// Actions\nactions.resetExpanded = 'resetExpanded'\nactions.toggleRowExpanded = 'toggleRowExpanded'\nactions.toggleAllRowsExpanded = 'toggleAllRowsExpanded'\n\nexport const useExpanded = hooks => {\n  hooks.getToggleAllRowsExpandedProps = [defaultGetToggleAllRowsExpandedProps]\n  hooks.getToggleRowExpandedProps = [defaultGetToggleRowExpandedProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseExpanded.pluginName = 'useExpanded'\n\nconst defaultGetToggleAllRowsExpandedProps = (props, { instance }) => [\n  props,\n  {\n    onClick: e => {\n      instance.toggleAllRowsExpanded()\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    title: 'Toggle All Rows Expanded',\n  },\n]\n\nconst defaultGetToggleRowExpandedProps = (props, { row }) => [\n  props,\n  {\n    onClick: () => {\n      row.toggleRowExpanded()\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    title: 'Toggle Row Expanded',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      expanded: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetExpanded) {\n    return {\n      ...state,\n      expanded: instance.initialState.expanded || {},\n    }\n  }\n\n  if (action.type === actions.toggleAllRowsExpanded) {\n    const { value } = action\n    const { isAllRowsExpanded, rowsById } = instance\n\n    const expandAll = typeof value !== 'undefined' ? value : !isAllRowsExpanded\n\n    if (expandAll) {\n      const expanded = {}\n\n      Object.keys(rowsById).forEach(rowId => {\n        expanded[rowId] = true\n      })\n\n      return {\n        ...state,\n        expanded,\n      }\n    }\n\n    return {\n      ...state,\n      expanded: {},\n    }\n  }\n\n  if (action.type === actions.toggleRowExpanded) {\n    const { id, value: setExpanded } = action\n    const exists = state.expanded[id]\n\n    const shouldExist =\n      typeof setExpanded !== 'undefined' ? setExpanded : !exists\n\n    if (!exists && shouldExist) {\n      return {\n        ...state,\n        expanded: {\n          ...state.expanded,\n          [id]: true,\n        },\n      }\n    } else if (exists && !shouldExist) {\n      const { [id]: _, ...rest } = state.expanded\n      return {\n        ...state,\n        expanded: rest,\n      }\n    } else {\n      return state\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    rowsById,\n    manualExpandedKey = 'expanded',\n    paginateExpandedRows = true,\n    expandSubRows = true,\n    autoResetExpanded = true,\n    getHooks,\n    plugins,\n    state: { expanded },\n    dispatch,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useSortBy', 'useGroupBy', 'usePivotColumns', 'useGlobalFilter'],\n    'useExpanded'\n  )\n\n  const getAutoResetExpanded = useGetLatest(autoResetExpanded)\n\n  let isAllRowsExpanded = Boolean(\n    Object.keys(rowsById).length && Object.keys(expanded).length\n  )\n\n  if (isAllRowsExpanded) {\n    if (Object.keys(rowsById).some(id => !expanded[id])) {\n      isAllRowsExpanded = false\n    }\n  }\n\n  // Bypass any effects from firing when this changes\n  useMountedLayoutEffect(() => {\n    if (getAutoResetExpanded()) {\n      dispatch({ type: actions.resetExpanded })\n    }\n  }, [dispatch, data])\n\n  const toggleRowExpanded = React.useCallback(\n    (id, value) => {\n      dispatch({ type: actions.toggleRowExpanded, id, value })\n    },\n    [dispatch]\n  )\n\n  const toggleAllRowsExpanded = React.useCallback(\n    value => dispatch({ type: actions.toggleAllRowsExpanded, value }),\n    [dispatch]\n  )\n\n  const expandedRows = React.useMemo(() => {\n    if (paginateExpandedRows) {\n      return expandRows(rows, { manualExpandedKey, expanded, expandSubRows })\n    }\n\n    return rows\n  }, [paginateExpandedRows, rows, manualExpandedKey, expanded, expandSubRows])\n\n  const expandedDepth = React.useMemo(() => findExpandedDepth(expanded), [\n    expanded,\n  ])\n\n  const getInstance = useGetLatest(instance)\n\n  const getToggleAllRowsExpandedProps = makePropGetter(\n    getHooks().getToggleAllRowsExpandedProps,\n    { instance: getInstance() }\n  )\n\n  Object.assign(instance, {\n    preExpandedRows: rows,\n    expandedRows,\n    rows: expandedRows,\n    expandedDepth,\n    isAllRowsExpanded,\n    toggleRowExpanded,\n    toggleAllRowsExpanded,\n    getToggleAllRowsExpandedProps,\n  })\n}\n\nfunction prepareRow(row, { instance: { getHooks }, instance }) {\n  row.toggleRowExpanded = set => instance.toggleRowExpanded(row.id, set)\n\n  row.getToggleRowExpandedProps = makePropGetter(\n    getHooks().getToggleRowExpandedProps,\n    {\n      instance,\n      row,\n    }\n  )\n}\n\nfunction findExpandedDepth(expanded) {\n  let maxDepth = 0\n\n  Object.keys(expanded).forEach(id => {\n    const splitId = id.split('.')\n    maxDepth = Math.max(maxDepth, splitId.length)\n  })\n\n  return maxDepth\n}\n","export const text = (rows, ids, filterValue) => {\n  rows = rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return String(rowValue)\n        .toLowerCase()\n        .includes(String(filterValue).toLowerCase())\n    })\n  })\n  return rows\n}\n\ntext.autoRemove = val => !val\n\nexport const exactText = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue !== undefined\n        ? String(rowValue).toLowerCase() === String(filterValue).toLowerCase()\n        : true\n    })\n  })\n}\n\nexactText.autoRemove = val => !val\n\nexport const exactTextCase = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue !== undefined\n        ? String(rowValue) === String(filterValue)\n        : true\n    })\n  })\n}\n\nexactTextCase.autoRemove = val => !val\n\nexport const includes = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return filterValue.includes(rowValue)\n    })\n  })\n}\n\nincludes.autoRemove = val => !val || !val.length\n\nexport const includesAll = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return (\n        rowValue &&\n        rowValue.length &&\n        filterValue.every(val => rowValue.includes(val))\n      )\n    })\n  })\n}\n\nincludesAll.autoRemove = val => !val || !val.length\n\nexport const exact = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue === filterValue\n    })\n  })\n}\n\nexact.autoRemove = val => typeof val === 'undefined'\n\nexport const equals = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      // eslint-disable-next-line eqeqeq\n      return rowValue == filterValue\n    })\n  })\n}\n\nequals.autoRemove = val => val == null\n\nexport const between = (rows, ids, filterValue) => {\n  let [min, max] = filterValue || []\n\n  min = typeof min === 'number' ? min : -Infinity\n  max = typeof max === 'number' ? max : Infinity\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue >= min && rowValue <= max\n    })\n  })\n}\n\nbetween.autoRemove = val =>\n  !val || (typeof val[0] !== 'number' && typeof val[1] !== 'number')\n","import React from 'react'\n\nimport {\n  getFirstDefined,\n  getFilterMethod,\n  shouldAutoRemoveFilter,\n} from '../utils'\n\nimport {\n  actions,\n  useGetLatest,\n  functionalUpdate,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nimport * as filterTypes from '../filterTypes'\n\n// Actions\nactions.resetFilters = 'resetFilters'\nactions.setFilter = 'setFilter'\nactions.setAllFilters = 'setAllFilters'\n\nexport const useFilters = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseFilters.pluginName = 'useFilters'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      filters: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetFilters) {\n    return {\n      ...state,\n      filters: instance.initialState.filters || [],\n    }\n  }\n\n  if (action.type === actions.setFilter) {\n    const { columnId, filterValue } = action\n    const { allColumns, filterTypes: userFilterTypes } = instance\n\n    const column = allColumns.find(d => d.id === columnId)\n\n    if (!column) {\n      throw new Error(\n        `React-Table: Could not find a column with id: ${columnId}`\n      )\n    }\n\n    const filterMethod = getFilterMethod(\n      column.filter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    const previousfilter = state.filters.find(d => d.id === columnId)\n\n    const newFilter = functionalUpdate(\n      filterValue,\n      previousfilter && previousfilter.value\n    )\n\n    //\n    if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter, column)) {\n      return {\n        ...state,\n        filters: state.filters.filter(d => d.id !== columnId),\n      }\n    }\n\n    if (previousfilter) {\n      return {\n        ...state,\n        filters: state.filters.map(d => {\n          if (d.id === columnId) {\n            return { id: columnId, value: newFilter }\n          }\n          return d\n        }),\n      }\n    }\n\n    return {\n      ...state,\n      filters: [...state.filters, { id: columnId, value: newFilter }],\n    }\n  }\n\n  if (action.type === actions.setAllFilters) {\n    const { filters } = action\n    const { allColumns, filterTypes: userFilterTypes } = instance\n\n    return {\n      ...state,\n      // Filter out undefined values\n      filters: functionalUpdate(filters, state.filters).filter(filter => {\n        const column = allColumns.find(d => d.id === filter.id)\n        const filterMethod = getFilterMethod(\n          column.filter,\n          userFilterTypes || {},\n          filterTypes\n        )\n\n        if (\n          shouldAutoRemoveFilter(filterMethod.autoRemove, filter.value, column)\n        ) {\n          return false\n        }\n        return true\n      }),\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    filterTypes: userFilterTypes,\n    manualFilters,\n    defaultCanFilter = false,\n    disableFilters,\n    state: { filters },\n    dispatch,\n    autoResetFilters = true,\n  } = instance\n\n  const setFilter = React.useCallback(\n    (columnId, filterValue) => {\n      dispatch({ type: actions.setFilter, columnId, filterValue })\n    },\n    [dispatch]\n  )\n\n  const setAllFilters = React.useCallback(\n    filters => {\n      dispatch({\n        type: actions.setAllFilters,\n        filters,\n      })\n    },\n    [dispatch]\n  )\n\n  allColumns.forEach(column => {\n    const {\n      id,\n      accessor,\n      defaultCanFilter: columnDefaultCanFilter,\n      disableFilters: columnDisableFilters,\n    } = column\n\n    // Determine if a column is filterable\n    column.canFilter = accessor\n      ? getFirstDefined(\n          columnDisableFilters === true ? false : undefined,\n          disableFilters === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(columnDefaultCanFilter, defaultCanFilter, false)\n\n    // Provide the column a way of updating the filter value\n    column.setFilter = val => setFilter(column.id, val)\n\n    // Provide the current filter value to the column for\n    // convenience\n    const found = filters.find(d => d.id === id)\n    column.filterValue = found && found.value\n  })\n\n  const [\n    filteredRows,\n    filteredFlatRows,\n    filteredRowsById,\n  ] = React.useMemo(() => {\n    if (manualFilters || !filters.length) {\n      return [rows, flatRows, rowsById]\n    }\n\n    const filteredFlatRows = []\n    const filteredRowsById = {}\n\n    // Filters top level and nested rows\n    const filterRows = (rows, depth = 0) => {\n      let filteredRows = rows\n\n      filteredRows = filters.reduce(\n        (filteredSoFar, { id: columnId, value: filterValue }) => {\n          // Find the filters column\n          const column = allColumns.find(d => d.id === columnId)\n\n          if (!column) {\n            return filteredSoFar\n          }\n\n          if (depth === 0) {\n            column.preFilteredRows = filteredSoFar\n          }\n\n          const filterMethod = getFilterMethod(\n            column.filter,\n            userFilterTypes || {},\n            filterTypes\n          )\n\n          if (!filterMethod) {\n            console.warn(\n              `Could not find a valid 'column.filter' for column with the ID: ${column.id}.`\n            )\n            return filteredSoFar\n          }\n\n          // Pass the rows, id, filterValue and column to the filterMethod\n          // to get the filtered rows back\n          column.filteredRows = filterMethod(\n            filteredSoFar,\n            [columnId],\n            filterValue\n          )\n\n          return column.filteredRows\n        },\n        rows\n      )\n\n      // Apply the filter to any subRows\n      // We technically could do this recursively in the above loop,\n      // but that would severely hinder the API for the user, since they\n      // would be required to do that recursion in some scenarios\n      filteredRows = filteredRows.map(row => {\n        filteredFlatRows.push(row)\n        filteredRowsById[row.id] = row\n        if (!row.subRows) {\n          return row\n        }\n        return {\n          ...row,\n          subRows:\n            row.subRows && row.subRows.length > 0\n              ? filterRows(row.subRows, depth + 1)\n              : row.subRows,\n        }\n      })\n\n      return filteredRows\n    }\n\n    return [filterRows(rows), filteredFlatRows, filteredRowsById]\n  }, [\n    manualFilters,\n    filters,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    userFilterTypes,\n  ])\n\n  React.useMemo(() => {\n    // Now that each filtered column has it's partially filtered rows,\n    // lets assign the final filtered rows to all of the other columns\n    const nonFilteredColumns = allColumns.filter(\n      column => !filters.find(d => d.id === column.id)\n    )\n\n    // This essentially enables faceted filter options to be built easily\n    // using every column's preFilteredRows value\n    nonFilteredColumns.forEach(column => {\n      column.preFilteredRows = filteredRows\n      column.filteredRows = filteredRows\n    })\n  }, [filteredRows, filters, allColumns])\n\n  const getAutoResetFilters = useGetLatest(autoResetFilters)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetFilters()) {\n      dispatch({ type: actions.resetFilters })\n    }\n  }, [dispatch, manualFilters ? null : data])\n\n  Object.assign(instance, {\n    preFilteredRows: rows,\n    preFilteredFlatRows: flatRows,\n    preFilteredRowsById: rowsById,\n    filteredRows,\n    filteredFlatRows,\n    filteredRowsById,\n    rows: filteredRows,\n    flatRows: filteredFlatRows,\n    rowsById: filteredRowsById,\n    setFilter,\n    setAllFilters,\n  })\n}\n","import React from 'react'\n\nimport { getFilterMethod, shouldAutoRemoveFilter } from '../utils'\n\nimport {\n  actions,\n  useMountedLayoutEffect,\n  functionalUpdate,\n  useGetLatest,\n} from '../publicUtils'\n\nimport * as filterTypes from '../filterTypes'\n\n// Actions\nactions.resetGlobalFilter = 'resetGlobalFilter'\nactions.setGlobalFilter = 'setGlobalFilter'\n\nexport const useGlobalFilter = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseGlobalFilter.pluginName = 'useGlobalFilter'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.resetGlobalFilter) {\n    return {\n      ...state,\n      globalFilter: instance.initialState.globalFilter || undefined,\n    }\n  }\n\n  if (action.type === actions.setGlobalFilter) {\n    const { filterValue } = action\n    const { userFilterTypes } = instance\n\n    const filterMethod = getFilterMethod(\n      instance.globalFilter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    const newFilter = functionalUpdate(filterValue, state.globalFilter)\n\n    //\n    if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter)) {\n      const { globalFilter, ...stateWithoutGlobalFilter } = state\n      return stateWithoutGlobalFilter\n    }\n\n    return {\n      ...state,\n      globalFilter: newFilter,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    filterTypes: userFilterTypes,\n    globalFilter,\n    manualGlobalFilter,\n    state: { globalFilter: globalFilterValue },\n    dispatch,\n    autoResetGlobalFilter = true,\n  } = instance\n\n  const setGlobalFilter = React.useCallback(\n    filterValue => {\n      dispatch({ type: actions.setGlobalFilter, filterValue })\n    },\n    [dispatch]\n  )\n\n  // TODO: Create a filter cache for incremental high speed multi-filtering\n  // This gets pretty complicated pretty fast, since you have to maintain a\n  // cache for each row group (top-level rows, and each row's recursive subrows)\n  // This would make multi-filtering a lot faster though. Too far?\n\n  const [\n    globalFilteredRows,\n    globalFilteredFlatRows,\n    globalFilteredRowsById,\n  ] = React.useMemo(() => {\n    if (manualGlobalFilter || typeof globalFilterValue === 'undefined') {\n      return [rows, flatRows, rowsById]\n    }\n\n    const filteredFlatRows = []\n    const filteredRowsById = {}\n\n    const filterMethod = getFilterMethod(\n      globalFilter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    if (!filterMethod) {\n      console.warn(`Could not find a valid 'globalFilter' option.`)\n      return rows\n    }\n\n    // Filters top level and nested rows\n    const filterRows = filteredRows => {\n      return filterMethod(\n        filteredRows,\n        allColumns.map(d => d.id),\n        globalFilterValue\n      ).map(row => {\n        filteredFlatRows.push(row)\n        filteredRowsById[row.id] = row\n\n        return {\n          ...row,\n          subRows:\n            row.subRows && row.subRows.length\n              ? filterRows(row.subRows)\n              : row.subRows,\n        }\n      })\n    }\n\n    return [filterRows(rows), filteredFlatRows, filteredRowsById]\n  }, [\n    manualGlobalFilter,\n    globalFilterValue,\n    globalFilter,\n    userFilterTypes,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n  ])\n\n  const getAutoResetGlobalFilter = useGetLatest(autoResetGlobalFilter)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetGlobalFilter()) {\n      dispatch({ type: actions.resetGlobalFilter })\n    }\n  }, [dispatch, manualGlobalFilter ? null : data])\n\n  Object.assign(instance, {\n    preGlobalFilteredRows: rows,\n    preGlobalFilteredFlatRows: flatRows,\n    preGlobalFilteredRowsById: rowsById,\n    globalFilteredRows,\n    globalFilteredFlatRows,\n    globalFilteredRowsById,\n    rows: globalFilteredRows,\n    flatRows: globalFilteredFlatRows,\n    rowsById: globalFilteredRowsById,\n    setGlobalFilter,\n  })\n}\n","import React from 'react'\n\nimport * as aggregations from '../aggregations'\n\nimport { getFirstDefined, flattenBy } from '../utils'\n\nimport {\n  actions,\n  makePropGetter,\n  defaultGroupByFn,\n  ensurePluginOrder,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nconst emptyArray = []\nconst emptyObject = {}\n\n// Actions\nactions.resetGroupBy = 'resetGroupBy'\nactions.toggleGroupBy = 'toggleGroupBy'\n\nexport const useGroupBy = hooks => {\n  hooks.getGroupByToggleProps = [defaultGetGroupByToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.visibleColumnsDeps.push((deps, { instance }) => [\n    ...deps,\n    instance.state.groupBy,\n  ])\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseGroupBy.pluginName = 'useGroupBy'\n\nconst defaultGetGroupByToggleProps = (props, { header }) => [\n  props,\n  {\n    onClick: header.canGroupBy\n      ? e => {\n          e.persist()\n          header.toggleGroupBy()\n        }\n      : undefined,\n    style: {\n      cursor: header.canGroupBy ? 'pointer' : undefined,\n    },\n    title: 'Toggle GroupBy',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      groupBy: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetGroupBy) {\n    return {\n      ...state,\n      groupBy: instance.initialState.groupBy || [],\n    }\n  }\n\n  if (action.type === actions.toggleGroupBy) {\n    const { columnId, value: setGroupBy } = action\n\n    const resolvedGroupBy =\n      typeof setGroupBy !== 'undefined'\n        ? setGroupBy\n        : !state.groupBy.includes(columnId)\n\n    if (resolvedGroupBy) {\n      return {\n        ...state,\n        groupBy: [...state.groupBy, columnId],\n      }\n    }\n\n    return {\n      ...state,\n      groupBy: state.groupBy.filter(d => d !== columnId),\n    }\n  }\n}\n\nfunction visibleColumns(\n  columns,\n  {\n    instance: {\n      state: { groupBy },\n    },\n  }\n) {\n  // Sort grouped columns to the start of the column list\n  // before the headers are built\n\n  const groupByColumns = groupBy\n    .map(g => columns.find(col => col.id === g))\n    .filter(Boolean)\n\n  const nonGroupByColumns = columns.filter(col => !groupBy.includes(col.id))\n\n  columns = [...groupByColumns, ...nonGroupByColumns]\n\n  columns.forEach(column => {\n    column.isGrouped = groupBy.includes(column.id)\n    column.groupedIndex = groupBy.indexOf(column.id)\n  })\n\n  return columns\n}\n\nconst defaultUserAggregations = {}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    flatHeaders,\n    groupByFn = defaultGroupByFn,\n    manualGroupBy,\n    aggregations: userAggregations = defaultUserAggregations,\n    plugins,\n    state: { groupBy },\n    dispatch,\n    autoResetGroupBy = true,\n    disableGroupBy,\n    defaultCanGroupBy,\n    getHooks,\n  } = instance\n\n  ensurePluginOrder(plugins, ['useFilters'], 'useGroupBy')\n\n  const getInstance = useGetLatest(instance)\n\n  allColumns.forEach(column => {\n    const {\n      accessor,\n      defaultGroupBy: defaultColumnGroupBy,\n      disableGroupBy: columnDisableGroupBy,\n    } = column\n\n    column.canGroupBy = accessor\n      ? getFirstDefined(\n          column.canGroupBy,\n          columnDisableGroupBy === true ? false : undefined,\n          disableGroupBy === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(\n          column.canGroupBy,\n          defaultColumnGroupBy,\n          defaultCanGroupBy,\n          false\n        )\n\n    if (column.canGroupBy) {\n      column.toggleGroupBy = () => instance.toggleGroupBy(column.id)\n    }\n\n    column.Aggregated = column.Aggregated || column.Cell\n  })\n\n  const toggleGroupBy = React.useCallback(\n    (columnId, value) => {\n      dispatch({ type: actions.toggleGroupBy, columnId, value })\n    },\n    [dispatch]\n  )\n\n  flatHeaders.forEach(header => {\n    header.getGroupByToggleProps = makePropGetter(\n      getHooks().getGroupByToggleProps,\n      { instance: getInstance(), header }\n    )\n  })\n\n  const [\n    groupedRows,\n    groupedFlatRows,\n    groupedRowsById,\n    onlyGroupedFlatRows,\n    onlyGroupedRowsById,\n    nonGroupedFlatRows,\n    nonGroupedRowsById,\n  ] = React.useMemo(() => {\n    if (manualGroupBy || !groupBy.length) {\n      return [\n        rows,\n        flatRows,\n        rowsById,\n        emptyArray,\n        emptyObject,\n        flatRows,\n        rowsById,\n      ]\n    }\n\n    // Ensure that the list of filtered columns exist\n    const existingGroupBy = groupBy.filter(g =>\n      allColumns.find(col => col.id === g)\n    )\n\n    // Find the columns that can or are aggregating\n    // Uses each column to aggregate rows into a single value\n    const aggregateRowsToValues = (leafRows, groupedRows, depth) => {\n      const values = {}\n\n      allColumns.forEach(column => {\n        // Don't aggregate columns that are in the groupBy\n        if (existingGroupBy.includes(column.id)) {\n          values[column.id] = groupedRows[0]\n            ? groupedRows[0].values[column.id]\n            : null\n          return\n        }\n\n        // Get the columnValues to aggregate\n        const groupedValues = groupedRows.map(row => row.values[column.id])\n\n        // Get the columnValues to aggregate\n        const leafValues = leafRows.map(row => {\n          let columnValue = row.values[column.id]\n\n          if (!depth && column.aggregatedValue) {\n            const aggregateValueFn =\n              typeof column.aggregateValue === 'function'\n                ? column.aggregateValue\n                : userAggregations[column.aggregateValue] ||\n                  aggregations[column.aggregateValue]\n\n            if (!aggregateValueFn) {\n              console.info({ column })\n              throw new Error(\n                `React Table: Invalid column.aggregateValue option for column listed above`\n              )\n            }\n\n            columnValue = aggregateValueFn(columnValue, row, column)\n          }\n          return columnValue\n        })\n\n        // Aggregate the values\n        let aggregateFn =\n          typeof column.aggregate === 'function'\n            ? column.aggregate\n            : userAggregations[column.aggregate] ||\n              aggregations[column.aggregate]\n\n        if (aggregateFn) {\n          values[column.id] = aggregateFn(leafValues, groupedValues)\n        } else if (column.aggregate) {\n          console.info({ column })\n          throw new Error(\n            `React Table: Invalid column.aggregate option for column listed above`\n          )\n        } else {\n          values[column.id] = null\n        }\n      })\n\n      return values\n    }\n\n    let groupedFlatRows = []\n    const groupedRowsById = {}\n    const onlyGroupedFlatRows = []\n    const onlyGroupedRowsById = {}\n    const nonGroupedFlatRows = []\n    const nonGroupedRowsById = {}\n\n    // Recursively group the data\n    const groupUpRecursively = (rows, depth = 0, parentId) => {\n      // This is the last level, just return the rows\n      if (depth === existingGroupBy.length) {\n        return rows\n      }\n\n      const columnId = existingGroupBy[depth]\n\n      // Group the rows together for this level\n      let rowGroupsMap = groupByFn(rows, columnId)\n\n      // Peform aggregations for each group\n      const aggregatedGroupedRows = Object.entries(rowGroupsMap).map(\n        ([groupByVal, groupedRows], index) => {\n          let id = `${columnId}:${groupByVal}`\n          id = parentId ? `${parentId}>${id}` : id\n\n          // First, Recurse to group sub rows before aggregation\n          const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n          // Flatten the leaf rows of the rows in this group\n          const leafRows = depth\n            ? flattenBy(groupedRows, 'leafRows')\n            : groupedRows\n\n          const values = aggregateRowsToValues(leafRows, groupedRows, depth)\n\n          const row = {\n            id,\n            isGrouped: true,\n            groupByID: columnId,\n            groupByVal,\n            values,\n            subRows,\n            leafRows,\n            depth,\n            index,\n          }\n\n          subRows.forEach(subRow => {\n            groupedFlatRows.push(subRow)\n            groupedRowsById[subRow.id] = subRow\n            if (subRow.isGrouped) {\n              onlyGroupedFlatRows.push(subRow)\n              onlyGroupedRowsById[subRow.id] = subRow\n            } else {\n              nonGroupedFlatRows.push(subRow)\n              nonGroupedRowsById[subRow.id] = subRow\n            }\n          })\n\n          return row\n        }\n      )\n\n      return aggregatedGroupedRows\n    }\n\n    const groupedRows = groupUpRecursively(rows)\n\n    groupedRows.forEach(subRow => {\n      groupedFlatRows.push(subRow)\n      groupedRowsById[subRow.id] = subRow\n      if (subRow.isGrouped) {\n        onlyGroupedFlatRows.push(subRow)\n        onlyGroupedRowsById[subRow.id] = subRow\n      } else {\n        nonGroupedFlatRows.push(subRow)\n        nonGroupedRowsById[subRow.id] = subRow\n      }\n    })\n\n    // Assign the new data\n    return [\n      groupedRows,\n      groupedFlatRows,\n      groupedRowsById,\n      onlyGroupedFlatRows,\n      onlyGroupedRowsById,\n      nonGroupedFlatRows,\n      nonGroupedRowsById,\n    ]\n  }, [\n    manualGroupBy,\n    groupBy,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    userAggregations,\n    groupByFn,\n  ])\n\n  const getAutoResetGroupBy = useGetLatest(autoResetGroupBy)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetGroupBy()) {\n      dispatch({ type: actions.resetGroupBy })\n    }\n  }, [dispatch, manualGroupBy ? null : data])\n\n  Object.assign(instance, {\n    preGroupedRows: rows,\n    preGroupedFlatRow: flatRows,\n    preGroupedRowsById: rowsById,\n    groupedRows,\n    groupedFlatRows,\n    groupedRowsById,\n    onlyGroupedFlatRows,\n    onlyGroupedRowsById,\n    nonGroupedFlatRows,\n    nonGroupedRowsById,\n    rows: groupedRows,\n    flatRows: groupedFlatRows,\n    rowsById: groupedRowsById,\n    toggleGroupBy,\n  })\n}\n\nfunction prepareRow(row) {\n  row.allCells.forEach(cell => {\n    // Grouped cells are in the groupBy and the pivot cell for the row\n    cell.isGrouped = cell.column.isGrouped && cell.column.id === row.groupByID\n    // Placeholder cells are any columns in the groupBy that are not grouped\n    cell.isPlaceholder = !cell.isGrouped && cell.column.isGrouped\n    // Aggregated cells are not grouped, not repeated, but still have subRows\n    cell.isAggregated = !cell.isGrouped && !cell.isPlaceholder && row.canExpand\n  })\n}\n","import React from 'react'\n\nimport {\n  actions,\n  ensurePluginOrder,\n  defaultColumn,\n  makePropGetter,\n  defaultOrderByFn,\n  useGetLatest,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nimport { getFirstDefined, isFunction } from '../utils'\n\nimport * as sortTypes from '../sortTypes'\n\n// Actions\nactions.resetSortBy = 'resetSortBy'\nactions.toggleSortBy = 'toggleSortBy'\nactions.clearSortBy = 'clearSortBy'\n\ndefaultColumn.sortType = 'alphanumeric'\ndefaultColumn.sortDescFirst = false\n\nexport const useSortBy = hooks => {\n  hooks.getSortByToggleProps = [defaultGetSortByToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseSortBy.pluginName = 'useSortBy'\n\nconst defaultGetSortByToggleProps = (props, { instance, column }) => {\n  const { isMultiSortEvent = e => e.shiftKey } = instance\n\n  return [\n    props,\n    {\n      onClick: column.canSort\n        ? e => {\n            e.persist()\n            column.toggleSortBy(\n              undefined,\n              !instance.disableMultiSort && isMultiSortEvent(e)\n            )\n          }\n        : undefined,\n      style: {\n        cursor: column.canSort ? 'pointer' : undefined,\n      },\n      title: column.canSort ? 'Toggle SortBy' : undefined,\n    },\n  ]\n}\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      sortBy: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetSortBy) {\n    return {\n      ...state,\n      sortBy: instance.initialState.sortBy || [],\n    }\n  }\n\n  if (action.type === actions.clearSortBy) {\n    const { sortBy } = state\n    const newSortBy = sortBy.filter(d => d.id !== action.columnId)\n\n    return {\n      ...state,\n      sortBy: newSortBy,\n    }\n  }\n\n  if (action.type === actions.toggleSortBy) {\n    const { columnId, desc, multi } = action\n\n    const {\n      allColumns,\n      disableMultiSort,\n      disableSortRemove,\n      disableMultiRemove,\n      maxMultiSortColCount = Number.MAX_SAFE_INTEGER,\n    } = instance\n\n    const { sortBy } = state\n\n    // Find the column for this columnId\n    const column = allColumns.find(d => d.id === columnId)\n    const { sortDescFirst } = column\n\n    // Find any existing sortBy for this column\n    const existingSortBy = sortBy.find(d => d.id === columnId)\n    const existingIndex = sortBy.findIndex(d => d.id === columnId)\n    const hasDescDefined = typeof desc !== 'undefined' && desc !== null\n\n    let newSortBy = []\n\n    // What should we do with this sort action?\n    let sortAction\n\n    if (!disableMultiSort && multi) {\n      if (existingSortBy) {\n        sortAction = 'toggle'\n      } else {\n        sortAction = 'add'\n      }\n    } else {\n      // Normal mode\n      if (existingIndex !== sortBy.length - 1) {\n        sortAction = 'replace'\n      } else if (existingSortBy) {\n        sortAction = 'toggle'\n      } else {\n        sortAction = 'replace'\n      }\n    }\n\n    // Handle toggle states that will remove the sortBy\n    if (\n      sortAction === 'toggle' && // Must be toggling\n      !disableSortRemove && // If disableSortRemove, disable in general\n      !hasDescDefined && // Must not be setting desc\n      (multi ? !disableMultiRemove : true) && // If multi, don't allow if disableMultiRemove\n      ((existingSortBy && // Finally, detect if it should indeed be removed\n        existingSortBy.desc &&\n        !sortDescFirst) ||\n        (!existingSortBy.desc && sortDescFirst))\n    ) {\n      sortAction = 'remove'\n    }\n\n    if (sortAction === 'replace') {\n      newSortBy = [\n        {\n          id: columnId,\n          desc: hasDescDefined ? desc : sortDescFirst,\n        },\n      ]\n    } else if (sortAction === 'add') {\n      newSortBy = [\n        ...sortBy,\n        {\n          id: columnId,\n          desc: hasDescDefined ? desc : sortDescFirst,\n        },\n      ]\n      // Take latest n columns\n      newSortBy.splice(0, newSortBy.length - maxMultiSortColCount)\n    } else if (sortAction === 'toggle') {\n      // This flips (or sets) the\n      newSortBy = sortBy.map(d => {\n        if (d.id === columnId) {\n          return {\n            ...d,\n            desc: hasDescDefined ? desc : !existingSortBy.desc,\n          }\n        }\n        return d\n      })\n    } else if (sortAction === 'remove') {\n      newSortBy = sortBy.filter(d => d.id !== columnId)\n    }\n\n    return {\n      ...state,\n      sortBy: newSortBy,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    allColumns,\n    orderByFn = defaultOrderByFn,\n    sortTypes: userSortTypes,\n    manualSortBy,\n    defaultCanSort,\n    disableSortBy,\n    flatHeaders,\n    state: { sortBy },\n    dispatch,\n    plugins,\n    getHooks,\n    autoResetSortBy = true,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useFilters', 'useGlobalFilter', 'useGroupBy', 'usePivotColumns'],\n    'useSortBy'\n  )\n\n  // Updates sorting based on a columnId, desc flag and multi flag\n  const toggleSortBy = React.useCallback(\n    (columnId, desc, multi) => {\n      dispatch({ type: actions.toggleSortBy, columnId, desc, multi })\n    },\n    [dispatch]\n  )\n\n  // use reference to avoid memory leak in #1608\n  const getInstance = useGetLatest(instance)\n\n  // Add the getSortByToggleProps method to columns and headers\n  flatHeaders.forEach(column => {\n    const {\n      accessor,\n      canSort: defaultColumnCanSort,\n      disableSortBy: columnDisableSortBy,\n      id,\n    } = column\n\n    const canSort = accessor\n      ? getFirstDefined(\n          columnDisableSortBy === true ? false : undefined,\n          disableSortBy === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(defaultCanSort, defaultColumnCanSort, false)\n\n    column.canSort = canSort\n\n    if (column.canSort) {\n      column.toggleSortBy = (desc, multi) =>\n        toggleSortBy(column.id, desc, multi)\n\n      column.clearSortBy = () => {\n        dispatch({ type: actions.clearSortBy, columnId: column.id })\n      }\n    }\n\n    column.getSortByToggleProps = makePropGetter(\n      getHooks().getSortByToggleProps,\n      {\n        instance: getInstance(),\n        column,\n      }\n    )\n\n    const columnSort = sortBy.find(d => d.id === id)\n    column.isSorted = !!columnSort\n    column.sortedIndex = sortBy.findIndex(d => d.id === id)\n    column.isSortedDesc = column.isSorted ? columnSort.desc : undefined\n  })\n\n  const [sortedRows, sortedFlatRows] = React.useMemo(() => {\n    if (manualSortBy || !sortBy.length) {\n      return [rows, flatRows]\n    }\n\n    const sortedFlatRows = []\n\n    // Filter out sortBys that correspond to non existing columns\n    const availableSortBy = sortBy.filter(sort =>\n      allColumns.find(col => col.id === sort.id)\n    )\n\n    const sortData = rows => {\n      // Use the orderByFn to compose multiple sortBy's together.\n      // This will also perform a stable sorting using the row index\n      // if needed.\n      const sortedData = orderByFn(\n        rows,\n        availableSortBy.map(sort => {\n          // Support custom sorting methods for each column\n          const column = allColumns.find(d => d.id === sort.id)\n\n          if (!column) {\n            throw new Error(\n              `React-Table: Could not find a column with id: ${sort.id} while sorting`\n            )\n          }\n\n          const { sortType } = column\n\n          // Look up sortBy functions in this order:\n          // column function\n          // column string lookup on user sortType\n          // column string lookup on built-in sortType\n          // default function\n          // default string lookup on user sortType\n          // default string lookup on built-in sortType\n          const sortMethod =\n            isFunction(sortType) ||\n            (userSortTypes || {})[sortType] ||\n            sortTypes[sortType]\n\n          if (!sortMethod) {\n            throw new Error(\n              `React-Table: Could not find a valid sortType of '${sortType}' for column '${sort.id}'.`\n            )\n          }\n\n          // Return the correct sortFn.\n          // This function should always return in ascending order\n          return (a, b) => sortMethod(a, b, sort.id, sort.desc)\n        }),\n        // Map the directions\n        availableSortBy.map(sort => {\n          // Detect and use the sortInverted option\n          const column = allColumns.find(d => d.id === sort.id)\n\n          if (column && column.sortInverted) {\n            return sort.desc\n          }\n\n          return !sort.desc\n        })\n      )\n\n      // If there are sub-rows, sort them\n      sortedData.forEach(row => {\n        sortedFlatRows.push(row)\n        if (!row.subRows || row.subRows.length <= 1) {\n          return\n        }\n        row.subRows = sortData(row.subRows)\n      })\n\n      return sortedData\n    }\n\n    return [sortData(rows), sortedFlatRows]\n  }, [\n    manualSortBy,\n    sortBy,\n    rows,\n    flatRows,\n    allColumns,\n    orderByFn,\n    userSortTypes,\n  ])\n\n  const getAutoResetSortBy = useGetLatest(autoResetSortBy)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetSortBy()) {\n      dispatch({ type: actions.resetSortBy })\n    }\n  }, [manualSortBy ? null : data])\n\n  Object.assign(instance, {\n    preSortedRows: rows,\n    preSortedFlatRows: flatRows,\n    sortedRows,\n    sortedFlatRows,\n    rows: sortedRows,\n    flatRows: sortedFlatRows,\n    toggleSortBy,\n  })\n}\n","import React from 'react'\n\n//\n\nimport {\n  actions,\n  ensurePluginOrder,\n  functionalUpdate,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nimport { expandRows } from '../utils'\n\nconst pluginName = 'usePagination'\n\n// Actions\nactions.resetPage = 'resetPage'\nactions.gotoPage = 'gotoPage'\nactions.setPageSize = 'setPageSize'\n\nexport const usePagination = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nusePagination.pluginName = pluginName\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      pageSize: 10,\n      pageIndex: 0,\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetPage) {\n    return {\n      ...state,\n      pageIndex: instance.initialState.pageIndex || 0,\n    }\n  }\n\n  if (action.type === actions.gotoPage) {\n    const { pageCount } = instance\n    const newPageIndex = functionalUpdate(action.pageIndex, state.pageIndex)\n\n    if (newPageIndex < 0 || newPageIndex > pageCount - 1) {\n      return state\n    }\n    return {\n      ...state,\n      pageIndex: newPageIndex,\n    }\n  }\n\n  if (action.type === actions.setPageSize) {\n    const { pageSize } = action\n    const topRowIndex = state.pageSize * state.pageIndex\n    const pageIndex = Math.floor(topRowIndex / pageSize)\n\n    return {\n      ...state,\n      pageIndex,\n      pageSize,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    rows,\n    autoResetPage = true,\n    manualExpandedKey = 'expanded',\n    plugins,\n    pageCount: userPageCount,\n    paginateExpandedRows = true,\n    expandSubRows = true,\n    state: {\n      pageSize,\n      pageIndex,\n      expanded,\n      globalFilter,\n      filters,\n      groupBy,\n      sortBy,\n    },\n    dispatch,\n    data,\n    manualPagination,\n    manualGlobalFilter,\n    manualFilters,\n    manualGroupBy,\n    manualSortBy,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useGlobalFilter', 'useFilters', 'useGroupBy', 'useSortBy', 'useExpanded'],\n    'usePagination'\n  )\n\n  const getAutoResetPage = useGetLatest(autoResetPage)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetPage()) {\n      dispatch({ type: actions.resetPage })\n    }\n  }, [\n    dispatch,\n    manualPagination ? null : data,\n    manualGlobalFilter ? null : globalFilter,\n    manualFilters ? null : filters,\n    manualGroupBy ? null : groupBy,\n    manualSortBy ? null : sortBy,\n  ])\n\n  const pageCount = manualPagination\n    ? userPageCount\n    : Math.ceil(rows.length / pageSize)\n\n  const pageOptions = React.useMemo(\n    () => (pageCount > 0 ? [...new Array(pageCount)].map((d, i) => i) : []),\n    [pageCount]\n  )\n\n  const page = React.useMemo(() => {\n    let page\n\n    if (manualPagination) {\n      page = rows\n    } else {\n      const pageStart = pageSize * pageIndex\n      const pageEnd = pageStart + pageSize\n\n      page = rows.slice(pageStart, pageEnd)\n    }\n\n    if (paginateExpandedRows) {\n      return page\n    }\n\n    return expandRows(page, { manualExpandedKey, expanded, expandSubRows })\n  }, [\n    expandSubRows,\n    expanded,\n    manualExpandedKey,\n    manualPagination,\n    pageIndex,\n    pageSize,\n    paginateExpandedRows,\n    rows,\n  ])\n\n  const canPreviousPage = pageIndex > 0\n  const canNextPage = pageCount === -1 || pageIndex < pageCount - 1\n\n  const gotoPage = React.useCallback(\n    pageIndex => {\n      dispatch({ type: actions.gotoPage, pageIndex })\n    },\n    [dispatch]\n  )\n\n  const previousPage = React.useCallback(() => {\n    return gotoPage(old => old - 1)\n  }, [gotoPage])\n\n  const nextPage = React.useCallback(() => {\n    return gotoPage(old => old + 1)\n  }, [gotoPage])\n\n  const setPageSize = React.useCallback(\n    pageSize => {\n      dispatch({ type: actions.setPageSize, pageSize })\n    },\n    [dispatch]\n  )\n\n  Object.assign(instance, {\n    pageOptions,\n    pageCount,\n    page,\n    canPreviousPage,\n    canNextPage,\n    gotoPage,\n    previousPage,\n    nextPage,\n    setPageSize,\n  })\n}\n","/* istanbul ignore file */\n\nimport {\n  actions,\n  makePropGetter,\n  ensurePluginOrder,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nimport { flattenColumns, getFirstDefined } from '../utils'\n\n// Actions\nactions.resetPivot = 'resetPivot'\nactions.togglePivot = 'togglePivot'\n\nexport const _UNSTABLE_usePivotColumns = hooks => {\n  hooks.getPivotToggleProps = [defaultGetPivotToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstanceAfterData.push(useInstanceAfterData)\n  hooks.allColumns.push(allColumns)\n  hooks.accessValue.push(accessValue)\n  hooks.materializedColumns.push(materializedColumns)\n  hooks.materializedColumnsDeps.push(materializedColumnsDeps)\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.visibleColumnsDeps.push(visibleColumnsDeps)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\n_UNSTABLE_usePivotColumns.pluginName = 'usePivotColumns'\n\nconst defaultPivotColumns = []\n\nconst defaultGetPivotToggleProps = (props, { header }) => [\n  props,\n  {\n    onClick: header.canPivot\n      ? e => {\n          e.persist()\n          header.togglePivot()\n        }\n      : undefined,\n    style: {\n      cursor: header.canPivot ? 'pointer' : undefined,\n    },\n    title: 'Toggle Pivot',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      pivotColumns: defaultPivotColumns,\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetPivot) {\n    return {\n      ...state,\n      pivotColumns: instance.initialState.pivotColumns || defaultPivotColumns,\n    }\n  }\n\n  if (action.type === actions.togglePivot) {\n    const { columnId, value: setPivot } = action\n\n    const resolvedPivot =\n      typeof setPivot !== 'undefined'\n        ? setPivot\n        : !state.pivotColumns.includes(columnId)\n\n    if (resolvedPivot) {\n      return {\n        ...state,\n        pivotColumns: [...state.pivotColumns, columnId],\n      }\n    }\n\n    return {\n      ...state,\n      pivotColumns: state.pivotColumns.filter(d => d !== columnId),\n    }\n  }\n}\n\nfunction useInstanceAfterData(instance) {\n  instance.allColumns.forEach(column => {\n    column.isPivotSource = instance.state.pivotColumns.includes(column.id)\n  })\n}\n\nfunction allColumns(columns, { instance }) {\n  columns.forEach(column => {\n    column.isPivotSource = instance.state.pivotColumns.includes(column.id)\n    column.uniqueValues = new Set()\n  })\n  return columns\n}\n\nfunction accessValue(value, { column }) {\n  if (column.uniqueValues && typeof value !== 'undefined') {\n    column.uniqueValues.add(value)\n  }\n  return value\n}\n\nfunction materializedColumns(materialized, { instance }) {\n  const { allColumns, state } = instance\n\n  if (!state.pivotColumns.length || !state.groupBy || !state.groupBy.length) {\n    return materialized\n  }\n\n  const pivotColumns = state.pivotColumns\n    .map(id => allColumns.find(d => d.id === id))\n    .filter(Boolean)\n\n  const sourceColumns = allColumns.filter(\n    d =>\n      !d.isPivotSource &&\n      !state.groupBy.includes(d.id) &&\n      !state.pivotColumns.includes(d.id)\n  )\n\n  const buildPivotColumns = (depth = 0, parent, pivotFilters = []) => {\n    const pivotColumn = pivotColumns[depth]\n\n    if (!pivotColumn) {\n      return sourceColumns.map(sourceColumn => {\n        // TODO: We could offer support here for renesting pivoted\n        // columns inside copies of their header groups. For now,\n        // that seems like it would be (1) overkill on nesting, considering\n        // you already get nesting for every pivot level and (2)\n        // really hard. :)\n\n        return {\n          ...sourceColumn,\n          canPivot: false,\n          isPivoted: true,\n          parent,\n          depth: depth,\n          id: `${parent ? `${parent.id}.${sourceColumn.id}` : sourceColumn.id}`,\n          accessor: (originalRow, i, row) => {\n            if (pivotFilters.every(filter => filter(row))) {\n              return row.values[sourceColumn.id]\n            }\n          },\n        }\n      })\n    }\n\n    const uniqueValues = Array.from(pivotColumn.uniqueValues).sort()\n\n    return uniqueValues.map(uniqueValue => {\n      const columnGroup = {\n        ...pivotColumn,\n        Header:\n          pivotColumn.PivotHeader || typeof pivotColumn.header === 'string'\n            ? `${pivotColumn.Header}: ${uniqueValue}`\n            : uniqueValue,\n        isPivotGroup: true,\n        parent,\n        depth,\n        id: parent\n          ? `${parent.id}.${pivotColumn.id}.${uniqueValue}`\n          : `${pivotColumn.id}.${uniqueValue}`,\n        pivotValue: uniqueValue,\n      }\n\n      columnGroup.columns = buildPivotColumns(depth + 1, columnGroup, [\n        ...pivotFilters,\n        row => row.values[pivotColumn.id] === uniqueValue,\n      ])\n\n      return columnGroup\n    })\n  }\n\n  const newMaterialized = flattenColumns(buildPivotColumns())\n\n  return [...materialized, ...newMaterialized]\n}\n\nfunction materializedColumnsDeps(\n  deps,\n  {\n    instance: {\n      state: { pivotColumns, groupBy },\n    },\n  }\n) {\n  return [...deps, pivotColumns, groupBy]\n}\n\nfunction visibleColumns(visibleColumns, { instance: { state } }) {\n  visibleColumns = visibleColumns.filter(d => !d.isPivotSource)\n\n  if (state.pivotColumns.length && state.groupBy && state.groupBy.length) {\n    visibleColumns = visibleColumns.filter(\n      column => column.isGrouped || column.isPivoted\n    )\n  }\n\n  return visibleColumns\n}\n\nfunction visibleColumnsDeps(deps, { instance }) {\n  return [...deps, instance.state.pivotColumns, instance.state.groupBy]\n}\n\nfunction useInstance(instance) {\n  const {\n    columns,\n    allColumns,\n    flatHeaders,\n    // pivotFn = defaultPivotFn,\n    // manualPivot,\n    getHooks,\n    plugins,\n    dispatch,\n    autoResetPivot = true,\n    manaulPivot,\n    disablePivot,\n    defaultCanPivot,\n  } = instance\n\n  ensurePluginOrder(plugins, ['useGroupBy'], 'usePivotColumns')\n\n  const getInstance = useGetLatest(instance)\n\n  allColumns.forEach(column => {\n    const {\n      accessor,\n      defaultPivot: defaultColumnPivot,\n      disablePivot: columnDisablePivot,\n    } = column\n\n    column.canPivot = accessor\n      ? getFirstDefined(\n          column.canPivot,\n          columnDisablePivot === true ? false : undefined,\n          disablePivot === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(\n          column.canPivot,\n          defaultColumnPivot,\n          defaultCanPivot,\n          false\n        )\n\n    if (column.canPivot) {\n      column.togglePivot = () => instance.togglePivot(column.id)\n    }\n\n    column.Aggregated = column.Aggregated || column.Cell\n  })\n\n  const togglePivot = (columnId, value) => {\n    dispatch({ type: actions.togglePivot, columnId, value })\n  }\n\n  flatHeaders.forEach(header => {\n    header.getPivotToggleProps = makePropGetter(\n      getHooks().getPivotToggleProps,\n      {\n        instance: getInstance(),\n        header,\n      }\n    )\n  })\n\n  const getAutoResetPivot = useGetLatest(autoResetPivot)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetPivot()) {\n      dispatch({ type: actions.resetPivot })\n    }\n  }, [dispatch, manaulPivot ? null : columns])\n\n  Object.assign(instance, {\n    togglePivot,\n  })\n}\n\nfunction prepareRow(row) {\n  row.allCells.forEach(cell => {\n    // Grouped cells are in the pivotColumns and the pivot cell for the row\n    cell.isPivoted = cell.column.isPivoted\n  })\n}\n","import React from 'react'\n\nimport {\n  actions,\n  makePropGetter,\n  ensurePluginOrder,\n  useGetLatest,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nconst pluginName = 'useRowSelect'\n\n// Actions\nactions.resetSelectedRows = 'resetSelectedRows'\nactions.toggleAllRowsSelected = 'toggleAllRowsSelected'\nactions.toggleRowSelected = 'toggleRowSelected'\n\nexport const useRowSelect = hooks => {\n  hooks.getToggleRowSelectedProps = [defaultGetToggleRowSelectedProps]\n  hooks.getToggleAllRowsSelectedProps = [defaultGetToggleAllRowsSelectedProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseRowSelect.pluginName = pluginName\n\nconst defaultGetToggleRowSelectedProps = (props, { instance, row }) => {\n  const { manualRowSelectedKey = 'isSelected' } = instance\n  let checked = false\n\n  if (row.original && row.original[manualRowSelectedKey]) {\n    checked = true\n  } else {\n    checked = row.isSelected\n  }\n\n  return [\n    props,\n    {\n      onChange: e => {\n        row.toggleRowSelected(e.target.checked)\n      },\n      style: {\n        cursor: 'pointer',\n      },\n      checked,\n      title: 'Toggle Row Selected',\n      indeterminate: row.isSomeSelected,\n    },\n  ]\n}\n\nconst defaultGetToggleAllRowsSelectedProps = (props, { instance }) => [\n  props,\n  {\n    onChange: e => {\n      instance.toggleAllRowsSelected(e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: instance.isAllRowsSelected,\n    title: 'Toggle All Rows Selected',\n    indeterminate: Boolean(\n      !instance.isAllRowsSelected &&\n        Object.keys(instance.state.selectedRowIds).length\n    ),\n  },\n]\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      selectedRowIds: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetSelectedRows) {\n    return {\n      ...state,\n      selectedRowIds: instance.initialState.selectedRowIds || {},\n    }\n  }\n\n  if (action.type === actions.toggleAllRowsSelected) {\n    const { value: setSelected } = action\n    const {\n      isAllRowsSelected,\n      rowsById,\n      nonGroupedRowsById = rowsById,\n    } = instance\n\n    const selectAll =\n      typeof setSelected !== 'undefined' ? setSelected : !isAllRowsSelected\n\n    if (selectAll) {\n      const selectedRowIds = {}\n\n      Object.keys(nonGroupedRowsById).forEach(rowId => {\n        selectedRowIds[rowId] = true\n      })\n\n      return {\n        ...state,\n        selectedRowIds,\n      }\n    }\n\n    return {\n      ...state,\n      selectedRowIds: {},\n    }\n  }\n\n  if (action.type === actions.toggleRowSelected) {\n    const { id, value: setSelected } = action\n    const { rowsById, selectSubRows = true } = instance\n\n    // Join the ids of deep rows\n    // to make a key, then manage all of the keys\n    // in a flat object\n    const row = rowsById[id]\n    const isSelected = row.isSelected\n    const shouldExist =\n      typeof setSelected !== 'undefined' ? setSelected : !isSelected\n\n    if (isSelected === shouldExist) {\n      return state\n    }\n\n    let newSelectedRowIds = { ...state.selectedRowIds }\n\n    const handleRowById = id => {\n      const row = rowsById[id]\n\n      if (!row.isGrouped) {\n        if (!isSelected && shouldExist) {\n          newSelectedRowIds[id] = true\n        } else if (isSelected && !shouldExist) {\n          delete newSelectedRowIds[id]\n        }\n      }\n\n      if (selectSubRows && row.subRows) {\n        return row.subRows.forEach(row => handleRowById(row.id))\n      }\n    }\n\n    handleRowById(id)\n\n    return {\n      ...state,\n      selectedRowIds: newSelectedRowIds,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    getHooks,\n    plugins,\n    rowsById,\n    nonGroupedRowsById = rowsById,\n    autoResetSelectedRows = true,\n    state: { selectedRowIds },\n    selectSubRows = true,\n    dispatch,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useFilters', 'useGroupBy', 'useSortBy'],\n    'useRowSelect'\n  )\n\n  const selectedFlatRows = React.useMemo(() => {\n    const selectedFlatRows = []\n\n    rows.forEach(row => {\n      const isSelected = selectSubRows\n        ? getRowIsSelected(row, selectedRowIds)\n        : !!selectedRowIds[row.id]\n      row.isSelected = !!isSelected\n      row.isSomeSelected = isSelected === null\n\n      if (isSelected) {\n        selectedFlatRows.push(row)\n      }\n    })\n\n    return selectedFlatRows\n  }, [rows, selectSubRows, selectedRowIds])\n\n  let isAllRowsSelected = Boolean(\n    Object.keys(nonGroupedRowsById).length && Object.keys(selectedRowIds).length\n  )\n\n  if (isAllRowsSelected) {\n    if (Object.keys(nonGroupedRowsById).some(id => !selectedRowIds[id])) {\n      isAllRowsSelected = false\n    }\n  }\n\n  const getAutoResetSelectedRows = useGetLatest(autoResetSelectedRows)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetSelectedRows()) {\n      dispatch({ type: actions.resetSelectedRows })\n    }\n  }, [dispatch, data])\n\n  const toggleAllRowsSelected = React.useCallback(\n    value => dispatch({ type: actions.toggleAllRowsSelected, value }),\n    [dispatch]\n  )\n\n  const toggleRowSelected = React.useCallback(\n    (id, value) => dispatch({ type: actions.toggleRowSelected, id, value }),\n    [dispatch]\n  )\n\n  const getInstance = useGetLatest(instance)\n\n  const getToggleAllRowsSelectedProps = makePropGetter(\n    getHooks().getToggleAllRowsSelectedProps,\n    { instance: getInstance() }\n  )\n\n  Object.assign(instance, {\n    selectedFlatRows,\n    isAllRowsSelected,\n    toggleRowSelected,\n    toggleAllRowsSelected,\n    getToggleAllRowsSelectedProps,\n  })\n}\n\nfunction prepareRow(row, { instance }) {\n  row.toggleRowSelected = set => instance.toggleRowSelected(row.id, set)\n\n  row.getToggleRowSelectedProps = makePropGetter(\n    instance.getHooks().getToggleRowSelectedProps,\n    { instance: instance, row }\n  )\n}\n\nfunction getRowIsSelected(row, selectedRowIds) {\n  if (selectedRowIds[row.id]) {\n    return true\n  }\n\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (getRowIsSelected(subRow, selectedRowIds)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n    return allChildrenSelected ? true : someSelected ? null : false\n  }\n\n  return false\n}\n","import React from 'react'\n\nimport {\n  actions,\n  functionalUpdate,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nconst defaultInitialRowStateAccessor = originalRow => ({})\nconst defaultInitialCellStateAccessor = originalRow => ({})\n\n// Actions\nactions.setRowState = 'setRowState'\nactions.setCellState = 'setCellState'\nactions.resetRowState = 'resetRowState'\n\nexport const useRowState = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseRowState.pluginName = 'useRowState'\n\nfunction reducer(state, action, previousState, instance) {\n  const {\n    initialRowStateAccessor = defaultInitialRowStateAccessor,\n    initialCellStateAccessor = defaultInitialCellStateAccessor,\n    rowsById,\n  } = instance\n\n  if (action.type === actions.init) {\n    return {\n      rowState: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetRowState) {\n    return {\n      ...state,\n      rowState: instance.initialState.rowState || {},\n    }\n  }\n\n  if (action.type === actions.setRowState) {\n    const { rowId, value } = action\n\n    const oldRowState =\n      typeof state.rowState[rowId] !== 'undefined'\n        ? state.rowState[rowId]\n        : initialRowStateAccessor(rowsById[rowId].original)\n\n    return {\n      ...state,\n      rowState: {\n        ...state.rowState,\n        [rowId]: functionalUpdate(value, oldRowState),\n      },\n    }\n  }\n\n  if (action.type === actions.setCellState) {\n    const { rowId, columnId, value } = action\n\n    const oldRowState =\n      typeof state.rowState[rowId] !== 'undefined'\n        ? state.rowState[rowId]\n        : initialRowStateAccessor(rowsById[rowId].original)\n\n    const oldCellState =\n      typeof oldRowState?.cellState?.[columnId] !== 'undefined'\n        ? oldRowState.cellState[columnId]\n        : initialCellStateAccessor(rowsById[rowId].original)\n\n    return {\n      ...state,\n      rowState: {\n        ...state.rowState,\n        [rowId]: {\n          ...oldRowState,\n          cellState: {\n            ...(oldRowState.cellState || {}),\n            [columnId]: functionalUpdate(value, oldCellState),\n          },\n        },\n      },\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const { autoResetRowState = true, data, dispatch } = instance\n\n  const setRowState = React.useCallback(\n    (rowId, value) =>\n      dispatch({\n        type: actions.setRowState,\n        rowId,\n        value,\n      }),\n    [dispatch]\n  )\n\n  const setCellState = React.useCallback(\n    (rowId, columnId, value) =>\n      dispatch({\n        type: actions.setCellState,\n        rowId,\n        columnId,\n        value,\n      }),\n    [dispatch]\n  )\n\n  const getAutoResetRowState = useGetLatest(autoResetRowState)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetRowState()) {\n      dispatch({ type: actions.resetRowState })\n    }\n  }, [data])\n\n  Object.assign(instance, {\n    setRowState,\n    setCellState,\n  })\n}\n\nfunction prepareRow(row, { instance }) {\n  const {\n    initialRowStateAccessor = defaultInitialRowStateAccessor,\n    initialCellStateAccessor = defaultInitialCellStateAccessor,\n    state: { rowState },\n  } = instance\n\n  if (row.original) {\n    row.state =\n      typeof rowState[row.id] !== 'undefined'\n        ? rowState[row.id]\n        : initialRowStateAccessor(row.original)\n\n    row.setState = updater => {\n      return instance.setRowState(row.id, updater)\n    }\n\n    row.cells.forEach(cell => {\n      if (!row.state.cellState) {\n        row.state.cellState = {}\n      }\n\n      cell.state =\n        typeof row.state.cellState[cell.column.id] !== 'undefined'\n          ? row.state.cellState[cell.column.id]\n          : initialCellStateAccessor(row.original)\n\n      cell.setState = updater => {\n        return instance.setCellState(row.id, cell.column.id, updater)\n      }\n    })\n  }\n}\n","import React from 'react'\n\nimport { functionalUpdate, actions } from '../publicUtils'\n\n// Actions\nactions.resetColumnOrder = 'resetColumnOrder'\nactions.setColumnOrder = 'setColumnOrder'\n\nexport const useColumnOrder = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.visibleColumnsDeps.push((deps, { instance }) => {\n    return [...deps, instance.state.columnOrder]\n  })\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.useInstance.push(useInstance)\n}\n\nuseColumnOrder.pluginName = 'useColumnOrder'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetColumnOrder) {\n    return {\n      ...state,\n      columnOrder: instance.initialState.columnOrder || [],\n    }\n  }\n\n  if (action.type === actions.setColumnOrder) {\n    return {\n      ...state,\n      columnOrder: functionalUpdate(action.columnOrder, state.columnOrder),\n    }\n  }\n}\n\nfunction visibleColumns(\n  columns,\n  {\n    instance: {\n      state: { columnOrder },\n    },\n  }\n) {\n  // If there is no order, return the normal columns\n  if (!columnOrder || !columnOrder.length) {\n    return columns\n  }\n\n  const columnOrderCopy = [...columnOrder]\n\n  // If there is an order, make a copy of the columns\n  const columnsCopy = [...columns]\n\n  // And make a new ordered array of the columns\n  const columnsInOrder = []\n\n  // Loop over the columns and place them in order into the new array\n  while (columnsCopy.length && columnOrderCopy.length) {\n    const targetColumnId = columnOrderCopy.shift()\n    const foundIndex = columnsCopy.findIndex(d => d.id === targetColumnId)\n    if (foundIndex > -1) {\n      columnsInOrder.push(columnsCopy.splice(foundIndex, 1)[0])\n    }\n  }\n\n  // If there are any columns left, add them to the end\n  return [...columnsInOrder, ...columnsCopy]\n}\n\nfunction useInstance(instance) {\n  const { dispatch } = instance\n\n  instance.setColumnOrder = React.useCallback(\n    columnOrder => {\n      return dispatch({ type: actions.setColumnOrder, columnOrder })\n    },\n    [dispatch]\n  )\n}\n","import {\n  actions,\n  defaultColumn,\n  makePropGetter,\n  useGetLatest,\n  ensurePluginOrder,\n} from '../publicUtils'\n\nimport { getFirstDefined } from '../utils'\n\n// Default Column\ndefaultColumn.canResize = true\n\n// Actions\nactions.columnStartResizing = 'columnStartResizing'\nactions.columnResizing = 'columnResizing'\nactions.columnDoneResizing = 'columnDoneResizing'\n\nexport const useResizeColumns = hooks => {\n  hooks.getResizerProps = [defaultGetResizerProps]\n  hooks.getHeaderProps.push({\n    style: {\n      position: 'relative',\n    },\n  })\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions)\n}\n\nconst defaultGetResizerProps = (props, { instance, header }) => {\n  const { dispatch } = instance\n\n  const onResizeStart = (e, header) => {\n    let isTouchEvent = false\n    if (e.type === 'touchstart') {\n      // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n      if (e.touches && e.touches.length > 1) {\n        return\n      }\n      isTouchEvent = true\n    }\n    const headersToResize = getLeafHeaders(header)\n    const headerIdWidths = headersToResize.map(d => [d.id, d.totalWidth])\n\n    const clientX = isTouchEvent ? Math.round(e.touches[0].clientX) : e.clientX\n\n    const dispatchMove = clientXPos => {\n      dispatch({ type: actions.columnResizing, clientX: clientXPos })\n    }\n    const dispatchEnd = () => dispatch({ type: actions.columnDoneResizing })\n\n    const handlersAndEvents = {\n      mouse: {\n        moveEvent: 'mousemove',\n        moveHandler: e => dispatchMove(e.clientX),\n        upEvent: 'mouseup',\n        upHandler: e => {\n          document.removeEventListener(\n            'mousemove',\n            handlersAndEvents.mouse.moveHandler\n          )\n          document.removeEventListener(\n            'mouseup',\n            handlersAndEvents.mouse.upHandler\n          )\n          dispatchEnd()\n        },\n      },\n      touch: {\n        moveEvent: 'touchmove',\n        moveHandler: e => {\n          if (e.cancelable) {\n            e.preventDefault()\n            e.stopPropagation()\n          }\n          dispatchMove(e.touches[0].clientX)\n          return false\n        },\n        upEvent: 'touchend',\n        upHandler: e => {\n          document.removeEventListener(\n            handlersAndEvents.touch.moveEvent,\n            handlersAndEvents.touch.moveHandler\n          )\n          document.removeEventListener(\n            handlersAndEvents.touch.upEvent,\n            handlersAndEvents.touch.moveHandler\n          )\n          dispatchEnd()\n        },\n      },\n    }\n\n    const events = isTouchEvent\n      ? handlersAndEvents.touch\n      : handlersAndEvents.mouse\n    document.addEventListener(events.moveEvent, events.moveHandler, {\n      passive: false,\n    })\n    document.addEventListener(events.upEvent, events.upHandler, {\n      passive: false,\n    })\n\n    dispatch({\n      type: actions.columnStartResizing,\n      columnId: header.id,\n      columnWidth: header.totalWidth,\n      headerIdWidths,\n      clientX,\n    })\n  }\n\n  return [\n    props,\n    {\n      onMouseDown: e => e.persist() || onResizeStart(e, header),\n      onTouchStart: e => e.persist() || onResizeStart(e, header),\n      style: {\n        cursor: 'ew-resize',\n      },\n      draggable: false,\n      role: 'separator',\n    },\n  ]\n}\n\nuseResizeColumns.pluginName = 'useResizeColumns'\n\nfunction reducer(state, action) {\n  if (action.type === actions.init) {\n    return {\n      columnResizing: {\n        columnWidths: {},\n      },\n      ...state,\n    }\n  }\n\n  if (action.type === actions.columnStartResizing) {\n    const { clientX, columnId, columnWidth, headerIdWidths } = action\n\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        startX: clientX,\n        headerIdWidths,\n        columnWidth,\n        isResizingColumn: columnId,\n      },\n    }\n  }\n\n  if (action.type === actions.columnResizing) {\n    const { clientX } = action\n    const { startX, columnWidth, headerIdWidths } = state.columnResizing\n\n    const deltaX = clientX - startX\n    const percentageDeltaX = deltaX / columnWidth\n\n    const newColumnWidths = {}\n\n    headerIdWidths.forEach(([headerId, headerWidth]) => {\n      newColumnWidths[headerId] = Math.max(\n        headerWidth + headerWidth * percentageDeltaX,\n        0\n      )\n    })\n\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        columnWidths: {\n          ...state.columnResizing.columnWidths,\n          ...newColumnWidths,\n        },\n      },\n    }\n  }\n\n  if (action.type === actions.columnDoneResizing) {\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        startX: null,\n        isResizingColumn: null,\n      },\n    }\n  }\n}\n\nconst useInstanceBeforeDimensions = instance => {\n  const {\n    flatHeaders,\n    disableResizing,\n    getHooks,\n    state: { columnResizing },\n  } = instance\n\n  const getInstance = useGetLatest(instance)\n\n  flatHeaders.forEach(header => {\n    const canResize = getFirstDefined(\n      header.disableResizing === true ? false : undefined,\n      disableResizing === true ? false : undefined,\n      true\n    )\n\n    header.canResize = canResize\n    header.width = columnResizing.columnWidths[header.id] || header.width\n    header.isResizing = columnResizing.isResizingColumn === header.id\n\n    if (canResize) {\n      header.getResizerProps = makePropGetter(getHooks().getResizerProps, {\n        instance: getInstance(),\n        header,\n      })\n    }\n  })\n}\n\nfunction useInstance({ plugins }) {\n  ensurePluginOrder(plugins, ['useAbsoluteLayout'], 'useResizeColumns')\n}\n\nfunction getLeafHeaders(header) {\n  const leafHeaders = []\n  const recurseHeader = header => {\n    if (header.columns && header.columns.length) {\n      header.columns.map(recurseHeader)\n    }\n    leafHeaders.push(header)\n  }\n  recurseHeader(header)\n  return leafHeaders\n}\n","import React from 'react';\n/**\n * @ignore - internal component.\n */\n\nvar Tablelvl2Context = React.createContext();\n\nif (process.env.NODE_ENV !== 'production') {\n  Tablelvl2Context.displayName = 'Tablelvl2Context';\n}\n\nexport default Tablelvl2Context;","import React from 'react';\n/**\n * @ignore - internal component.\n */\n\nvar TableContext = React.createContext();\n\nif (process.env.NODE_ENV !== 'production') {\n  TableContext.displayName = 'TableContext';\n}\n\nexport default TableContext;"],"sourceRoot":""}