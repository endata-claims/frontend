{"version":3,"sources":["../parser.js","../node_modules/@material-ui/core/esm/Modal/ModalManager.js","../node_modules/@material-ui/core/esm/Modal/TrapFocus.js","../node_modules/@material-ui/core/esm/Modal/SimpleBackdrop.js","../node_modules/@material-ui/core/esm/Modal/Modal.js","pages/auth/Signin.tsx","../useQuery.js","../useLazyQuery.js","../MutationData.js","../useMutation.js","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","components/Formik/TextField/index.tsx","generated/graphql.tsx","../node_modules/@material-ui/core/esm/utils/ownerWindow.js","../node_modules/@material-ui/core/esm/InputAdornment/InputAdornment.js","../node_modules/@material-ui/core/esm/utils/isMuiElement.js","../node_modules/@material-ui/core/esm/utils/getScrollbarSize.js","../node_modules/@material-ui/core/esm/List/ListContext.js","../OperationData.js","../QueryData.js","../useBaseQuery.js","../useDeepMemo.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/@material-ui/core/esm/List/List.js","../node_modules/@material-ui/core/esm/MenuList/MenuList.js","../node_modules/@material-ui/core/esm/Menu/Menu.js","../node_modules/@material-ui/core/esm/Popover/Popover.js","../node_modules/@material-ui/core/esm/Portal/Portal.js","../node_modules/@material-ui/core/esm/IconButton/IconButton.js","../node_modules/@material-ui/core/esm/CircularProgress/CircularProgress.js","../node_modules/@material-ui/core/esm/Container/Container.js","../node_modules/@material-ui/core/esm/Divider/Divider.js"],"names":["DocumentType","cache","Map","operationName","type","name","Query","Mutation","Subscription","parser","document","variables","cached","get","fragments","definitions","filter","x","kind","queries","operation","mutations","subscriptions","length","ariaHidden","node","show","setAttribute","removeAttribute","getPaddingRight","parseInt","window","getComputedStyle","ariaHiddenSiblings","container","mountNode","currentNode","nodesToExclude","arguments","undefined","blacklist","concat","_toConsumableArray","blacklistTagNames","forEach","call","children","nodeType","indexOf","tagName","findIndexOf","containerInfo","callback","idx","some","item","index","handleContainer","props","fixedNodes","restoreStyle","restorePaddings","disableScrollLock","doc","ownerDocument","body","ownerWindow","innerWidth","documentElement","clientWidth","scrollHeight","clientHeight","isOverflowing","scrollbarSize","getScrollbarSize","push","value","style","paddingRight","key","el","querySelectorAll","parent","parentElement","scrollContainer","nodeName","overflow","i","removeProperty","_ref","setProperty","ModalManager","_classCallCheck","this","modals","containers","_createClass","modal","modalIndex","modalRef","hiddenSiblingNodes","hiddenSiblings","getAttribute","getHiddenSiblings","containerIndex","restore","splice","nextTop","TrapFocus","_props$disableAutoFoc","disableAutoFocus","_props$disableEnforce","disableEnforceFocus","_props$disableRestore","disableRestoreFocus","getDoc","isEnabled","open","ignoreNextEnforceFocus","React","useRef","sentinelStart","sentinelEnd","nodeToRestore","rootRef","handleOwnRef","useCallback","instance","current","ReactDOM","findDOMNode","handleRef","useForkRef","ref","useMemo","activeElement","useEffect","contains","hasAttribute","focus","contain","loopFocus","event","keyCode","shiftKey","addEventListener","interval","setInterval","clearInterval","removeEventListener","createElement","Fragment","tabIndex","cloneElement","styles","root","zIndex","position","right","bottom","top","left","backgroundColor","WebkitTapHighlightColor","invisible","SimpleBackdrop","forwardRef","_props$invisible","other","_objectWithoutProperties","_extends","defaultManager","Modal","inProps","theme","useTheme","getThemeProps","_props$BackdropCompon","BackdropComponent","BackdropProps","_props$closeAfterTran","closeAfterTransition","_props$disableBackdro","disableBackdropClick","_props$disableEscapeK","disableEscapeKeyDown","_props$disablePortal","disablePortal","_props$disableScrollL","_props$hideBackdrop","hideBackdrop","_props$keepMounted","keepMounted","_props$manager","manager","onBackdropClick","onClose","onEscapeKeyDown","onRendered","_React$useState","useState","exited","setExited","mountNodeRef","hasTransition","hasOwnProperty","getHasTransition","getModal","handleMounted","mount","scrollTop","handleOpen","useEventCallback","resolvedContainer","getContainer","add","isTopModal","handlePortalRef","handleClose","remove","inlineStyle","hidden","visibility","childProps","onEnter","createChainedFunction","onExited","Portal","onKeyDown","stopPropagation","role","onClick","target","currentTarget","gql","Signin","maxWidth","height","alignItems","justify","padding","width","display","margin","alt","src","variant","gutterBottom","textAlign","SigninForm","useSigninMutation","signin","enqueueSnackbar","useSnackbar","useHistory","initialValues","userLogin","password","onSubmit","values","a","input","catch","error","res","data","userAuthenticateAllServer","user","userName","localStorage","setItem","accessToken","refreshToken","graphQLErrors","message","replace","isSubmitting","spacing","xs","label","required","fullWidth","justifyContent","disabled","color","useQuery","query","options","useLazyQuery","_super","MutationData","_a","context","result","setResult","_this","runMutation","mutationFunctionOptions","onMutationStart","mutationId","generateNewMutationId","mutate","then","response","onMutationCompleted","onMutationError","getOptions","onError","verifyDocumentType","mutation","mostRecentMutationId","prototype","execute","isMounted","client","refreshClient","afterExecute","unmount","bind","cleanup","optimisticResponse","update","_b","mutationContext","_c","awaitRefetchQueries","fetchPolicy","mutateOptions","mutateVariables","Object","assign","refetchQueries","loading","ignoreResults","updateResult","called","onCompleted","errors","ApolloError","isMostRecentMutation","previousResult","useMutation","useContext","updatedOptions","mutationDataRef","mutationData","setOptions","_slicedToArray","arr","arrayWithHoles","Symbol","iterator","toString","_arr","_n","_d","_e","_s","_i","next","done","err","nonIterableRest","Loader","marginRight","FormikTextField","startAdornment","endAdornment","InputProps","validate","isDisabled","component","TextField","AccessRole","ActionType","ClaimCategory","ClaimCommunicationBox","DataDisplay","DataSense","DataUnit","DateRangeOption","FilterType","JobRecommendationStatus","JobVariationStatus","LogLevel","PortfolioType","QuoteCostType","QuoteRequestStatus","QuoteRequestType","ReportStatus","RequestCategory","Server","State","SupplierStatusFilter","SupplierTypeFilter","UserType","WidgetViewName","ClaimDetailsCardFragmentFragmentDoc","ClaimDetailsCardMetaFragmentFragmentDoc","CustomerDetailsCardFragmentFragmentDoc","CustomerDetailsCardMetaFragmentFragmentDoc","QuotingBuildersCardFragmentFragmentDoc","QuotingBuildersCardMetaFragmentFragmentDoc","QuotingRestorersCardFragmentFragmentDoc","InfoCardDataFragmentFragmentDoc","AddClaimTypeDialogClaimFragmentFragmentDoc","AddDocumentClaimFragmentFragmentDoc","AddDocumentMetaFragmentFragmentDoc","JobInfo_ClaimDetailsCardFragmentFragmentDoc","JobInfo_ClaimDetailsCardMetaFragmentFragmentDoc","JobInfo_CustomerInfoCardMetaFragmentFragmentDoc","JobInfo_QuotingBuilderCardFragmentFragmentDoc","JobInfo_QuotingRestorerCardFragmentFragmentDoc","JobInfoTabFragmentFragmentDoc","JobNoteListFragmentFragmentDoc","JobNotesFragmentFragmentDoc","FormCardFragmentFragmentDoc","ReportTabFragmentFragmentDoc","ClaimListBodyFragmentDoc","ClaimCommunicationBodyFragmentDoc","CommunicationHeaderFragmentFragmentDoc","DashboardHeaderFragmentFragmentDoc","CommunicationmenuDocument","useCommunicationmenuQuery","baseOptions","ApolloReactHooks","AddClaimDocument","useAddClaimMutation","AddClaimRootDocument","useAddClaimRootQuery","ChooseCompanyDocument","useChooseCompanyQuery","ClaimMetaContextDocument","useClaimMetaContextQuery","AddClaimTypeDialogDocument","useAddClaimTypeDialogQuery","AddClaimTypeDocument","useAddClaimTypeMutation","AddCommunicationActionDocument","useAddCommunicationActionQuery","AddCommunicationDocument","useAddCommunicationMutation","UploadDocumentDocument","useUploadDocumentMutation","AddJobNoteDocument","useAddJobNoteMutation","NextStepDialogDocument","useNextStepDialogQuery","ClaimDetailsDocument","useClaimDetailsQuery","JobInfoDocument","useJobInfoQuery","JobInfoTabUpdateDocument","useJobInfoTabUpdateMutation","JobNotesDocument","useJobNotesQuery","AppointmentMadeDocument","useAppointmentMadeMutation","CancelAwaitingInfoDocument","useCancelAwaitingInfoMutation","AddAwaitingInfoDocument","useAddAwaitingInfoMutation","AwaitingInfoFormDocument","useAwaitingInfoFormQuery","ChangeAppointmentDocument","useChangeAppointmentMutation","InitCallDocument","useInitCallMutation","SaveReportDocument","useSaveReportMutation","SubmitReportDocument","useSubmitReportMutation","ResetReportDocument","useResetReportMutation","ClaimListFilterDocument","useClaimListFilterQuery","ClaimListWaterfallFilterDocument","useClaimListWaterfallFilterQuery","ClaimListDataDocument","useClaimListDataQuery","CommunicationActionAcknowledgeDocument","useCommunicationActionAcknowledgeMutation","CommunicationActionReplyDocument","useCommunicationActionReplyMutation","CommunicationListFiltersDocument","useCommunicationListFiltersQuery","CommunicationsDataDocument","useCommunicationsDataQuery","KpiAlertDetailsDocument","useKpiAlertDetailsQuery","DashboardFiltersDocument","useDashboardFiltersQuery","DashboardKpiDocument","useDashboardKpiQuery","AppRootDocument","useAppRootQuery","LoginDocument","useLoginQuery","SigninDocument","defaultView","InputAdornment","classes","className","_props$component","Component","_props$disablePointer","disablePointerEvents","_props$disableTypogra","disableTypography","variantProp","muiFormControl","useFormControl","FormControlContext","Provider","clsx","hiddenLabel","filled","positionStart","positionEnd","marginDense","Typography","withStyles","maxHeight","whiteSpace","marginTop","marginLeft","pointerEvents","isMuiElement","element","muiNames","isValidElement","muiName","scrollDiv","appendChild","offsetWidth","removeChild","ListContext","createContext","OperationData","previousOptions","newOptions","storePrevious","isNew","QueryData","forceUpdate","previousData","currentObservable","runLazy","runLazyQuery","lazyOptions","getQueryResult","observableQueryFields","skip","currentResult","getCurrentResult","partial","networkStatus","getLastResult","partialRefetch","keys","refetch","obsRefetch","obsFetchMore","fetchMoreOptions","fetchMore","obsUpdateQuery","mapFn","updateQuery","obsStartPolling","pollInterval","startPolling","obsStopPolling","stopPolling","obsSubscribeToMore","subscribeToMore","removeQuerySubscription","updateObservableQuery","startQuerySubscription","getExecuteSsrResult","getExecuteResult","executeLazy","ready","fetchData","ssr","Promise","resolve","queryResult","lazy","handleErrorOrCompleted","setTimeout","resetQueryStoreErrors","treeRenderingInitiated","renderPromises","ssrDisabled","fetchDisabled","disableNetworkFetches","ssrLoading","addQueryPromise","prepareObservableQueryOptions","displayName","metadata","reactComponent","initializeObservableQuery","getSSRObservable","observableQueryOptions","watchQuery","registerSSRObservable","newObservableQueryOptions","onNewData","subscription","obsQuery","subscribe","resubscribeToQuery","lastError","getLastError","lastResult","resetLastResults","unsubscribe","useBaseQuery","useReducer","tick","queryDataRef","queryData","memoFn","useDeepMemo","_arrayWithHoles","Array","isArray","_nonIterableRest","TypeError","List","_props$dense","dense","_props$disablePadding","disablePadding","subheader","listStyle","paddingTop","paddingBottom","nextItem","list","disableListWrap","firstChild","nextElementSibling","previousItem","lastChild","previousElementSibling","textCriteriaMatches","nextFocus","textCriteria","text","innerText","textContent","trim","toLowerCase","repeating","join","moveFocus","currentFocus","traversalFunction","wrappedOnce","useEnhancedEffect","useLayoutEffect","MenuList","actions","_props$autoFocus","autoFocus","_props$autoFocusItem","autoFocusItem","_props$disableListWra","_props$variant","listRef","textCriteriaRef","previousKeyMatched","lastTime","useImperativeHandle","adjustStyleForScrollbar","containerElement","noExplicitWidth","direction","activeItemIndex","Children","child","selected","items","map","newChildProps","preventDefault","criteria","lowerKey","currTime","performance","now","keepFocusOnCurrent","RTL_ORIGIN","vertical","horizontal","LTR_ORIGIN","Menu","disableAutoFocusItem","_props$MenuListProps","MenuListProps","onEntering","_props$PaperProps","PaperProps","PopoverClasses","_props$transitionDura","transitionDuration","menuListActionsRef","contentAnchorRef","setRef","Popover","getContentAnchorEl","isAppearing","anchorOrigin","transformOrigin","paper","WebkitOverflowScrolling","outline","getOffsetTop","rect","offset","getOffsetLeft","getTransformOriginValue","n","getAnchorEl","anchorEl","action","_props$anchorOrigin","anchorPosition","_props$anchorReferenc","anchorReference","containerProp","_props$elevation","elevation","_props$marginThreshol","marginThreshold","onEntered","onExit","onExiting","_props$transformOrigi","_props$TransitionComp","TransitionComponent","Grow","transitionDurationProp","_props$TransitionProp","TransitionProps","paperRef","getAnchorOffset","contentAnchorOffset","resolvedAnchorEl","anchorRect","Element","getBoundingClientRect","anchorVertical","getContentAnchorOffset","contentAnchorEl","getScrollParent","offsetTop","process","getTransformOrigin","elemRect","getPositioningStyle","offsetHeight","elemTransformOrigin","anchorOffset","containerWindow","heightThreshold","innerHeight","widthThreshold","diff","_diff","_diff2","_diff3","Math","round","setPositioningStyles","positioning","handlePaperRef","updatePosition","handleResize","debounce","clear","muiSupportAuto","appear","in","timeout","Paper","overflowY","overflowX","minWidth","minHeight","setMountNode","createPortal","IconButton","_props$edge","edge","_props$color","_props$disabled","_props$disableFocusRi","disableFocusRipple","_props$size","size","ButtonBase","capitalize","edgeStart","edgeEnd","centerRipple","focusRipple","flex","fontSize","typography","pxToRem","borderRadius","palette","active","transition","transitions","create","duration","shortest","fade","hoverOpacity","colorInherit","colorPrimary","primary","main","colorSecondary","secondary","sizeSmall","easeOut","t","min","max","CircularProgress","_props$disableShrink","disableShrink","_props$thickness","thickness","_props$value","circleStyle","rootStyle","rootProps","circumference","PI","strokeDasharray","toFixed","strokeDashoffset","transform","indeterminate","static","svg","viewBox","SIZE","circle","circleDisableShrink","circleIndeterminate","circleStatic","cx","cy","r","fill","strokeWidth","animation","stroke","flip","Container","_props$disableGutters","disableGutters","_props$fixed","fixed","_props$maxWidth","String","_defineProperty","boxSizing","paddingLeft","breakpoints","up","reduce","acc","breakpoint","maxWidthXs","maxWidthSm","sm","maxWidthMd","md","maxWidthLg","lg","maxWidthXl","xl","Divider","_props$absolute","absolute","_props$flexItem","flexItem","_props$light","light","_props$orientation","orientation","_props$role","border","flexShrink","divider","inset","middle","alignSelf"],"mappings":"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","file":"static/js/71.4a55b0ef.chunk.js","sourcesContent":["import { invariant } from 'ts-invariant';\nexport var DocumentType;\n(function (DocumentType) {\n    DocumentType[DocumentType[\"Query\"] = 0] = \"Query\";\n    DocumentType[DocumentType[\"Mutation\"] = 1] = \"Mutation\";\n    DocumentType[DocumentType[\"Subscription\"] = 2] = \"Subscription\";\n})(DocumentType || (DocumentType = {}));\nvar cache = new Map();\nexport function operationName(type) {\n    var name;\n    switch (type) {\n        case DocumentType.Query:\n            name = 'Query';\n            break;\n        case DocumentType.Mutation:\n            name = 'Mutation';\n            break;\n        case DocumentType.Subscription:\n            name = 'Subscription';\n            break;\n    }\n    return name;\n}\nexport function parser(document) {\n    var cached = cache.get(document);\n    if (cached)\n        return cached;\n    var variables, type, name;\n    invariant(!!document && !!document.kind, \"Argument of \" + document + \" passed to parser was not a valid GraphQL \" +\n        \"DocumentNode. You may need to use 'graphql-tag' or another method \" +\n        \"to convert your operation into a document\");\n    var fragments = document.definitions.filter(function (x) { return x.kind === 'FragmentDefinition'; });\n    var queries = document.definitions.filter(function (x) {\n        return x.kind === 'OperationDefinition' && x.operation === 'query';\n    });\n    var mutations = document.definitions.filter(function (x) {\n        return x.kind === 'OperationDefinition' && x.operation === 'mutation';\n    });\n    var subscriptions = document.definitions.filter(function (x) {\n        return x.kind === 'OperationDefinition' && x.operation === 'subscription';\n    });\n    invariant(!fragments.length ||\n        (queries.length || mutations.length || subscriptions.length), \"Passing only a fragment to 'graphql' is not yet supported. \" +\n        \"You must include a query, subscription or mutation as well\");\n    invariant(queries.length + mutations.length + subscriptions.length <= 1, \"react-apollo only supports a query, subscription, or a mutation per HOC. \" +\n        (document + \" had \" + queries.length + \" queries, \" + subscriptions.length + \" \") +\n        (\"subscriptions and \" + mutations.length + \" mutations. \") +\n        \"You can use 'compose' to join multiple operation types to a component\");\n    type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n    if (!queries.length && !mutations.length)\n        type = DocumentType.Subscription;\n    var definitions = queries.length\n        ? queries\n        : mutations.length\n            ? mutations\n            : subscriptions;\n    invariant(definitions.length === 1, \"react-apollo only supports one definition per HOC. \" + document + \" had \" +\n        (definitions.length + \" definitions. \") +\n        \"You can use 'compose' to join multiple operation types to a component\");\n    var definition = definitions[0];\n    variables = definition.variableDefinitions || [];\n    if (definition.name && definition.name.kind === 'Name') {\n        name = definition.name.value;\n    }\n    else {\n        name = 'data';\n    }\n    var payload = { name: name, type: type, variables: variables };\n    cache.set(document, payload);\n    return payload;\n}\n//# sourceMappingURL=parser.js.map","import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport getScrollbarSize from '../utils/getScrollbarSize';\nimport ownerDocument from '../utils/ownerDocument';\nimport ownerWindow from '../utils/ownerWindow'; // Is a vertical scrollbar displayed?\n\nfunction isOverflowing(container) {\n  var doc = ownerDocument(container);\n\n  if (doc.body === container) {\n    return ownerWindow(doc).innerWidth > doc.documentElement.clientWidth;\n  }\n\n  return container.scrollHeight > container.clientHeight;\n}\n\nexport function ariaHidden(node, show) {\n  if (show) {\n    node.setAttribute('aria-hidden', 'true');\n  } else {\n    node.removeAttribute('aria-hidden');\n  }\n}\n\nfunction getPaddingRight(node) {\n  return parseInt(window.getComputedStyle(node)['padding-right'], 10) || 0;\n}\n\nfunction ariaHiddenSiblings(container, mountNode, currentNode) {\n  var nodesToExclude = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  var show = arguments.length > 4 ? arguments[4] : undefined;\n  var blacklist = [mountNode, currentNode].concat(_toConsumableArray(nodesToExclude));\n  var blacklistTagNames = ['TEMPLATE', 'SCRIPT', 'STYLE'];\n  [].forEach.call(container.children, function (node) {\n    if (node.nodeType === 1 && blacklist.indexOf(node) === -1 && blacklistTagNames.indexOf(node.tagName) === -1) {\n      ariaHidden(node, show);\n    }\n  });\n}\n\nfunction findIndexOf(containerInfo, callback) {\n  var idx = -1;\n  containerInfo.some(function (item, index) {\n    if (callback(item)) {\n      idx = index;\n      return true;\n    }\n\n    return false;\n  });\n  return idx;\n}\n\nfunction handleContainer(containerInfo, props) {\n  var restoreStyle = [];\n  var restorePaddings = [];\n  var container = containerInfo.container;\n  var fixedNodes;\n\n  if (!props.disableScrollLock) {\n    if (isOverflowing(container)) {\n      // Compute the size before applying overflow hidden to avoid any scroll jumps.\n      var scrollbarSize = getScrollbarSize();\n      restoreStyle.push({\n        value: container.style.paddingRight,\n        key: 'padding-right',\n        el: container\n      }); // Use computed style, here to get the real padding to add our scrollbar width.\n\n      container.style['padding-right'] = \"\".concat(getPaddingRight(container) + scrollbarSize, \"px\"); // .mui-fixed is a global helper.\n\n      fixedNodes = ownerDocument(container).querySelectorAll('.mui-fixed');\n      [].forEach.call(fixedNodes, function (node) {\n        restorePaddings.push(node.style.paddingRight);\n        node.style.paddingRight = \"\".concat(getPaddingRight(node) + scrollbarSize, \"px\");\n      });\n    } // Improve Gatsby support\n    // https://css-tricks.com/snippets/css/force-vertical-scrollbar/\n\n\n    var parent = container.parentElement;\n    var scrollContainer = parent.nodeName === 'HTML' && window.getComputedStyle(parent)['overflow-y'] === 'scroll' ? parent : container; // Block the scroll even if no scrollbar is visible to account for mobile keyboard\n    // screensize shrink.\n\n    restoreStyle.push({\n      value: scrollContainer.style.overflow,\n      key: 'overflow',\n      el: scrollContainer\n    });\n    scrollContainer.style.overflow = 'hidden';\n  }\n\n  var restore = function restore() {\n    if (fixedNodes) {\n      [].forEach.call(fixedNodes, function (node, i) {\n        if (restorePaddings[i]) {\n          node.style.paddingRight = restorePaddings[i];\n        } else {\n          node.style.removeProperty('padding-right');\n        }\n      });\n    }\n\n    restoreStyle.forEach(function (_ref) {\n      var value = _ref.value,\n          el = _ref.el,\n          key = _ref.key;\n\n      if (value) {\n        el.style.setProperty(key, value);\n      } else {\n        el.style.removeProperty(key);\n      }\n    });\n  };\n\n  return restore;\n}\n\nfunction getHiddenSiblings(container) {\n  var hiddenSiblings = [];\n  [].forEach.call(container.children, function (node) {\n    if (node.getAttribute && node.getAttribute('aria-hidden') === 'true') {\n      hiddenSiblings.push(node);\n    }\n  });\n  return hiddenSiblings;\n}\n/**\n * @ignore - do not document.\n *\n * Proper state management for containers and the modals in those containers.\n * Simplified, but inspired by react-overlay's ModalManager class.\n * Used by the Modal to ensure proper styling of containers.\n */\n\n\nvar ModalManager =\n/*#__PURE__*/\nfunction () {\n  function ModalManager() {\n    _classCallCheck(this, ModalManager);\n\n    // this.modals[modalIndex] = modal\n    this.modals = []; // this.containers[containerIndex] = {\n    //   modals: [],\n    //   container,\n    //   restore: null,\n    // }\n\n    this.containers = [];\n  }\n\n  _createClass(ModalManager, [{\n    key: \"add\",\n    value: function add(modal, container) {\n      var modalIndex = this.modals.indexOf(modal);\n\n      if (modalIndex !== -1) {\n        return modalIndex;\n      }\n\n      modalIndex = this.modals.length;\n      this.modals.push(modal); // If the modal we are adding is already in the DOM.\n\n      if (modal.modalRef) {\n        ariaHidden(modal.modalRef, false);\n      }\n\n      var hiddenSiblingNodes = getHiddenSiblings(container);\n      ariaHiddenSiblings(container, modal.mountNode, modal.modalRef, hiddenSiblingNodes, true);\n      var containerIndex = findIndexOf(this.containers, function (item) {\n        return item.container === container;\n      });\n\n      if (containerIndex !== -1) {\n        this.containers[containerIndex].modals.push(modal);\n        return modalIndex;\n      }\n\n      this.containers.push({\n        modals: [modal],\n        container: container,\n        restore: null,\n        hiddenSiblingNodes: hiddenSiblingNodes\n      });\n      return modalIndex;\n    }\n  }, {\n    key: \"mount\",\n    value: function mount(modal, props) {\n      var containerIndex = findIndexOf(this.containers, function (item) {\n        return item.modals.indexOf(modal) !== -1;\n      });\n      var containerInfo = this.containers[containerIndex];\n\n      if (!containerInfo.restore) {\n        containerInfo.restore = handleContainer(containerInfo, props);\n      }\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(modal) {\n      var modalIndex = this.modals.indexOf(modal);\n\n      if (modalIndex === -1) {\n        return modalIndex;\n      }\n\n      var containerIndex = findIndexOf(this.containers, function (item) {\n        return item.modals.indexOf(modal) !== -1;\n      });\n      var containerInfo = this.containers[containerIndex];\n      containerInfo.modals.splice(containerInfo.modals.indexOf(modal), 1);\n      this.modals.splice(modalIndex, 1); // If that was the last modal in a container, clean up the container.\n\n      if (containerInfo.modals.length === 0) {\n        // The modal might be closed before it had the chance to be mounted in the DOM.\n        if (containerInfo.restore) {\n          containerInfo.restore();\n        }\n\n        if (modal.modalRef) {\n          // In case the modal wasn't in the DOM yet.\n          ariaHidden(modal.modalRef, true);\n        }\n\n        ariaHiddenSiblings(containerInfo.container, modal.mountNode, modal.modalRef, containerInfo.hiddenSiblingNodes, false);\n        this.containers.splice(containerIndex, 1);\n      } else {\n        // Otherwise make sure the next top modal is visible to a screen reader.\n        var nextTop = containerInfo.modals[containerInfo.modals.length - 1]; // as soon as a modal is adding its modalRef is undefined. it can't set\n        // aria-hidden because the dom element doesn't exist either\n        // when modal was unmounted before modalRef gets null\n\n        if (nextTop.modalRef) {\n          ariaHidden(nextTop.modalRef, false);\n        }\n      }\n\n      return modalIndex;\n    }\n  }, {\n    key: \"isTopModal\",\n    value: function isTopModal(modal) {\n      return this.modals.length > 0 && this.modals[this.modals.length - 1] === modal;\n    }\n  }]);\n\n  return ModalManager;\n}();\n\nexport { ModalManager as default };","/* eslint-disable consistent-return, jsx-a11y/no-noninteractive-tabindex */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport ownerDocument from '../utils/ownerDocument';\nimport useForkRef from '../utils/useForkRef';\n/**\n * @ignore - internal component.\n */\n\nfunction TrapFocus(props) {\n  var children = props.children,\n      _props$disableAutoFoc = props.disableAutoFocus,\n      disableAutoFocus = _props$disableAutoFoc === void 0 ? false : _props$disableAutoFoc,\n      _props$disableEnforce = props.disableEnforceFocus,\n      disableEnforceFocus = _props$disableEnforce === void 0 ? false : _props$disableEnforce,\n      _props$disableRestore = props.disableRestoreFocus,\n      disableRestoreFocus = _props$disableRestore === void 0 ? false : _props$disableRestore,\n      getDoc = props.getDoc,\n      isEnabled = props.isEnabled,\n      open = props.open;\n  var ignoreNextEnforceFocus = React.useRef();\n  var sentinelStart = React.useRef(null);\n  var sentinelEnd = React.useRef(null);\n  var nodeToRestore = React.useRef();\n  var rootRef = React.useRef(null); // can be removed once we drop support for non ref forwarding class components\n\n  var handleOwnRef = React.useCallback(function (instance) {\n    // #StrictMode ready\n    rootRef.current = ReactDOM.findDOMNode(instance);\n  }, []);\n  var handleRef = useForkRef(children.ref, handleOwnRef); // ⚠️ You may rely on React.useMemo as a performance optimization, not as a semantic guarantee.\n  // https://reactjs.org/docs/hooks-reference.html#usememo\n\n  React.useMemo(function () {\n    if (!open || typeof window === 'undefined') {\n      return;\n    }\n\n    nodeToRestore.current = getDoc().activeElement;\n  }, [open]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  React.useEffect(function () {\n    if (!open) {\n      return;\n    }\n\n    var doc = ownerDocument(rootRef.current); // We might render an empty child.\n\n    if (!disableAutoFocus && rootRef.current && !rootRef.current.contains(doc.activeElement)) {\n      if (!rootRef.current.hasAttribute('tabIndex')) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.error(['Material-UI: the modal content node does not accept focus.', 'For the benefit of assistive technologies, ' + 'the tabIndex of the node is being set to \"-1\".'].join('\\n'));\n        }\n\n        rootRef.current.setAttribute('tabIndex', -1);\n      }\n\n      rootRef.current.focus();\n    }\n\n    var contain = function contain() {\n      if (disableEnforceFocus || !isEnabled() || ignoreNextEnforceFocus.current) {\n        ignoreNextEnforceFocus.current = false;\n        return;\n      }\n\n      if (rootRef.current && !rootRef.current.contains(doc.activeElement)) {\n        rootRef.current.focus();\n      }\n    };\n\n    var loopFocus = function loopFocus(event) {\n      // 9 = Tab\n      if (disableEnforceFocus || !isEnabled() || event.keyCode !== 9) {\n        return;\n      } // Make sure the next tab starts from the right place.\n\n\n      if (doc.activeElement === rootRef.current) {\n        // We need to ignore the next contain as\n        // it will try to move the focus back to the rootRef element.\n        ignoreNextEnforceFocus.current = true;\n\n        if (event.shiftKey) {\n          sentinelEnd.current.focus();\n        } else {\n          sentinelStart.current.focus();\n        }\n      }\n    };\n\n    doc.addEventListener('focus', contain, true);\n    doc.addEventListener('keydown', loopFocus, true); // With Edge, Safari and Firefox, no focus related events are fired when the focused area stops being a focused area\n    // e.g. https://bugzilla.mozilla.org/show_bug.cgi?id=559561.\n    //\n    // The whatwg spec defines how the browser should behave but does not explicitly mention any events:\n    // https://html.spec.whatwg.org/multipage/interaction.html#focus-fixup-rule.\n\n    var interval = setInterval(function () {\n      contain();\n    }, 50);\n    return function () {\n      clearInterval(interval);\n      doc.removeEventListener('focus', contain, true);\n      doc.removeEventListener('keydown', loopFocus, true); // restoreLastFocus()\n\n      if (!disableRestoreFocus) {\n        // In IE 11 it is possible for document.activeElement to be null resulting\n        // in nodeToRestore.current being null.\n        // Not all elements in IE 11 have a focus method.\n        // Once IE 11 support is dropped the focus() call can be unconditional.\n        if (nodeToRestore.current && nodeToRestore.current.focus) {\n          nodeToRestore.current.focus();\n        }\n\n        nodeToRestore.current = null;\n      }\n    };\n  }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled, open]);\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    tabIndex: 0,\n    ref: sentinelStart,\n    \"data-test\": \"sentinelStart\"\n  }), React.cloneElement(children, {\n    ref: handleRef\n  }), React.createElement(\"div\", {\n    tabIndex: 0,\n    ref: sentinelEnd,\n    \"data-test\": \"sentinelEnd\"\n  }));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? TrapFocus.propTypes = {\n  /**\n   * A single child content element.\n   */\n  children: PropTypes.element.isRequired,\n\n  /**\n   * If `true`, the modal will not automatically shift focus to itself when it opens, and\n   * replace it to the last focused element when it closes.\n   * This also works correctly with any modal children that have the `disableAutoFocus` prop.\n   *\n   * Generally this should never be set to `true` as it makes the modal less\n   * accessible to assistive technologies, like screen readers.\n   */\n  disableAutoFocus: PropTypes.bool,\n\n  /**\n   * If `true`, the modal will not prevent focus from leaving the modal while open.\n   *\n   * Generally this should never be set to `true` as it makes the modal less\n   * accessible to assistive technologies, like screen readers.\n   */\n  disableEnforceFocus: PropTypes.bool,\n\n  /**\n   * If `true`, the modal will not restore focus to previously focused element once\n   * modal is hidden.\n   */\n  disableRestoreFocus: PropTypes.bool,\n\n  /**\n   * Return the document to consider.\n   * We use it to implement the restore focus between different browser documents.\n   */\n  getDoc: PropTypes.func.isRequired,\n\n  /**\n   * Do we still want to enforce the focus?\n   * This prop helps nesting TrapFocus elements.\n   */\n  isEnabled: PropTypes.func.isRequired,\n\n  /**\n   * If `true`, the modal is open.\n   */\n  open: PropTypes.bool.isRequired\n} : void 0;\n/*\n\nIn the future, we should be able to replace TrapFocus with:\nhttps://github.com/facebook/react/blob/master/packages/react-events/docs/FocusScope.md\n\n```jsx\nimport FocusScope from 'react-dom/FocusScope';\n\nfunction TrapFocus(props) {\n  const {\n    children\n    disableAutoFocus = false,\n    disableEnforceFocus = false,\n    disableRestoreFocus = false,\n    open,\n  } = props;\n\n  if (!open) {\n    return children;\n  }\n\n  return (\n    <FocusScope\n      autoFocus={!disableAutoFocus}\n      contain={!disableEnforceFocus}\n      restoreFocus={!disableRestoreFocus}\n    >\n      {children}\n    </FocusScope>\n  );\n}\n```\n\n*/\n\nexport default TrapFocus;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    zIndex: -1,\n    position: 'fixed',\n    right: 0,\n    bottom: 0,\n    top: 0,\n    left: 0,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    WebkitTapHighlightColor: 'transparent'\n  },\n\n  /* Styles applied to the root element if `invisible={true}`. */\n  invisible: {\n    backgroundColor: 'transparent'\n  }\n};\n/**\n * @ignore - internal component.\n */\n\nvar SimpleBackdrop = React.forwardRef(function SimpleBackdrop(props, ref) {\n  var _props$invisible = props.invisible,\n      invisible = _props$invisible === void 0 ? false : _props$invisible,\n      open = props.open,\n      other = _objectWithoutProperties(props, [\"invisible\", \"open\"]);\n\n  return open ? React.createElement(\"div\", _extends({\n    \"aria-hidden\": true,\n    ref: ref\n  }, other, {\n    style: _extends({}, styles.root, {}, invisible ? styles.invisible : {}, {}, other.style)\n  })) : null;\n});\nprocess.env.NODE_ENV !== \"production\" ? SimpleBackdrop.propTypes = {\n  /**\n   * If `true`, the backdrop is invisible.\n   * It can be used when rendering a popover or a custom select component.\n   */\n  invisible: PropTypes.bool,\n\n  /**\n   * If `true`, the backdrop is open.\n   */\n  open: PropTypes.bool.isRequired\n} : void 0;\nexport default SimpleBackdrop;","import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { getThemeProps, useTheme } from '@material-ui/styles';\nimport { elementAcceptingRef } from '@material-ui/utils';\nimport ownerDocument from '../utils/ownerDocument';\nimport Portal from '../Portal';\nimport createChainedFunction from '../utils/createChainedFunction';\nimport useForkRef from '../utils/useForkRef';\nimport useEventCallback from '../utils/useEventCallback';\nimport zIndex from '../styles/zIndex';\nimport ModalManager, { ariaHidden } from './ModalManager';\nimport TrapFocus from './TrapFocus';\nimport SimpleBackdrop from './SimpleBackdrop';\n\nfunction getContainer(container) {\n  container = typeof container === 'function' ? container() : container;\n  return ReactDOM.findDOMNode(container);\n}\n\nfunction getHasTransition(props) {\n  return props.children ? props.children.props.hasOwnProperty('in') : false;\n} // A modal manager used to track and manage the state of open Modals.\n// Modals don't open on the server so this won't conflict with concurrent requests.\n\n\nvar defaultManager = new ModalManager();\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      position: 'fixed',\n      zIndex: theme.zIndex.modal,\n      right: 0,\n      bottom: 0,\n      top: 0,\n      left: 0\n    },\n\n    /* Styles applied to the root element if the `Modal` has exited. */\n    hidden: {\n      visibility: 'hidden'\n    }\n  };\n};\n/**\n * Modal is a lower-level construct that is leveraged by the following components:\n *\n * - [Dialog](/api/dialog/)\n * - [Drawer](/api/drawer/)\n * - [Menu](/api/menu/)\n * - [Popover](/api/popover/)\n *\n * If you are creating a modal dialog, you probably want to use the [Dialog](/api/dialog/) component\n * rather than directly using Modal.\n *\n * This component shares many concepts with [react-overlays](https://react-bootstrap.github.io/react-overlays/#modals).\n */\n\nvar Modal = React.forwardRef(function Modal(inProps, ref) {\n  var theme = useTheme();\n  var props = getThemeProps({\n    name: 'MuiModal',\n    props: _extends({}, inProps),\n    theme: theme\n  });\n\n  var _props$BackdropCompon = props.BackdropComponent,\n      BackdropComponent = _props$BackdropCompon === void 0 ? SimpleBackdrop : _props$BackdropCompon,\n      BackdropProps = props.BackdropProps,\n      children = props.children,\n      _props$closeAfterTran = props.closeAfterTransition,\n      closeAfterTransition = _props$closeAfterTran === void 0 ? false : _props$closeAfterTran,\n      container = props.container,\n      _props$disableAutoFoc = props.disableAutoFocus,\n      disableAutoFocus = _props$disableAutoFoc === void 0 ? false : _props$disableAutoFoc,\n      _props$disableBackdro = props.disableBackdropClick,\n      disableBackdropClick = _props$disableBackdro === void 0 ? false : _props$disableBackdro,\n      _props$disableEnforce = props.disableEnforceFocus,\n      disableEnforceFocus = _props$disableEnforce === void 0 ? false : _props$disableEnforce,\n      _props$disableEscapeK = props.disableEscapeKeyDown,\n      disableEscapeKeyDown = _props$disableEscapeK === void 0 ? false : _props$disableEscapeK,\n      _props$disablePortal = props.disablePortal,\n      disablePortal = _props$disablePortal === void 0 ? false : _props$disablePortal,\n      _props$disableRestore = props.disableRestoreFocus,\n      disableRestoreFocus = _props$disableRestore === void 0 ? false : _props$disableRestore,\n      _props$disableScrollL = props.disableScrollLock,\n      disableScrollLock = _props$disableScrollL === void 0 ? false : _props$disableScrollL,\n      _props$hideBackdrop = props.hideBackdrop,\n      hideBackdrop = _props$hideBackdrop === void 0 ? false : _props$hideBackdrop,\n      _props$keepMounted = props.keepMounted,\n      keepMounted = _props$keepMounted === void 0 ? false : _props$keepMounted,\n      _props$manager = props.manager,\n      manager = _props$manager === void 0 ? defaultManager : _props$manager,\n      onBackdropClick = props.onBackdropClick,\n      onClose = props.onClose,\n      onEscapeKeyDown = props.onEscapeKeyDown,\n      onRendered = props.onRendered,\n      open = props.open,\n      other = _objectWithoutProperties(props, [\"BackdropComponent\", \"BackdropProps\", \"children\", \"closeAfterTransition\", \"container\", \"disableAutoFocus\", \"disableBackdropClick\", \"disableEnforceFocus\", \"disableEscapeKeyDown\", \"disablePortal\", \"disableRestoreFocus\", \"disableScrollLock\", \"hideBackdrop\", \"keepMounted\", \"manager\", \"onBackdropClick\", \"onClose\", \"onEscapeKeyDown\", \"onRendered\", \"open\"]);\n\n  var _React$useState = React.useState(true),\n      exited = _React$useState[0],\n      setExited = _React$useState[1];\n\n  var modal = React.useRef({});\n  var mountNodeRef = React.useRef(null);\n  var modalRef = React.useRef(null);\n  var handleRef = useForkRef(modalRef, ref);\n  var hasTransition = getHasTransition(props);\n\n  var getDoc = function getDoc() {\n    return ownerDocument(mountNodeRef.current);\n  };\n\n  var getModal = function getModal() {\n    modal.current.modalRef = modalRef.current;\n    modal.current.mountNode = mountNodeRef.current;\n    return modal.current;\n  };\n\n  var handleMounted = function handleMounted() {\n    manager.mount(getModal(), {\n      disableScrollLock: disableScrollLock\n    }); // Fix a bug on Chrome where the scroll isn't initially 0.\n\n    modalRef.current.scrollTop = 0;\n  };\n\n  var handleOpen = useEventCallback(function () {\n    var resolvedContainer = getContainer(container) || getDoc().body;\n    manager.add(getModal(), resolvedContainer); // The element was already mounted.\n\n    if (modalRef.current) {\n      handleMounted();\n    }\n  });\n  var isTopModal = React.useCallback(function () {\n    return manager.isTopModal(getModal());\n  }, [manager]);\n  var handlePortalRef = useEventCallback(function (node) {\n    mountNodeRef.current = node;\n\n    if (!node) {\n      return;\n    }\n\n    if (onRendered) {\n      onRendered();\n    }\n\n    if (open && isTopModal()) {\n      handleMounted();\n    } else {\n      ariaHidden(modalRef.current, true);\n    }\n  });\n  var handleClose = React.useCallback(function () {\n    manager.remove(getModal());\n  }, [manager]);\n  React.useEffect(function () {\n    return function () {\n      handleClose();\n    };\n  }, [handleClose]);\n  React.useEffect(function () {\n    if (open) {\n      handleOpen();\n    } else if (!hasTransition || !closeAfterTransition) {\n      handleClose();\n    }\n  }, [open, handleClose, hasTransition, closeAfterTransition, handleOpen]);\n\n  if (!keepMounted && !open && (!hasTransition || exited)) {\n    return null;\n  }\n\n  var handleEnter = function handleEnter() {\n    setExited(false);\n  };\n\n  var handleExited = function handleExited() {\n    setExited(true);\n\n    if (closeAfterTransition) {\n      handleClose();\n    }\n  };\n\n  var handleBackdropClick = function handleBackdropClick(event) {\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n\n    if (onBackdropClick) {\n      onBackdropClick(event);\n    }\n\n    if (!disableBackdropClick && onClose) {\n      onClose(event, 'backdropClick');\n    }\n  };\n\n  var handleKeyDown = function handleKeyDown(event) {\n    // The handler doesn't take event.defaultPrevented into account:\n    //\n    // event.preventDefault() is meant to stop default behaviours like\n    // clicking a checkbox to check it, hitting a button to submit a form,\n    // and hitting left arrow to move the cursor in a text input etc.\n    // Only special HTML elements have these default behaviors.\n    if (event.key !== 'Escape' || !isTopModal()) {\n      return;\n    } // Swallow the event, in case someone is listening for the escape key on the body.\n\n\n    event.stopPropagation();\n\n    if (onEscapeKeyDown) {\n      onEscapeKeyDown(event);\n    }\n\n    if (!disableEscapeKeyDown && onClose) {\n      onClose(event, 'escapeKeyDown');\n    }\n  };\n\n  var inlineStyle = styles(theme || {\n    zIndex: zIndex\n  });\n  var childProps = {};\n\n  if (children.props.tabIndex === undefined) {\n    childProps.tabIndex = children.props.tabIndex || '-1';\n  } // It's a Transition like component\n\n\n  if (hasTransition) {\n    childProps.onEnter = createChainedFunction(handleEnter, children.props.onEnter);\n    childProps.onExited = createChainedFunction(handleExited, children.props.onExited);\n  }\n\n  return React.createElement(Portal, {\n    ref: handlePortalRef,\n    container: container,\n    disablePortal: disablePortal\n  }, React.createElement(\"div\", _extends({\n    ref: handleRef,\n    onKeyDown: handleKeyDown,\n    role: \"presentation\"\n  }, other, {\n    style: _extends({}, inlineStyle.root, {}, !open && exited ? inlineStyle.hidden : {}, {}, other.style)\n  }), hideBackdrop ? null : React.createElement(BackdropComponent, _extends({\n    open: open,\n    onClick: handleBackdropClick\n  }, BackdropProps)), React.createElement(TrapFocus, {\n    disableEnforceFocus: disableEnforceFocus,\n    disableAutoFocus: disableAutoFocus,\n    disableRestoreFocus: disableRestoreFocus,\n    getDoc: getDoc,\n    isEnabled: isTopModal,\n    open: open\n  }, React.cloneElement(children, childProps))));\n});\nprocess.env.NODE_ENV !== \"production\" ? Modal.propTypes = {\n  /**\n   * A backdrop component. This prop enables custom backdrop rendering.\n   */\n  BackdropComponent: PropTypes.elementType,\n\n  /**\n   * Props applied to the [`Backdrop`](/api/backdrop/) element.\n   */\n  BackdropProps: PropTypes.object,\n\n  /**\n   * A single child content element.\n   */\n  children: elementAcceptingRef.isRequired,\n\n  /**\n   * When set to true the Modal waits until a nested Transition is completed before closing.\n   */\n  closeAfterTransition: PropTypes.bool,\n\n  /**\n   * A node, component instance, or function that returns either.\n   * The `container` will have the portal children appended to it.\n   */\n  container: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n\n  /**\n   * If `true`, the modal will not automatically shift focus to itself when it opens, and\n   * replace it to the last focused element when it closes.\n   * This also works correctly with any modal children that have the `disableAutoFocus` prop.\n   *\n   * Generally this should never be set to `true` as it makes the modal less\n   * accessible to assistive technologies, like screen readers.\n   */\n  disableAutoFocus: PropTypes.bool,\n\n  /**\n   * If `true`, clicking the backdrop will not fire any callback.\n   */\n  disableBackdropClick: PropTypes.bool,\n\n  /**\n   * If `true`, the modal will not prevent focus from leaving the modal while open.\n   *\n   * Generally this should never be set to `true` as it makes the modal less\n   * accessible to assistive technologies, like screen readers.\n   */\n  disableEnforceFocus: PropTypes.bool,\n\n  /**\n   * If `true`, hitting escape will not fire any callback.\n   */\n  disableEscapeKeyDown: PropTypes.bool,\n\n  /**\n   * Disable the portal behavior.\n   * The children stay within it's parent DOM hierarchy.\n   */\n  disablePortal: PropTypes.bool,\n\n  /**\n   * If `true`, the modal will not restore focus to previously focused element once\n   * modal is hidden.\n   */\n  disableRestoreFocus: PropTypes.bool,\n\n  /**\n   * Disable the scroll lock behavior.\n   */\n  disableScrollLock: PropTypes.bool,\n\n  /**\n   * If `true`, the backdrop is not rendered.\n   */\n  hideBackdrop: PropTypes.bool,\n\n  /**\n   * Always keep the children in the DOM.\n   * This prop can be useful in SEO situation or\n   * when you want to maximize the responsiveness of the Modal.\n   */\n  keepMounted: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  manager: PropTypes.object,\n\n  /**\n   * Callback fired when the backdrop is clicked.\n   */\n  onBackdropClick: PropTypes.func,\n\n  /**\n   * Callback fired when the component requests to be closed.\n   * The `reason` parameter can optionally be used to control the response to `onClose`.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} reason Can be: `\"escapeKeyDown\"`, `\"backdropClick\"`.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback fired when the escape key is pressed,\n   * `disableEscapeKeyDown` is false and the modal is in focus.\n   */\n  onEscapeKeyDown: PropTypes.func,\n\n  /**\n   * Callback fired once the children has been mounted into the `container`.\n   * It signals that the `open={true}` prop took effect.\n   *\n   * This prop will be deprecated and removed in v5, the ref can be used instead.\n   */\n  onRendered: PropTypes.func,\n\n  /**\n   * If `true`, the modal is open.\n   */\n  open: PropTypes.bool.isRequired\n} : void 0;\nexport default Modal;","import React from 'react'\nimport { Container, Grid, Paper, Typography, Divider, Button } from '@material-ui/core'\nimport { Formik, Form } from 'formik'\nimport TextField from 'components/Formik/TextField'\nimport { gql } from '@apollo/client'\nimport { useSigninMutation } from 'generated/graphql'\nimport { useSnackbar } from 'notistack'\nimport { useHistory } from 'react-router-dom'\n\ngql`\n  mutation Signin($input: UserCredential!) {\n    userAuthenticateAllServer(input: $input) {\n      accessToken\n      refreshToken\n      user {\n        userName\n      }\n    }\n  }\n`\n\nconst Signin: React.FC = () => {\n  return (\n    <Container maxWidth='sm' style={{ height: '100vh' }}>\n      <Grid container alignItems='center' justify='center' style={{ height: '100%' }}>\n        <Paper style={{ padding: 24 }}>\n          <img style={{ width: 30, display: 'block', margin: '0 auto 16px auto' }} alt='ENData Claims' src='https://company-resources-edt.s3-ap-southeast-2.amazonaws.com/endata/icon.ico' />\n          <Typography variant='h4' gutterBottom style={{ textAlign: 'center' }}>\n            Sign in\n          </Typography>\n          <Typography variant='body1' gutterBottom style={{ textAlign: 'center' }}>\n            Use your ENData Claim account\n          </Typography>\n          <Divider />\n          <SigninForm />\n        </Paper>\n      </Grid>\n    </Container>\n  )\n}\nexport default Signin\n\nconst SigninForm: React.FC = () => {\n  const [signin] = useSigninMutation()\n  const { enqueueSnackbar } = useSnackbar()\n  const { push } = useHistory()\n\n  return (\n    <Formik\n      initialValues={{ userLogin: '', password: '' }}\n      onSubmit={async values => {\n        const res = await signin({ variables: { input: values }})\n          .catch(error => error)\n\n        const data = res.data?.userAuthenticateAllServer && res.data.userAuthenticateAllServer[0]\n        if(data) {\n          enqueueSnackbar(`Welcome, ${data.user?.userName}`)\n          localStorage.setItem('ACCESS_TOKEN', data.accessToken)\n          localStorage.setItem('REFRESH_TOKEN', data.refreshToken)\n          push('/app')\n        }\n        else {\n          res?.graphQLErrors.forEach((error: any) => {\n\n            if (error.message) {\n              const message = error.message.replace('GraphQL.ExecutionError:', '')\n              enqueueSnackbar(message)\n            }\n          })\n        }\n      }}\n    >\n      {({ isSubmitting }) => (\n        <Form>\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <TextField label='Username' name='userLogin' required fullWidth variant='outlined' />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField label='Password' name='password' required type='password' fullWidth variant='outlined' />\n            </Grid>\n            <Grid item xs={12} style={{ display: 'flex', justifyContent: 'flex-end' }}>\n              <Button type='submit' disabled={isSubmitting} color='primary' variant='contained'>\n                Signin\n            </Button>\n            </Grid>\n          </Grid>\n        </Form>\n      )}\n    </Formik>\n  )\n}","import { useBaseQuery } from './utils/useBaseQuery';\nexport function useQuery(query, options) {\n    return useBaseQuery(query, options, false);\n}\n//# sourceMappingURL=useQuery.js.map","import { useBaseQuery } from './utils/useBaseQuery';\nexport function useLazyQuery(query, options) {\n    return useBaseQuery(query, options, true);\n}\n//# sourceMappingURL=useLazyQuery.js.map","import { __assign, __extends } from \"tslib\";\nimport { equal } from '@wry/equality';\nimport { DocumentType } from '../parser/parser';\nimport { ApolloError } from '../../errors/ApolloError';\nimport { OperationData } from './OperationData';\nvar MutationData = (function (_super) {\n    __extends(MutationData, _super);\n    function MutationData(_a) {\n        var options = _a.options, context = _a.context, result = _a.result, setResult = _a.setResult;\n        var _this = _super.call(this, options, context) || this;\n        _this.runMutation = function (mutationFunctionOptions) {\n            if (mutationFunctionOptions === void 0) { mutationFunctionOptions = {}; }\n            _this.onMutationStart();\n            var mutationId = _this.generateNewMutationId();\n            return _this.mutate(mutationFunctionOptions)\n                .then(function (response) {\n                _this.onMutationCompleted(response, mutationId);\n                return response;\n            })\n                .catch(function (error) {\n                _this.onMutationError(error, mutationId);\n                if (!_this.getOptions().onError)\n                    throw error;\n            });\n        };\n        _this.verifyDocumentType(options.mutation, DocumentType.Mutation);\n        _this.result = result;\n        _this.setResult = setResult;\n        _this.mostRecentMutationId = 0;\n        return _this;\n    }\n    MutationData.prototype.execute = function (result) {\n        this.isMounted = true;\n        this.verifyDocumentType(this.getOptions().mutation, DocumentType.Mutation);\n        return [\n            this.runMutation,\n            __assign(__assign({}, result), { client: this.refreshClient().client })\n        ];\n    };\n    MutationData.prototype.afterExecute = function () {\n        this.isMounted = true;\n        return this.unmount.bind(this);\n    };\n    MutationData.prototype.cleanup = function () {\n    };\n    MutationData.prototype.mutate = function (mutationFunctionOptions) {\n        var _a = this.getOptions(), mutation = _a.mutation, variables = _a.variables, optimisticResponse = _a.optimisticResponse, update = _a.update, _b = _a.context, mutationContext = _b === void 0 ? {} : _b, _c = _a.awaitRefetchQueries, awaitRefetchQueries = _c === void 0 ? false : _c, fetchPolicy = _a.fetchPolicy;\n        var mutateOptions = __assign({}, mutationFunctionOptions);\n        var mutateVariables = Object.assign({}, variables, mutateOptions.variables);\n        delete mutateOptions.variables;\n        return this.refreshClient().client.mutate(__assign({ mutation: mutation,\n            optimisticResponse: optimisticResponse, refetchQueries: mutateOptions.refetchQueries || this.getOptions().refetchQueries, awaitRefetchQueries: awaitRefetchQueries,\n            update: update, context: mutationContext, fetchPolicy: fetchPolicy, variables: mutateVariables }, mutateOptions));\n    };\n    MutationData.prototype.onMutationStart = function () {\n        if (!this.result.loading && !this.getOptions().ignoreResults) {\n            this.updateResult({\n                loading: true,\n                error: undefined,\n                data: undefined,\n                called: true\n            });\n        }\n    };\n    MutationData.prototype.onMutationCompleted = function (response, mutationId) {\n        var _a = this.getOptions(), onCompleted = _a.onCompleted, ignoreResults = _a.ignoreResults;\n        var data = response.data, errors = response.errors;\n        var error = errors && errors.length > 0\n            ? new ApolloError({ graphQLErrors: errors })\n            : undefined;\n        var callOncomplete = function () {\n            return onCompleted ? onCompleted(data) : null;\n        };\n        if (this.isMostRecentMutation(mutationId) && !ignoreResults) {\n            this.updateResult({\n                called: true,\n                loading: false,\n                data: data,\n                error: error\n            });\n        }\n        callOncomplete();\n    };\n    MutationData.prototype.onMutationError = function (error, mutationId) {\n        var onError = this.getOptions().onError;\n        if (this.isMostRecentMutation(mutationId)) {\n            this.updateResult({\n                loading: false,\n                error: error,\n                data: undefined,\n                called: true\n            });\n        }\n        if (onError) {\n            onError(error);\n        }\n    };\n    MutationData.prototype.generateNewMutationId = function () {\n        return ++this.mostRecentMutationId;\n    };\n    MutationData.prototype.isMostRecentMutation = function (mutationId) {\n        return this.mostRecentMutationId === mutationId;\n    };\n    MutationData.prototype.updateResult = function (result) {\n        if (this.isMounted &&\n            (!this.previousResult || !equal(this.previousResult, result))) {\n            this.setResult(result);\n            this.previousResult = result;\n        }\n    };\n    return MutationData;\n}(OperationData));\nexport { MutationData };\n//# sourceMappingURL=MutationData.js.map","import { __assign } from \"tslib\";\nimport { MutationData } from '../data/MutationData';\nimport { getApolloContext } from '../context/ApolloContext';\nimport { requireReactLazily } from '../react';\nexport function useMutation(mutation, options) {\n    var _a = requireReactLazily(), useContext = _a.useContext, useState = _a.useState, useRef = _a.useRef, useEffect = _a.useEffect;\n    var context = useContext(getApolloContext());\n    var _b = useState({ called: false, loading: false }), result = _b[0], setResult = _b[1];\n    var updatedOptions = options ? __assign(__assign({}, options), { mutation: mutation }) : { mutation: mutation };\n    var mutationDataRef = useRef();\n    function getMutationDataRef() {\n        if (!mutationDataRef.current) {\n            mutationDataRef.current = new MutationData({\n                options: updatedOptions,\n                context: context,\n                result: result,\n                setResult: setResult\n            });\n        }\n        return mutationDataRef.current;\n    }\n    var mutationData = getMutationDataRef();\n    mutationData.setOptions(updatedOptions);\n    mutationData.context = context;\n    useEffect(function () { return mutationData.afterExecute(); });\n    return mutationData.execute(result);\n}\n//# sourceMappingURL=useMutation.js.map","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","import React from 'react'\n\nimport { Field } from 'formik'\nimport { TextField } from 'formik-material-ui'\nimport { TextFieldProps, CircularProgress } from '@material-ui/core'\nimport { InputAdornment } from '@material-ui/core'\n\nexport type FormikTextFieldProps = TextFieldProps & {\n  name: string\n\n  startAdornment?: React.ReactElement\n  endAdornment?: React.ReactElement\n  readOnly?: boolean\n\n  validate?: (value: any) => string | null | undefined\n  loading?: boolean\n}\n\nconst Loader = () => {\n  return (\n    <InputAdornment position='end'>\n      <CircularProgress style={{ marginRight: 16, width: 30, height: 30 }} />\n    </InputAdornment>\n  )\n}\n\nconst FormikTextField: React.FC<FormikTextFieldProps> = ({ startAdornment, endAdornment, InputProps, required, validate, disabled, loading = false, ...props }) => {\n  const isDisabled = loading || disabled\n\n  return (\n    <Field\n      component={TextField}\n      {...props}\n      disabled={isDisabled}\n      required={isDisabled ? false : required}\n      InputProps={{\n        ...InputProps,\n        startAdornment: !startAdornment ? null : (\n          <InputAdornment position='start'>\n            {startAdornment}\n          </InputAdornment>\n        ),\n        endAdornment:\n          loading ? <Loader /> :\n          endAdornment ? (\n            <InputAdornment position='end'>\n              {endAdornment}\n            </InputAdornment>\n          )\n          : null\n      }}\n      validate={(value: any) => {\n        const emptyValue = value !== 0 && !value\n        if (!isDisabled && required && emptyValue) return 'Required!'\n        if (validate) return validate(value)\n      }}\n    />\n  )\n}\nexport default FormikTextField","import gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/client';\nimport * as ApolloReactHooks from '@apollo/client';\nexport type Maybe<T> = T | null;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string,\n  String: string,\n  Boolean: boolean,\n  Int: number,\n  Float: number,\n  Grid: any,\n  Json: any,\n  Date: any,\n  DateString: any,\n  DateTimeString: any,\n  Byte: any,\n  Decimal: any,\n  Short: any,\n  PersonName: any,\n  Phone: any,\n  Email: any,\n  DateTime: any,\n  DateTimeOffset: any,\n  Milliseconds: any,\n  Seconds: any,\n};\n\nexport enum AccessRole {\n  Undefined = 'UNDEFINED',\n  Administrator = 'Administrator',\n  Insurance = 'Insurance',\n  Estimator = 'Estimator',\n  Adjustor = 'Adjustor',\n  Builder = 'Builder',\n  ContentSupplier = 'ContentSupplier',\n  LossAdjuster = 'LossAdjuster',\n  InternalAb = 'InternalAB',\n  Restorer = 'Restorer',\n  Specialist = 'Specialist',\n  SystemAdmin = 'SystemAdmin'\n}\n\nexport type Action = {\n   __typename?: 'Action',\n  actionType?: Maybe<ActionType>,\n  id: Scalars['ID'],\n  isDisabled: Scalars['Boolean'],\n  isDisplay: Scalars['Boolean'],\n  name: Scalars['String'],\n};\n\nexport enum ActionType {\n  Undefined = 'UNDEFINED',\n  FeeAdd = 'FEE_ADD',\n  FeeEdit = 'FEE_EDIT',\n  FeeDelete = 'FEE_DELETE',\n  InvoiceUpload = 'INVOICE_UPLOAD',\n  InvoiceBulkUpload = 'INVOICE_BULK_UPLOAD',\n  InvoiceUpdateStatus = 'INVOICE_UPDATE_STATUS',\n  InvoiceDelete = 'INVOICE_DELETE',\n  InvoiceViewDocument = 'INVOICE_VIEW_DOCUMENT',\n  ReserveUpdate = 'RESERVE_UPDATE',\n  SpecialistRequestAdd = 'SPECIALIST_REQUEST_ADD',\n  SpecialistRequestEdit = 'SPECIALIST_REQUEST_EDIT',\n  SpecialistRequestDelete = 'SPECIALIST_REQUEST_DELETE',\n  AdjusterInitialCall = 'ADJUSTER_INITIAL_CALL',\n  AdjusterAppointment = 'ADJUSTER_APPOINTMENT',\n  ClaimAdd = 'CLAIM_ADD',\n  ClaimAwaitingInfo = 'CLAIM_AWAITING_INFO',\n  ClaimStatusVolume = 'CLAIM_STATUS_VOLUME',\n  ClaimFinalise = 'CLAIM_FINALISE',\n  ClaimCashSettle = 'CLAIM_CASH_SETTLE',\n  ClaimjobAllocateSupplier = 'CLAIMJOB_ALLOCATE_SUPPLIER',\n  ClaimjobReallocateSupplier = 'CLAIMJOB_REALLOCATE_SUPPLIER',\n  FilterInternalAssessor = 'FILTER_INTERNAL_ASSESSOR',\n  FilterRecommendationStatus = 'FILTER_RECOMMENDATION_STATUS'\n}\n\nexport type AddPortfolioInput = {\n  scopingSupplierId?: Maybe<Scalars['ID']>,\n  portfolioType: PortfolioType,\n};\n\nexport type Address = {\n   __typename?: 'Address',\n  line1?: Maybe<Scalars['String']>,\n  line2?: Maybe<Scalars['String']>,\n  postcode?: Maybe<Scalars['String']>,\n  state?: Maybe<State>,\n  suburb?: Maybe<Scalars['String']>,\n};\n\nexport type AddressInput = {\n  line1?: Maybe<Scalars['String']>,\n  line2?: Maybe<Scalars['String']>,\n  suburb?: Maybe<Scalars['String']>,\n  postcode?: Maybe<Scalars['String']>,\n  state?: Maybe<State>,\n};\n\nexport type AggregateFeeCategory = {\n   __typename?: 'AggregateFeeCategory',\n  buildingReserve?: Maybe<Scalars['Decimal']>,\n  contentsReserve?: Maybe<Scalars['Decimal']>,\n  outstandingPayments?: Maybe<Scalars['Decimal']>,\n  toBeInvoiced?: Maybe<Scalars['Decimal']>,\n  totalAmountInvoiced?: Maybe<Scalars['Decimal']>,\n  totalClaimReserve?: Maybe<Scalars['Decimal']>,\n};\n\nexport type AggregateFeeItem = {\n   __typename?: 'AggregateFeeItem',\n  totalAuthorisedAmount?: Maybe<Scalars['Decimal']>,\n};\n\nexport type AppCustomization = {\n   __typename?: 'AppCustomization',\n  alias?: Maybe<Scalars['String']>,\n  favicon?: Maybe<Scalars['String']>,\n  logo?: Maybe<Scalars['String']>,\n  companyLogo?: Maybe<Scalars['String']>,\n};\n\nexport type AppointmentInput = {\n  appointmentDate: Scalars['DateString'],\n  note?: Maybe<Scalars['String']>,\n};\n\nexport type AuthenticatedUser = {\n   __typename?: 'AuthenticatedUser',\n  _appRoutes?: Maybe<Array<Scalars['String']>>,\n  _customisation?: Maybe<AppCustomization>,\n  _rootRoute: Scalars['String'],\n  claimFilters?: Maybe<Array<Maybe<FilterInput>>>,\n  communicationFilters?: Maybe<Array<Maybe<FilterInput>>>,\n  dashboardFilters?: Maybe<Array<Maybe<FilterInput>>>,\n  id: Scalars['ID'],\n  name: Scalars['String'],\n  userRole: AccessRole,\n  userType: UserType,\n  waterfallFilters?: Maybe<Array<ClaimStatusVolumeGroup>>,\n};\n\n\nexport type AuthenticatedUserWaterfallFiltersArgs = {\n  where: ClaimStatusVolumeWhere\n};\n\nexport type AwaitingInfoClaimInputType = {\n  note?: Maybe<Scalars['String']>,\n  awaitingInfoReasonId: Scalars['Byte'],\n};\n\n\nexport type Card = {\n   __typename?: 'Card',\n  id: Scalars['ID'],\n  title?: Maybe<Scalars['String']>,\n  order?: Maybe<Scalars['Int']>,\n  grid?: Maybe<Scalars['Grid']>,\n  fields?: Maybe<Array<Field>>,\n};\n\nexport type CaseReportFilter = {\n  createDateFrom?: Maybe<Scalars['Date']>,\n  createDateTo?: Maybe<Scalars['Date']>,\n  insurers?: Maybe<Array<Scalars['ID']>>,\n  managers?: Maybe<Array<Scalars['ID']>>,\n  managerTeams?: Maybe<Array<Maybe<Scalars['String']>>>,\n  catCodes?: Maybe<Array<Scalars['ID']>>,\n  eventTypes?: Maybe<Array<Scalars['ID']>>,\n  internalAssessors?: Maybe<Array<Scalars['ID']>>,\n  buildingSuppliers?: Maybe<Array<Scalars['ID']>>,\n  contentsSuppliers?: Maybe<Array<Scalars['ID']>>,\n  restorationSuppliers?: Maybe<Array<Scalars['ID']>>,\n  buildingStatus?: Maybe<Array<Scalars['ID']>>,\n  contentsStatus?: Maybe<Array<Scalars['ID']>>,\n  restorationStatus?: Maybe<Array<Scalars['ID']>>,\n  suppliers?: Maybe<Array<Scalars['ID']>>,\n  status?: Maybe<Array<Scalars['ID']>>,\n  regions?: Maybe<Array<Maybe<Scalars['String']>>>,\n  dateRange?: Maybe<DateRangeOption>,\n  portfolios?: Maybe<Array<Maybe<PortfolioType>>>,\n  states?: Maybe<Array<Maybe<State>>>,\n  recommendationStatus?: Maybe<Array<JobRecommendationStatus>>,\n};\n\nexport type CaseReportIndex = {\n  internalFilterName: Scalars['String'],\n  filter?: Maybe<CaseReportFilter>,\n};\n\nexport type CatCode = {\n   __typename?: 'CATCode',\n  cATCodeId: Scalars['Int'],\n  cATCodeName: Scalars['String'],\n  cATNumber: Scalars['String'],\n};\n\nexport type ClaimAdditionalData = {\n   __typename?: 'ClaimAdditionalData',\n  additionalDataId: Scalars['Int'],\n  content: Scalars['String'],\n  id: Scalars['ID'],\n  title: Scalars['String'],\n};\n\nexport type ClaimAdditionalDataCategory = {\n   __typename?: 'ClaimAdditionalDataCategory',\n  categoryName: Scalars['String'],\n  id: Scalars['ID'],\n  items?: Maybe<Array<Maybe<ClaimAdditionalData>>>,\n};\n\nexport type ClaimCashSettleInput = {\n  claimId: Scalars['ID'],\n  settlementValue: Scalars['Decimal'],\n  paymentTypeId: Scalars['Int'],\n  paymentMethodId: Scalars['Int'],\n  bankName?: Maybe<Scalars['String']>,\n  bsb?: Maybe<Scalars['String']>,\n  account?: Maybe<Scalars['String']>,\n  comments?: Maybe<Scalars['String']>,\n  claimPortfolioType: PortfolioType,\n  settlementDate: Scalars['DateTimeString'],\n};\n\nexport enum ClaimCategory {\n  NonUrgent = 'NonUrgent',\n  Urgent = 'Urgent',\n  SemiUrgent = 'SemiUrgent'\n}\n\nexport type ClaimCommunication = {\n   __typename?: 'ClaimCommunication',\n  acknowledged: Scalars['Boolean'],\n  acknowledgeDate?: Maybe<Scalars['DateString']>,\n  acknowledgeUserId?: Maybe<Scalars['Int']>,\n  acknowledgeUserName?: Maybe<Scalars['String']>,\n  claimId: Scalars['Int'],\n  claimRef: Scalars['String'],\n  communicationId: Scalars['Int'],\n  id: Scalars['ID'],\n  message?: Maybe<Scalars['String']>,\n  portfolioType?: Maybe<PortfolioType>,\n  private: Scalars['Boolean'],\n  recieverCompanyId?: Maybe<Scalars['Int']>,\n  recieverCompanyName?: Maybe<Scalars['String']>,\n  sendDate: Scalars['DateTimeString'],\n  senderCompanyId?: Maybe<Scalars['Int']>,\n  senderCompanyName?: Maybe<Scalars['String']>,\n  senderId?: Maybe<Scalars['Int']>,\n  senderName?: Maybe<Scalars['String']>,\n  senderRole?: Maybe<AccessRole>,\n};\n\nexport enum ClaimCommunicationBox {\n  UnDefined = 'UnDefined',\n  OutBox = 'OutBox',\n  Inbox = 'Inbox',\n  InboxAndSharedBox = 'InboxAndSharedBox'\n}\n\nexport type ClaimCommunicationConnection = {\n   __typename?: 'ClaimCommunicationConnection',\n  edges?: Maybe<Array<Maybe<ClaimCommunicationEdge>>>,\n  items?: Maybe<Array<Maybe<ClaimCommunication>>>,\n  pageInfo: PageInfo,\n  totalCount?: Maybe<Scalars['Int']>,\n};\n\nexport type ClaimCommunicationCreate = {\n  claimId: Scalars['ID'],\n  message: Scalars['String'],\n  receiverCompanyId: Scalars['Int'],\n  private: Scalars['Boolean'],\n  receiverRole: AccessRole,\n};\n\nexport type ClaimCommunicationEdge = {\n   __typename?: 'ClaimCommunicationEdge',\n  cursor: Scalars['String'],\n  node?: Maybe<ClaimCommunication>,\n};\n\nexport type ClaimCommunicationPayload = {\n   __typename?: 'ClaimCommunicationPayload',\n  fieldErrors?: Maybe<Array<Maybe<EntityFieldError>>>,\n  messages: Array<Scalars['String']>,\n  result?: Maybe<ClaimCommunication>,\n  success: Scalars['Boolean'],\n};\n\nexport type ClaimDocument = {\n   __typename?: 'ClaimDocument',\n  amountInvoice?: Maybe<Scalars['Float']>,\n  company?: Maybe<Company>,\n  description: Scalars['String'],\n  documentFileName: Scalars['String'],\n  documentId: Scalars['Int'],\n  id: Scalars['ID'],\n  invoiceNumber?: Maybe<Scalars['String']>,\n  isInvoice: Scalars['Boolean'],\n  portfolioType?: Maybe<PortfolioType>,\n  private: Scalars['Boolean'],\n  uploadDate?: Maybe<Scalars['DateTimeString']>,\n  url: Scalars['String'],\n};\n\nexport type ClaimDocumentConnection = {\n   __typename?: 'ClaimDocumentConnection',\n  edges?: Maybe<Array<Maybe<ClaimDocumentEdge>>>,\n  items?: Maybe<Array<Maybe<ClaimDocument>>>,\n  pageInfo: PageInfo,\n  totalCount?: Maybe<Scalars['Int']>,\n};\n\nexport type ClaimDocumentCreate = {\n  claimId: Scalars['ID'],\n  description: Scalars['String'],\n  documentFileName: Scalars['String'],\n  fileBase64: Scalars['String'],\n  fileId?: Maybe<Scalars['String']>,\n  isInvoice: Scalars['Boolean'],\n  invoiceNumber?: Maybe<Scalars['String']>,\n  amountInvoice?: Maybe<Scalars['Float']>,\n  private: Scalars['Boolean'],\n  visibleByInsurer?: Maybe<Scalars['Boolean']>,\n  portfolioType?: Maybe<PortfolioType>,\n};\n\nexport type ClaimDocumentEdge = {\n   __typename?: 'ClaimDocumentEdge',\n  cursor: Scalars['String'],\n  node?: Maybe<ClaimDocument>,\n};\n\nexport type ClaimDocumentPayload = {\n   __typename?: 'ClaimDocumentPayload',\n  fieldErrors?: Maybe<Array<Maybe<EntityFieldError>>>,\n  messages: Array<Scalars['String']>,\n  result?: Maybe<ClaimDocument>,\n  success: Scalars['Boolean'],\n};\n\nexport type ClaimFinaliseReason = {\n   __typename?: 'ClaimFinaliseReason',\n  finaliseResonId: Scalars['Int'],\n  id: Scalars['ID'],\n  name: Scalars['String'],\n};\n\nexport type ClaimItemFilter = {\n  id?: Maybe<Scalars['Int']>,\n  claimId: Scalars['ID'],\n  createDateFrom?: Maybe<Scalars['Date']>,\n  createDateTo?: Maybe<Scalars['Date']>,\n  keyWords?: Maybe<Scalars['String']>,\n  portfolios?: Maybe<Array<Maybe<PortfolioType>>>,\n};\n\nexport type ClaimJob = {\n   __typename?: 'ClaimJob',\n  _allocatedBuilder?: Maybe<Scalars['String']>,\n  _allocatedRestorer?: Maybe<Scalars['String']>,\n  _claimBuilder?: Maybe<Scalars['String']>,\n  _claimRestorer?: Maybe<Scalars['String']>,\n  _claimStatus?: Maybe<Scalars['String']>,\n  _claimValue?: Maybe<Scalars['String']>,\n  _incidentAddress?: Maybe<Scalars['String']>,\n  _insuredPhone?: Maybe<Scalars['String']>,\n  _portfolios?: Maybe<Array<PortfolioType>>,\n  _request?: Maybe<Scalars['String']>,\n  _requestDate?: Maybe<Scalars['String']>,\n  actions: Array<Maybe<Action>>,\n  additionalData?: Maybe<Array<Maybe<ClaimAdditionalDataCategory>>>,\n  additionalRefNumber?: Maybe<Scalars['String']>,\n  associatedRiskJobId?: Maybe<Scalars['Int']>,\n  brc?: Maybe<ClaimManager>,\n  building?: Maybe<ClaimPortfolio>,\n  caseManager?: Maybe<ClaimManager>,\n  claimDescription?: Maybe<Scalars['String']>,\n  claimId: Scalars['Int'],\n  contents?: Maybe<ClaimPortfolio>,\n  contentsRefNum?: Maybe<Scalars['String']>,\n  customLoginEmail?: Maybe<Scalars['String']>,\n  externalLossAdjuster?: Maybe<Company>,\n  feeTab: FeeTab,\n  hATypeVisit?: Maybe<HaTypeVisit>,\n  hasBuilding: Scalars['Boolean'],\n  hasContents: Scalars['Boolean'],\n  hasRestoration: Scalars['Boolean'],\n  homeAssessor?: Maybe<InternalAssesor>,\n  id: Scalars['ID'],\n  incidentDetail?: Maybe<IncidentDetail>,\n  insured?: Maybe<ContactDetail>,\n  insurer?: Maybe<Company>,\n  lodgeDate?: Maybe<Scalars['DateString']>,\n  lossAdjustProgress?: Maybe<ClaimProgress>,\n  lotNumber: Scalars['String'],\n  managedByENData: Scalars['Boolean'],\n  mapRef: Scalars['String'],\n  multipleRisks?: Maybe<Scalars['Boolean']>,\n  planNumber: Scalars['String'],\n  policyCover?: Maybe<PolicyCover>,\n  policyType?: Maybe<PolicyType>,\n  refNumber: Scalars['String'],\n  reportData?: Maybe<Report>,\n  reportForm?: Maybe<Form>,\n  reportFormId?: Maybe<Scalars['ID']>,\n  requireCustomLogin?: Maybe<Scalars['Boolean']>,\n  restoration?: Maybe<ClaimPortfolio>,\n  riskname?: Maybe<Scalars['String']>,\n  specialistRequests?: Maybe<Array<Maybe<SpecialistRequest>>>,\n  tenantDetails?: Maybe<Contact>,\n};\n\nexport type ClaimJobConnection = {\n   __typename?: 'ClaimJobConnection',\n  edges?: Maybe<Array<Maybe<ClaimJobEdge>>>,\n  items?: Maybe<Array<Maybe<ClaimJob>>>,\n  pageInfo: PageInfo,\n  totalCount?: Maybe<Scalars['Int']>,\n};\n\nexport type ClaimJobCreate = {\n  refNumber: Scalars['String'],\n  contentsRefNum?: Maybe<Scalars['String']>,\n  claimDescription: Scalars['String'],\n  insurerId: Scalars['ID'],\n  mapRef?: Maybe<Scalars['String']>,\n  lotNumber?: Maybe<Scalars['String']>,\n  planNumber?: Maybe<Scalars['String']>,\n  casemanagerId: Scalars['ID'],\n  brcId?: Maybe<Scalars['ID']>,\n  homeAssessorId?: Maybe<Scalars['ID']>,\n  visitTypeID?: Maybe<Scalars['ID']>,\n  externalLossAdjusterId?: Maybe<Scalars['ID']>,\n  multipleRisks?: Maybe<Scalars['Boolean']>,\n  riskname?: Maybe<Scalars['String']>,\n  additionalRefNumber?: Maybe<Scalars['String']>,\n  associatedRiskJobId?: Maybe<Scalars['Int']>,\n  requireCustomLogin?: Maybe<Scalars['Boolean']>,\n  customLoginEmail?: Maybe<Scalars['String']>,\n  policyCoverId?: Maybe<Scalars['ID']>,\n  policyTypeId?: Maybe<Scalars['ID']>,\n  incidentDetail: IncidentDetailNewType,\n  insured: ContactDetailInput,\n  tenantDetails?: Maybe<ContactInput>,\n  portfolios?: Maybe<Array<Maybe<ClaimPortfolioCreate>>>,\n};\n\nexport type ClaimJobEdge = {\n   __typename?: 'ClaimJobEdge',\n  cursor: Scalars['String'],\n  node?: Maybe<ClaimJob>,\n};\n\nexport type ClaimJobFilter = {\n  id?: Maybe<Scalars['ID']>,\n  parentId?: Maybe<Scalars['ID']>,\n  subject?: Maybe<Scalars['String']>,\n  createDateFrom?: Maybe<Scalars['Date']>,\n  createDateTo?: Maybe<Scalars['Date']>,\n  incidentDate?: Maybe<Scalars['DateString']>,\n  incidentDateFrom?: Maybe<Scalars['DateString']>,\n  incidentDateTo?: Maybe<Scalars['DateString']>,\n  keyWords?: Maybe<Scalars['String']>,\n  refNumber?: Maybe<Scalars['String']>,\n  postcode?: Maybe<Scalars['String']>,\n  managerTeams?: Maybe<Array<Maybe<Scalars['String']>>>,\n  managers?: Maybe<Array<Scalars['ID']>>,\n  insurers?: Maybe<Array<Scalars['ID']>>,\n  adjusters?: Maybe<Array<Scalars['ID']>>,\n  catCodes?: Maybe<Array<Scalars['ID']>>,\n  eventTypes?: Maybe<Array<Scalars['ID']>>,\n  buildingSuppliers?: Maybe<Array<Scalars['ID']>>,\n  contentsSuppliers?: Maybe<Array<Scalars['ID']>>,\n  restorationSuppliers?: Maybe<Array<Scalars['ID']>>,\n  buildingStatus?: Maybe<Array<Scalars['ID']>>,\n  contentsStatus?: Maybe<Array<Scalars['ID']>>,\n  restorationStatus?: Maybe<Array<Scalars['ID']>>,\n  suppliers?: Maybe<Array<Scalars['ID']>>,\n  status?: Maybe<Array<Scalars['ID']>>,\n  internalAssessors?: Maybe<Array<Scalars['ID']>>,\n  jobStatuses?: Maybe<Array<Scalars['ID']>>,\n  claimStatusStageIds?: Maybe<Array<Scalars['ID']>>,\n  portfolios?: Maybe<Array<Maybe<PortfolioType>>>,\n  states?: Maybe<Array<Maybe<State>>>,\n  variationStatuses?: Maybe<Array<Maybe<JobVariationStatus>>>,\n  requestStatuses?: Maybe<Array<Maybe<QuoteRequestStatus>>>,\n  recommendationStatus?: Maybe<Array<JobRecommendationStatus>>,\n  or?: Maybe<ClaimJobFilter>,\n  and?: Maybe<ClaimJobFilter>,\n  not?: Maybe<ClaimJobFilter>,\n};\n\nexport type ClaimJobGeneral = {\n   __typename?: 'ClaimJobGeneral',\n  caseManagerName: Scalars['String'],\n  caseManagerTeam: Scalars['String'],\n  claimId: Scalars['Int'],\n  daysAtStatus?: Maybe<Scalars['Float']>,\n  id: Scalars['ID'],\n  idenrifier: Scalars['String'],\n  insuredName: Scalars['String'],\n  insurerName: Scalars['String'],\n  logDate: Scalars['DateString'],\n  portfolioType: PortfolioType,\n  refNumber: Scalars['String'],\n  riskRegion?: Maybe<Scalars['String']>,\n  riskState?: Maybe<State>,\n  status?: Maybe<ClaimStatus>,\n  supplierName?: Maybe<Scalars['String']>,\n};\n\nexport type ClaimJobGeneralReportConnection = {\n   __typename?: 'ClaimJobGeneralReportConnection',\n  edges?: Maybe<Array<Maybe<ClaimJobGeneralReportEdge>>>,\n  items?: Maybe<Array<Maybe<ClaimJobGeneral>>>,\n  pageInfo: PageInfo,\n  totalCount?: Maybe<Scalars['Int']>,\n};\n\nexport type ClaimJobGeneralReportEdge = {\n   __typename?: 'ClaimJobGeneralReportEdge',\n  cursor: Scalars['String'],\n  node?: Maybe<ClaimJobGeneral>,\n};\n\nexport type ClaimJobInput = {\n  refNumber?: Maybe<Scalars['String']>,\n  contentsRefNum?: Maybe<Scalars['String']>,\n  additionalRefNumber?: Maybe<Scalars['String']>,\n  claimDescription?: Maybe<Scalars['String']>,\n  policyCoverId?: Maybe<Scalars['ID']>,\n  policyTypeId?: Maybe<Scalars['ID']>,\n  mapRef?: Maybe<Scalars['String']>,\n  lotNumber?: Maybe<Scalars['String']>,\n  planNumber?: Maybe<Scalars['String']>,\n  eventTypeId?: Maybe<Scalars['ID']>,\n  catCodeId?: Maybe<Scalars['ID']>,\n  incidentDate?: Maybe<Scalars['DateString']>,\n  habitableProperty?: Maybe<Scalars['Boolean']>,\n  asbestos?: Maybe<Scalars['Boolean']>,\n  hold?: Maybe<Scalars['Boolean']>,\n  makeSafeRequired?: Maybe<Scalars['Boolean']>,\n  casemanagerId?: Maybe<Scalars['ID']>,\n  brcId?: Maybe<Scalars['ID']>,\n  homeAssessorId?: Maybe<Scalars['ID']>,\n  visitTypeId?: Maybe<Scalars['ID']>,\n  externalLossAdjusterId?: Maybe<Scalars['ID']>,\n  managedByENData?: Maybe<Scalars['Boolean']>,\n  riskname?: Maybe<Scalars['String']>,\n  multipleRisks?: Maybe<Scalars['Boolean']>,\n  associatedRiskJobId?: Maybe<Scalars['Int']>,\n  requireCustomLogin?: Maybe<Scalars['Boolean']>,\n  customLoginEmail?: Maybe<Scalars['String']>,\n  insuredSalutation?: Maybe<Scalars['PersonName']>,\n  insuredName?: Maybe<Scalars['PersonName']>,\n  insuredPhone1?: Maybe<Scalars['Phone']>,\n  insuredPhone2?: Maybe<Scalars['Phone']>,\n  insuredPhone3?: Maybe<Scalars['Phone']>,\n  insuredFax?: Maybe<Scalars['Phone']>,\n  insuredEmail?: Maybe<Scalars['Email']>,\n  postalAddressLine1?: Maybe<Scalars['String']>,\n  postalAddressLine2?: Maybe<Scalars['String']>,\n  postalAddressSuburb?: Maybe<Scalars['String']>,\n  postalAddressState?: Maybe<State>,\n  postalAddressPostcode?: Maybe<Scalars['String']>,\n  riskAddressLine1?: Maybe<Scalars['String']>,\n  riskAddressLine2?: Maybe<Scalars['String']>,\n  riskAddressSuburb?: Maybe<Scalars['String']>,\n  riskAddressState?: Maybe<State>,\n  riskAddressPostcode?: Maybe<Scalars['String']>,\n  tenantName?: Maybe<Scalars['PersonName']>,\n  tenantPhone1?: Maybe<Scalars['Phone']>,\n  tenantPhone2?: Maybe<Scalars['Phone']>,\n  tenantPhone3?: Maybe<Scalars['Phone']>,\n  category?: Maybe<ClaimCategory>,\n  portfolios?: Maybe<Array<Maybe<ClaimPortfolioInput>>>,\n};\n\nexport type ClaimJobPayload = {\n   __typename?: 'ClaimJobPayload',\n  fieldErrors?: Maybe<Array<Maybe<EntityFieldError>>>,\n  messages: Array<Scalars['String']>,\n  result?: Maybe<ClaimJob>,\n  success: Scalars['Boolean'],\n};\n\nexport type ClaimJobStatusInfo = {\n   __typename?: 'ClaimJobStatusInfo',\n  datePopup: Scalars['Boolean'],\n  description: Scalars['String'],\n  nextStep: Scalars['String'],\n  noteMessage: Scalars['String'],\n  portfolioType?: Maybe<PortfolioType>,\n  statusId: Scalars['Int'],\n  statusName: Scalars['String'],\n};\n\nexport type ClaimLossAdjusterDocument = {\n   __typename?: 'ClaimLossAdjusterDocument',\n  company?: Maybe<Company>,\n  description: Scalars['String'],\n  documentFileName: Scalars['String'],\n  documentId: Scalars['Int'],\n  id: Scalars['ID'],\n  private: Scalars['Boolean'],\n  reportType?: Maybe<LossAdjusterReportType>,\n  uploadDate?: Maybe<Scalars['DateTimeString']>,\n  url: Scalars['String'],\n};\n\nexport type ClaimLossAdjusterDocumentConnection = {\n   __typename?: 'ClaimLossAdjusterDocumentConnection',\n  edges?: Maybe<Array<Maybe<ClaimLossAdjusterDocumentEdge>>>,\n  items?: Maybe<Array<Maybe<ClaimLossAdjusterDocument>>>,\n  pageInfo: PageInfo,\n  totalCount?: Maybe<Scalars['Int']>,\n};\n\nexport type ClaimLossAdjusterDocumentCreate = {\n  claimId: Scalars['ID'],\n  description: Scalars['String'],\n  documentFileName: Scalars['String'],\n  fileBase64: Scalars['String'],\n  fileId?: Maybe<Scalars['String']>,\n  private: Scalars['Boolean'],\n  reportTypeId?: Maybe<Scalars['Byte']>,\n};\n\nexport type ClaimLossAdjusterDocumentEdge = {\n   __typename?: 'ClaimLossAdjusterDocumentEdge',\n  cursor: Scalars['String'],\n  node?: Maybe<ClaimLossAdjusterDocument>,\n};\n\nexport type ClaimLossAdjusterDocumentPayload = {\n   __typename?: 'ClaimLossAdjusterDocumentPayload',\n  fieldErrors?: Maybe<Array<Maybe<EntityFieldError>>>,\n  messages: Array<Scalars['String']>,\n  result?: Maybe<ClaimLossAdjusterDocument>,\n  success: Scalars['Boolean'],\n};\n\nexport type ClaimManager = {\n   __typename?: 'ClaimManager',\n  id: Scalars['ID'],\n  managerId: Scalars['Int'],\n  managerName: Scalars['String'],\n  managerTeam?: Maybe<Scalars['String']>,\n};\n\nexport type ClaimNote = {\n   __typename?: 'ClaimNote',\n  _privacy?: Maybe<Scalars['String']>,\n  id: Scalars['ID'],\n  jobNoteId: Scalars['Int'],\n  logDate?: Maybe<Scalars['DateTimeString']>,\n  message: Scalars['String'],\n  portfolioType?: Maybe<PortfolioType>,\n  private?: Maybe<Scalars['Byte']>,\n  user?: Maybe<User>,\n  userId: Scalars['Int'],\n};\n\nexport type ClaimNoteConnection = {\n   __typename?: 'ClaimNoteConnection',\n  edges?: Maybe<Array<Maybe<ClaimNoteEdge>>>,\n  items?: Maybe<Array<Maybe<ClaimNote>>>,\n  pageInfo: PageInfo,\n  totalCount?: Maybe<Scalars['Int']>,\n};\n\nexport type ClaimNoteCreate = {\n  claimId: Scalars['ID'],\n  message: Scalars['String'],\n  visibleByInsurer?: Maybe<Scalars['Boolean']>,\n  private?: Maybe<Scalars['Byte']>,\n  portfolioType?: Maybe<PortfolioType>,\n};\n\nexport type ClaimNoteEdge = {\n   __typename?: 'ClaimNoteEdge',\n  cursor: Scalars['String'],\n  node?: Maybe<ClaimNote>,\n};\n\nexport type ClaimNotePayload = {\n   __typename?: 'ClaimNotePayload',\n  fieldErrors?: Maybe<Array<Maybe<EntityFieldError>>>,\n  messages: Array<Scalars['String']>,\n  result?: Maybe<ClaimNote>,\n  success: Scalars['Boolean'],\n};\n\nexport type ClaimParticipantIndex = {\n  claimId: Scalars['ID'],\n  postcode?: Maybe<Scalars['String']>,\n  portfolioTypes?: Maybe<Array<Maybe<PortfolioType>>>,\n  participantStatus?: Maybe<SupplierStatusFilter>,\n  participantType?: Maybe<SupplierTypeFilter>,\n};\n\nexport type ClaimPortfolio = {\n   __typename?: 'ClaimPortfolio',\n  _portfolioTooltips?: Maybe<Scalars['String']>,\n  _providerAndStatus?: Maybe<Scalars['String']>,\n  authorised: Scalars['Boolean'],\n  authorisedSupplier?: Maybe<Company>,\n  authorisedValue?: Maybe<Scalars['Decimal']>,\n  claimCompleted: Scalars['Boolean'],\n  claimRecommendation?: Maybe<ClaimRecommendation>,\n  claimStatus?: Maybe<ClaimStatus>,\n  dateAccecpted?: Maybe<Scalars['Date']>,\n  dateCompleted?: Maybe<Scalars['Date']>,\n  daysAtStatus?: Maybe<Scalars['Float']>,\n  daysTakenToComplete?: Maybe<Scalars['Float']>,\n  description: Scalars['String'],\n  emergencyMakeSafeWorks?: Maybe<Scalars['Int']>,\n  estimator?: Maybe<Estimator>,\n  excessValue?: Maybe<Scalars['Int']>,\n  finaliseReason?: Maybe<ClaimFinaliseReason>,\n  insuranceCompletedSiteReport: Scalars['Boolean'],\n  isReallocateSupplier: Scalars['Boolean'],\n  jobSuppliers?: Maybe<Array<Maybe<JobSupplier>>>,\n  lastContactInsured?: Maybe<Scalars['DateTimeString']>,\n  lastStatusDate?: Maybe<Scalars['DateTimeString']>,\n  makeSafeProgress?: Maybe<ClaimProgress>,\n  makeSafeStatus?: Maybe<ClaimStatus>,\n  makeSafeValue?: Maybe<Scalars['Decimal']>,\n  makesafeCompletedDate?: Maybe<Scalars['Date']>,\n  nextContactInsured?: Maybe<Scalars['DateTimeString']>,\n  noPanelSupplier: Scalars['String'],\n  policyCover?: Maybe<PolicyCover>,\n  policyType?: Maybe<PolicyType>,\n  portfolioType?: Maybe<PortfolioType>,\n  progress?: Maybe<ClaimProgress>,\n  reallocate: Scalars['Boolean'],\n  reportDate?: Maybe<Scalars['DateString']>,\n  scopePrepared: Scalars['Boolean'],\n  scopedValue?: Maybe<Scalars['Decimal']>,\n  scopingSupplier?: Maybe<Company>,\n  settlementValue?: Maybe<Scalars['Float']>,\n  siteReport?: Maybe<ClaimSiteReport>,\n  siteReportDescription?: Maybe<Scalars['String']>,\n  statusBeforeAwaitingInfo?: Maybe<ClaimStatus>,\n  statusBeforeComplete?: Maybe<ClaimStatus>,\n  sumInsured: Scalars['Int'],\n  sumInsuredAdequate?: Maybe<Scalars['Int']>,\n  supervisor?: Maybe<Supervisor>,\n  supplierCollectedExcess?: Maybe<Scalars['Int']>,\n  supplierJobStatus?: Maybe<ClaimStatus>,\n  supplierJobValue?: Maybe<Scalars['Decimal']>,\n  toCollectExcess?: Maybe<Scalars['Boolean']>,\n  toProvideSiteReport: Scalars['Boolean'],\n  userContactInsured?: Maybe<Scalars['Int']>,\n  winningBuilderRecommend?: Maybe<Scalars['Int']>,\n};\n\nexport type ClaimPortfolioCreate = {\n  portfolioType: PortfolioType,\n  toProvideSiteReport: Scalars['Boolean'],\n  sumInsured: Scalars['Int'],\n  excessValue: Scalars['Int'],\n  toCollectExcess: Scalars['Boolean'],\n  scopingSupplierId: Scalars['ID'],\n  quotingSupplierIds?: Maybe<Array<Scalars['ID']>>,\n};\n\nexport type ClaimPortfolioInput = {\n  portfolioType: PortfolioType,\n  policyCoverId?: Maybe<Scalars['ID']>,\n  policyTypeId?: Maybe<Scalars['ID']>,\n  description?: Maybe<Scalars['String']>,\n  sumInsured?: Maybe<Scalars['Int']>,\n  excessValue?: Maybe<Scalars['Int']>,\n  toCollectExcess?: Maybe<Scalars['Boolean']>,\n  quotingSupplierIds?: Maybe<Array<Scalars['ID']>>,\n};\n\nexport type ClaimPortfolioPayload = {\n   __typename?: 'ClaimPortfolioPayload',\n  fieldErrors?: Maybe<Array<Maybe<EntityFieldError>>>,\n  messages: Array<Scalars['String']>,\n  result?: Maybe<ClaimPortfolio>,\n  success: Scalars['Boolean'],\n};\n\nexport type ClaimPortfoliosWhere = {\n  claimId: Scalars['ID'],\n  claimPortfolioTypes?: Maybe<Array<PortfolioType>>,\n};\n\nexport type ClaimProgress = {\n   __typename?: 'ClaimProgress',\n  appointmentBooked: Scalars['Boolean'],\n  appointmentDate?: Maybe<Scalars['DateTimeString']>,\n  appointmentUserId?: Maybe<Scalars['Int']>,\n  initialCallDate?: Maybe<Scalars['DateTimeString']>,\n  initialCallMade: Scalars['Boolean'],\n  initialCallUserId?: Maybe<Scalars['Int']>,\n};\n\nexport type ClaimRecommendation = {\n   __typename?: 'ClaimRecommendation',\n  claimrecommendationid?: Maybe<Scalars['Byte']>,\n  description: Scalars['String'],\n};\n\nexport type ClaimReserveInput = {\n  buildingReserve: Scalars['Decimal'],\n  contentsReserve: Scalars['Decimal'],\n};\n\nexport type ClaimSiteReport = {\n   __typename?: 'ClaimSiteReport',\n  claddingType?: Maybe<SiteCladdingType>,\n  dwellingAge?: Maybe<SiteDwellingAge>,\n  dwellingType?: Maybe<SiteDwellingType>,\n  foundationType?: Maybe<SiteFoundationType>,\n  houseType?: Maybe<SiteHouseType>,\n  isAClaim?: Maybe<SiteIsAClaim>,\n  roofType?: Maybe<SiteRoofType>,\n};\n\nexport type ClaimStatus = {\n   __typename?: 'ClaimStatus',\n  statusId?: Maybe<Scalars['Int']>,\n  statusName?: Maybe<Scalars['String']>,\n};\n\nexport type ClaimStatusVolume = {\n   __typename?: 'ClaimStatusVolume',\n  claimCount: Scalars['Int'],\n  color: Scalars['String'],\n  id: Scalars['ID'],\n  label: Scalars['String'],\n};\n\nexport type ClaimStatusVolumeGroup = {\n   __typename?: 'ClaimStatusVolumeGroup',\n  claimPortfolioType: PortfolioType,\n  id: Scalars['ID'],\n  items: Array<ClaimStatusVolume>,\n};\n\nexport type ClaimStatusVolumeWhere = {\n  createDateFrom?: Maybe<Scalars['Date']>,\n  createDateTo?: Maybe<Scalars['Date']>,\n  incidentDate?: Maybe<Scalars['DateString']>,\n  incidentDateFrom?: Maybe<Scalars['DateString']>,\n  incidentDateTo?: Maybe<Scalars['DateString']>,\n  keyWords?: Maybe<Scalars['String']>,\n  managerTeams?: Maybe<Array<Maybe<Scalars['String']>>>,\n  insurers?: Maybe<Array<Scalars['ID']>>,\n  managers?: Maybe<Array<Scalars['ID']>>,\n  adjusters?: Maybe<Array<Scalars['ID']>>,\n  catCodes?: Maybe<Array<Scalars['ID']>>,\n  eventTypes?: Maybe<Array<Scalars['ID']>>,\n  buildingSuppliers?: Maybe<Array<Scalars['ID']>>,\n  contentsSuppliers?: Maybe<Array<Scalars['ID']>>,\n  restorationSuppliers?: Maybe<Array<Scalars['ID']>>,\n  internalAssessors?: Maybe<Array<Scalars['ID']>>,\n  states?: Maybe<Array<Maybe<State>>>,\n  claimPortfolioType: PortfolioType,\n};\n\nexport type ClaimUniqueWhere = {\n  claimId: Scalars['ID'],\n};\n\nexport type CommunicationFilter = {\n  id?: Maybe<Scalars['ID']>,\n  claimId?: Maybe<Scalars['ID']>,\n  createDateFrom?: Maybe<Scalars['Date']>,\n  createDateTo?: Maybe<Scalars['Date']>,\n  keyWords?: Maybe<Scalars['String']>,\n  managers?: Maybe<Array<Scalars['ID']>>,\n  managerTeams?: Maybe<Array<Maybe<Scalars['String']>>>,\n  internalAssessors?: Maybe<Array<Scalars['ID']>>,\n  acknowledged?: Maybe<Scalars['Boolean']>,\n  states?: Maybe<Array<Maybe<State>>>,\n  boxes?: Maybe<Array<Maybe<ClaimCommunicationBox>>>,\n  portfolios?: Maybe<Array<Maybe<PortfolioType>>>,\n};\n\nexport type Company = {\n   __typename?: 'Company',\n  additionalRefNo?: Maybe<Scalars['Boolean']>,\n  builderAttendSite?: Maybe<Scalars['Boolean']>,\n  claimrecommendation?: Maybe<Scalars['Boolean']>,\n  cm2nd?: Maybe<Scalars['Boolean']>,\n  comboclaims?: Maybe<Scalars['Boolean']>,\n  commOptionForBuilder?: Maybe<Scalars['Boolean']>,\n  companyEmail?: Maybe<Scalars['String']>,\n  companyFax?: Maybe<Scalars['String']>,\n  companyId: Scalars['Int'],\n  companyName: Scalars['String'],\n  companyPhone1?: Maybe<Scalars['String']>,\n  companyPhone2?: Maybe<Scalars['String']>,\n  companyrates?: Maybe<Scalars['Int']>,\n  companyType?: Maybe<AccessRole>,\n  content?: Maybe<Scalars['Int']>,\n  contentauth?: Maybe<Scalars['Boolean']>,\n  contentsref?: Maybe<Scalars['Boolean']>,\n  cropassess?: Maybe<Scalars['Boolean']>,\n  defaultratesRestoration?: Maybe<Scalars['Int']>,\n  defConsultBuildSiteReport?: Maybe<Scalars['Int']>,\n  directSupplyTemplate?: Maybe<Scalars['Boolean']>,\n  enableMultipleRisks?: Maybe<Scalars['Boolean']>,\n  hideCaseManagerFromSiteReport?: Maybe<Scalars['Boolean']>,\n  hideCategoryOfClaim?: Maybe<Scalars['Boolean']>,\n  industryrates?: Maybe<Scalars['Int']>,\n  insrefnumLength?: Maybe<Scalars['Byte']>,\n  invoiceEmail?: Maybe<Scalars['Boolean']>,\n  isAutoSelectSupplier: Scalars['Boolean'],\n  isAwaitingInformation: Scalars['Boolean'],\n  isFeeModule: Scalars['Boolean'],\n  isLossAdjuster: Scalars['Boolean'],\n  isMarginUpdate: Scalars['Boolean'],\n  isReportingModule: Scalars['Boolean'],\n  isSirModule: Scalars['Boolean'],\n  isSpecialistModule: Scalars['Boolean'],\n  isToProvideSiteReportView: Scalars['Boolean'],\n  isVideoToolModule: Scalars['Boolean'],\n  logoright?: Maybe<Scalars['String']>,\n  lossadjcomp?: Maybe<Scalars['Int']>,\n  lossAdjustCreateSiteReport?: Maybe<Scalars['Int']>,\n  makesafeAppointmentmade?: Maybe<Scalars['Boolean']>,\n  makesafeInitialcallmade?: Maybe<Scalars['Boolean']>,\n  makesafeRstAppointmentmade?: Maybe<Scalars['Boolean']>,\n  makesafeRstInitialcallmade?: Maybe<Scalars['Boolean']>,\n  makesafeRstWorkscompleted?: Maybe<Scalars['Boolean']>,\n  makesafeWorkscompleted?: Maybe<Scalars['Boolean']>,\n  mitigation?: Maybe<Scalars['Boolean']>,\n  nonPanelSupplier: Scalars['Boolean'],\n  onCostPopUp?: Maybe<Scalars['Boolean']>,\n  policy?: Maybe<Scalars['Boolean']>,\n  policyCoverManditoryField?: Maybe<Scalars['Boolean']>,\n  policyCoverSuppliersView?: Maybe<Scalars['Boolean']>,\n  policylimit?: Maybe<Scalars['Boolean']>,\n  policylimitperitem?: Maybe<Scalars['Boolean']>,\n  policyTypeManditoryField?: Maybe<Scalars['Boolean']>,\n  policyTypeSuppliersView?: Maybe<Scalars['Boolean']>,\n  quickrepair?: Maybe<Scalars['Boolean']>,\n  quotesperclaim?: Maybe<Scalars['Int']>,\n  removeHabitableAsbestos?: Maybe<Scalars['Boolean']>,\n  restoration?: Maybe<Scalars['Boolean']>,\n  rrp?: Maybe<Scalars['Boolean']>,\n  setupcustomerlogin?: Maybe<Scalars['Int']>,\n  sitereporttemplateid?: Maybe<Scalars['Byte']>,\n  substatus?: Maybe<Scalars['Boolean']>,\n  useInternalAssessor: Scalars['Boolean'],\n  useSirRestorationModule: Scalars['Boolean'],\n  usesRestrictedAcceptance?: Maybe<Scalars['Boolean']>,\n  waitingOptionForBuilder?: Maybe<Scalars['Boolean']>,\n};\n\nexport type CompanyCustomisation = {\n   __typename?: 'CompanyCustomisation',\n  applicationAlias?: Maybe<Scalars['String']>,\n  applicationFavicon?: Maybe<Scalars['String']>,\n  applicationLogo?: Maybe<Scalars['String']>,\n  displayCompanyLogo?: Maybe<Scalars['String']>,\n  logoHeight?: Maybe<Scalars['Byte']>,\n};\n\nexport type CompanyProfile = {\n   __typename?: 'CompanyProfile',\n  additionalRefNo?: Maybe<Scalars['Boolean']>,\n  builderAttendSite?: Maybe<Scalars['Boolean']>,\n  claimrecommendation?: Maybe<Scalars['Boolean']>,\n  cm2nd?: Maybe<Scalars['Boolean']>,\n  comboclaims?: Maybe<Scalars['Boolean']>,\n  commOptionForBuilder?: Maybe<Scalars['Boolean']>,\n  companyEmail?: Maybe<Scalars['String']>,\n  companyFax?: Maybe<Scalars['String']>,\n  companyId: Scalars['Int'],\n  companyName: Scalars['String'],\n  companyPhone1?: Maybe<Scalars['String']>,\n  companyPhone2?: Maybe<Scalars['String']>,\n  companyrates?: Maybe<Scalars['Int']>,\n  companyType?: Maybe<AccessRole>,\n  content?: Maybe<Scalars['Int']>,\n  contentauth?: Maybe<Scalars['Boolean']>,\n  contentsref?: Maybe<Scalars['Boolean']>,\n  cropassess?: Maybe<Scalars['Boolean']>,\n  customisation?: Maybe<CompanyCustomisation>,\n  defaultratesRestoration?: Maybe<Scalars['Int']>,\n  defConsultBuildSiteReport?: Maybe<Scalars['Int']>,\n  directSupplyTemplate?: Maybe<Scalars['Boolean']>,\n  enableMultipleRisks?: Maybe<Scalars['Boolean']>,\n  hideCaseManagerFromSiteReport?: Maybe<Scalars['Boolean']>,\n  hideCategoryOfClaim?: Maybe<Scalars['Boolean']>,\n  industryrates?: Maybe<Scalars['Int']>,\n  insrefnumLength?: Maybe<Scalars['Byte']>,\n  invoiceEmail?: Maybe<Scalars['Boolean']>,\n  isAutoSelectSupplier: Scalars['Boolean'],\n  isAwaitingInformation: Scalars['Boolean'],\n  isFeeModule: Scalars['Boolean'],\n  isLossAdjuster: Scalars['Boolean'],\n  isMarginUpdate: Scalars['Boolean'],\n  isReportingModule: Scalars['Boolean'],\n  isSirModule: Scalars['Boolean'],\n  isSpecialistModule: Scalars['Boolean'],\n  isToProvideSiteReportView: Scalars['Boolean'],\n  isVideoToolModule: Scalars['Boolean'],\n  logoright?: Maybe<Scalars['String']>,\n  lossadjcomp?: Maybe<Scalars['Int']>,\n  lossAdjustCreateSiteReport?: Maybe<Scalars['Int']>,\n  makesafeAppointmentmade?: Maybe<Scalars['Boolean']>,\n  makesafeInitialcallmade?: Maybe<Scalars['Boolean']>,\n  makesafeRstAppointmentmade?: Maybe<Scalars['Boolean']>,\n  makesafeRstInitialcallmade?: Maybe<Scalars['Boolean']>,\n  makesafeRstWorkscompleted?: Maybe<Scalars['Boolean']>,\n  makesafeWorkscompleted?: Maybe<Scalars['Boolean']>,\n  mitigation?: Maybe<Scalars['Boolean']>,\n  nonPanelSupplier: Scalars['Boolean'],\n  onCostPopUp?: Maybe<Scalars['Boolean']>,\n  policy?: Maybe<Scalars['Boolean']>,\n  policyCoverManditoryField?: Maybe<Scalars['Boolean']>,\n  policyCoverSuppliersView?: Maybe<Scalars['Boolean']>,\n  policylimit?: Maybe<Scalars['Boolean']>,\n  policylimitperitem?: Maybe<Scalars['Boolean']>,\n  policyTypeManditoryField?: Maybe<Scalars['Boolean']>,\n  policyTypeSuppliersView?: Maybe<Scalars['Boolean']>,\n  quickrepair?: Maybe<Scalars['Boolean']>,\n  quotesperclaim?: Maybe<Scalars['Int']>,\n  removeHabitableAsbestos?: Maybe<Scalars['Boolean']>,\n  restoration?: Maybe<Scalars['Boolean']>,\n  rrp?: Maybe<Scalars['Boolean']>,\n  setupcustomerlogin?: Maybe<Scalars['Int']>,\n  sitereporttemplateid?: Maybe<Scalars['Byte']>,\n  substatus?: Maybe<Scalars['Boolean']>,\n  useInternalAssessor: Scalars['Boolean'],\n  useSirRestorationModule: Scalars['Boolean'],\n  usesRestrictedAcceptance?: Maybe<Scalars['Boolean']>,\n  waitingOptionForBuilder?: Maybe<Scalars['Boolean']>,\n};\n\nexport type Contact = {\n   __typename?: 'Contact',\n  name?: Maybe<Scalars['String']>,\n  phone1?: Maybe<Scalars['String']>,\n  phone2?: Maybe<Scalars['String']>,\n  phone3?: Maybe<Scalars['String']>,\n};\n\nexport type ContactDetail = {\n   __typename?: 'ContactDetail',\n  email?: Maybe<Scalars['String']>,\n  fax?: Maybe<Scalars['String']>,\n  name?: Maybe<Scalars['String']>,\n  phone1?: Maybe<Scalars['String']>,\n  phone2?: Maybe<Scalars['String']>,\n  phone3?: Maybe<Scalars['String']>,\n  postalAddress?: Maybe<Address>,\n  salutation?: Maybe<Scalars['String']>,\n};\n\nexport type ContactDetailInput = {\n  name?: Maybe<Scalars['String']>,\n  phone1?: Maybe<Scalars['String']>,\n  phone2?: Maybe<Scalars['String']>,\n  phone3?: Maybe<Scalars['String']>,\n  salutation?: Maybe<Scalars['String']>,\n  email?: Maybe<Scalars['String']>,\n  fax?: Maybe<Scalars['String']>,\n  postalAddress?: Maybe<AddressInput>,\n};\n\nexport type ContactInput = {\n  name?: Maybe<Scalars['String']>,\n  phone1?: Maybe<Scalars['String']>,\n  phone2?: Maybe<Scalars['String']>,\n  phone3?: Maybe<Scalars['String']>,\n};\n\nexport type Dashboard = {\n   __typename?: 'Dashboard',\n  dashboardId: Scalars['Int'],\n  id: Scalars['ID'],\n  name: Scalars['String'],\n};\n\nexport type DashboardWidgetIndex = {\n  dashboardId: Scalars['Int'],\n  filter?: Maybe<CaseReportFilter>,\n};\n\nexport enum DataDisplay {\n  Text = 'Text',\n  ChartGraph = 'ChartGraph',\n  ChartLine = 'ChartLine',\n  ChartBar = 'ChartBar',\n  ChartProgressBar = 'ChartProgressBar'\n}\n\nexport enum DataSense {\n  Neutral = 'Neutral',\n  Commendatory = 'Commendatory',\n  Derogatory = 'Derogatory'\n}\n\nexport enum DataUnit {\n  Number = 'Number',\n  Currency = 'Currency'\n}\n\n\nexport enum DateRangeOption {\n  UnDefined = 'UnDefined',\n  Daily = 'Daily',\n  Weekly = 'Weekly',\n  Monthly = 'Monthly',\n  Yearly = 'Yearly',\n  Today = 'Today',\n  Month = 'Month',\n  Week = 'Week',\n  Annual = 'Annual',\n  Quarter = 'Quarter',\n  FinancialYear = 'FinancialYear'\n}\n\n\n\nexport type DateTimeField = Field & {\n   __typename?: 'DateTimeField',\n  id: Scalars['ID'],\n  order?: Maybe<Scalars['Int']>,\n  grid?: Maybe<Scalars['Grid']>,\n  label?: Maybe<Scalars['String']>,\n  name?: Maybe<Scalars['String']>,\n};\n\n\n\n\n\nexport type EnDataEntityKey = {\n  id: Scalars['ID'],\n};\n\nexport type EnDataPortfolioKey = {\n  id: Scalars['ID'],\n  portfolioType: PortfolioType,\n};\n\nexport type EntityFieldError = {\n   __typename?: 'EntityFieldError',\n  fieldName: Scalars['String'],\n  level?: Maybe<LogLevel>,\n  message: Scalars['String'],\n};\n\nexport type Estimator = {\n   __typename?: 'Estimator',\n  companyId: Scalars['Int'],\n  estimatorId: Scalars['Int'],\n  id: Scalars['ID'],\n  initials?: Maybe<Scalars['String']>,\n  name?: Maybe<Scalars['String']>,\n  phone?: Maybe<Scalars['String']>,\n  portfolioType?: Maybe<PortfolioType>,\n};\n\nexport type EstimatorConnection = {\n   __typename?: 'EstimatorConnection',\n  edges?: Maybe<Array<Maybe<EstimatorEdge>>>,\n  items?: Maybe<Array<Maybe<Estimator>>>,\n  pageInfo: PageInfo,\n  totalCount?: Maybe<Scalars['Int']>,\n};\n\nexport type EstimatorCreateInput = {\n  name: Scalars['String'],\n  initials?: Maybe<Scalars['String']>,\n  phone?: Maybe<Scalars['String']>,\n  companyId?: Maybe<Scalars['Int']>,\n  portfolioType?: Maybe<PortfolioType>,\n};\n\nexport type EstimatorEdge = {\n   __typename?: 'EstimatorEdge',\n  cursor: Scalars['String'],\n  node?: Maybe<Estimator>,\n};\n\nexport type EstimatorPayload = {\n   __typename?: 'EstimatorPayload',\n  fieldErrors?: Maybe<Array<Maybe<EntityFieldError>>>,\n  messages: Array<Scalars['String']>,\n  result?: Maybe<Estimator>,\n  success: Scalars['Boolean'],\n};\n\nexport type EstimatorUpdateInput = {\n  name?: Maybe<Scalars['String']>,\n  initials?: Maybe<Scalars['String']>,\n  phone?: Maybe<Scalars['String']>,\n};\n\nexport type FeeAmount = {\n   __typename?: 'FeeAmount',\n  defaultAmount?: Maybe<Scalars['Decimal']>,\n  id: Scalars['ID'],\n  maxAmount?: Maybe<Scalars['Decimal']>,\n  supplierId: Scalars['Int'],\n  supplierName: Scalars['String'],\n};\n\nexport type FeeCategory = {\n   __typename?: 'FeeCategory',\n  claimPortfolioType?: Maybe<PortfolioType>,\n  feeCategoryId: Scalars['Int'],\n  feeItems?: Maybe<Array<Maybe<FeeItem>>>,\n  feeItemsAggregate?: Maybe<AggregateFeeItem>,\n  feeTypes: Array<Maybe<FeeType>>,\n  id: Scalars['ID'],\n  name: Scalars['String'],\n};\n\nexport type FeeCategoryWhere = {\n  claimId: Scalars['ID'],\n  claimPortfolioTypes?: Maybe<Array<PortfolioType>>,\n};\n\nexport type FeeInvoice = {\n   __typename?: 'FeeInvoice',\n  actions: Array<Maybe<Action>>,\n  amount?: Maybe<Scalars['Decimal']>,\n  document?: Maybe<File>,\n  feeInvoiceId: Scalars['Int'],\n  feeInvoiceStatus?: Maybe<FeeInvoiceStatus>,\n  feeItemInvoices?: Maybe<Array<Maybe<FeeInvoiceItem>>>,\n  id: Scalars['ID'],\n  number: Scalars['String'],\n};\n\nexport type FeeInvoiceItem = {\n   __typename?: 'FeeInvoiceItem',\n  amount: Scalars['Decimal'],\n  feeItemInvoiceId: Scalars['String'],\n  feeItemName: Scalars['String'],\n  id: Scalars['ID'],\n};\n\nexport type FeeInvoicePayload = {\n   __typename?: 'FeeInvoicePayload',\n  fieldErrors?: Maybe<Array<Maybe<EntityFieldError>>>,\n  messages: Array<Scalars['String']>,\n  result?: Maybe<FeeInvoice>,\n  success: Scalars['Boolean'],\n};\n\nexport type FeeInvoiceStatus = {\n   __typename?: 'FeeInvoiceStatus',\n  id: Scalars['ID'],\n  invoiceStatusId: Scalars['Int'],\n  name: Scalars['String'],\n  type: Scalars['String'],\n};\n\nexport type FeeInvoiceStatusWhere = {\n  claimId: Scalars['ID'],\n};\n\nexport type FeeInvoiceUniqueWhere = {\n  feeInvoiceId: Scalars['Int'],\n};\n\nexport type FeeInvoiceUpdateInput = {\n  feeInvoiceStatusId: Scalars['Int'],\n};\n\nexport type FeeInvoiceUploadInput = {\n  invoiceNumber: Scalars['String'],\n  invoiceAmount: Scalars['Decimal'],\n  description: Scalars['String'],\n  private?: Maybe<Scalars['Boolean']>,\n  visibleByInsurer?: Maybe<Scalars['Boolean']>,\n  fileId?: Maybe<Scalars['String']>,\n  fileName: Scalars['String'],\n  fileBase64: Scalars['String'],\n};\n\nexport type FeeInvoiceUploadWhere = {\n  feeItemIds: Array<Scalars['Int']>,\n};\n\nexport type FeeItem = {\n   __typename?: 'FeeItem',\n  actions: Array<Maybe<Action>>,\n  authorisedAmount?: Maybe<Scalars['Decimal']>,\n  claimPortfolioType?: Maybe<PortfolioType>,\n  description?: Maybe<Scalars['String']>,\n  feeItemId: Scalars['Int'],\n  feeItemInvoices?: Maybe<Array<Maybe<FeeItemInvoice>>>,\n  feeType?: Maybe<FeeType>,\n  id: Scalars['ID'],\n  logDate?: Maybe<Scalars['DateTimeString']>,\n  maxAmount?: Maybe<Scalars['Decimal']>,\n  supplier?: Maybe<Company>,\n  toBeInvoicedAmount?: Maybe<Scalars['Decimal']>,\n};\n\nexport type FeeItemCreateInput = {\n  claimId: Scalars['ID'],\n  feeTypeId: Scalars['Int'],\n  authorisedAmount: Scalars['Decimal'],\n  supplierId?: Maybe<Scalars['Int']>,\n};\n\nexport type FeeItemEditInput = {\n  authorisedAmount: Scalars['Decimal'],\n};\n\nexport type FeeItemInvoice = {\n   __typename?: 'FeeItemInvoice',\n  amount: Scalars['Decimal'],\n  feeInvoice?: Maybe<FeeInvoice>,\n  feeItemInvoiceId: Scalars['String'],\n  id: Scalars['ID'],\n};\n\nexport type FeeItemPayload = {\n   __typename?: 'FeeItemPayload',\n  fieldErrors?: Maybe<Array<Maybe<EntityFieldError>>>,\n  messages: Array<Scalars['String']>,\n  result?: Maybe<FeeItem>,\n  success: Scalars['Boolean'],\n};\n\nexport type FeeItemUniqueWhere = {\n  feeItemId: Scalars['Int'],\n};\n\nexport type FeeItemWhere = {\n  claimId: Scalars['ID'],\n  availableToBulkInvoice: Scalars['Boolean'],\n  claimPortfolioTypes?: Maybe<Array<PortfolioType>>,\n};\n\nexport type FeePortfolio = {\n   __typename?: 'FeePortfolio',\n  actions: Array<Maybe<Action>>,\n  feeCategories?: Maybe<Array<Maybe<FeeCategory>>>,\n  feeCategoriesAggregate?: Maybe<AggregateFeeCategory>,\n  feePortfolioId: Scalars['Int'],\n  id: Scalars['ID'],\n};\n\nexport type FeeTab = {\n   __typename?: 'FeeTab',\n  id: Scalars['ID'],\n  isDisplay: Scalars['Boolean'],\n};\n\nexport type FeeType = {\n   __typename?: 'FeeType',\n  feeTypeId: Scalars['Int'],\n  id: Scalars['ID'],\n  name: Scalars['String'],\n  negativeFee: Scalars['Boolean'],\n  suppliers?: Maybe<Array<Maybe<Company>>>,\n  suppliersAndAmounts?: Maybe<Array<Maybe<FeeAmount>>>,\n};\n\nexport type Field = {\n  id: Scalars['ID'],\n  label?: Maybe<Scalars['String']>,\n  order?: Maybe<Scalars['Int']>,\n  grid?: Maybe<Scalars['Grid']>,\n};\n\nexport type File = {\n   __typename?: 'File',\n  fileId: Scalars['Int'],\n  id: Scalars['ID'],\n  name: Scalars['String'],\n  url: Scalars['String'],\n};\n\nexport type FileField = Field & {\n   __typename?: 'FileField',\n  id: Scalars['ID'],\n  order?: Maybe<Scalars['Int']>,\n  grid?: Maybe<Scalars['Grid']>,\n  label?: Maybe<Scalars['String']>,\n  name?: Maybe<Scalars['String']>,\n};\n\nexport type FilterElement = {\n   __typename?: 'FilterElement',\n  displayByDefault: Scalars['Boolean'],\n  id: Scalars['String'],\n  name: Scalars['String'],\n  options?: Maybe<Array<Maybe<FilterOption>>>,\n  value?: Maybe<Scalars['String']>,\n};\n\nexport type FilterInput = {\n   __typename?: 'FilterInput',\n  icon?: Maybe<Scalars['String']>,\n  id: Scalars['ID'],\n  isDisabled: Scalars['Boolean'],\n  label?: Maybe<Scalars['String']>,\n  name: Scalars['String'],\n  options?: Maybe<Array<Maybe<FilterInputOption>>>,\n  type: FilterType,\n};\n\nexport type FilterInputOption = {\n   __typename?: 'FilterInputOption',\n  group?: Maybe<Scalars['String']>,\n  id?: Maybe<Scalars['ID']>,\n  label: Scalars['String'],\n};\n\nexport type FilterOption = {\n   __typename?: 'FilterOption',\n  group?: Maybe<Scalars['String']>,\n  id?: Maybe<Scalars['ID']>,\n  name: Scalars['String'],\n  value: Scalars['String'],\n};\n\nexport enum FilterType {\n  Text = 'Text',\n  Date = 'Date',\n  Time = 'Time',\n  DateTime = 'DateTime',\n  Select = 'Select',\n  SelectMultiple = 'Select_multiple',\n  ComboBox = 'ComboBox',\n  ComboBoxMultiple = 'ComboBox_multiple',\n  Search = 'Search'\n}\n\nexport type FinaliseClaimInput = {\n  finaliseReasonId: Scalars['Int'],\n  settlementValue?: Maybe<Scalars['Float']>,\n  noPanelSupplier?: Maybe<Scalars['String']>,\n  dateCompleted?: Maybe<Scalars['DateString']>,\n};\n\nexport type FollowUpClaimInputType = {\n  note: Scalars['String'],\n  lastFollowUpDate: Scalars['DateTimeString'],\n  nextFollowUpDate?: Maybe<Scalars['DateTimeString']>,\n};\n\nexport type Form = {\n   __typename?: 'Form',\n  cards?: Maybe<Array<Card>>,\n  id: Scalars['ID'],\n  title?: Maybe<Scalars['String']>,\n  description?: Maybe<Scalars['String']>,\n};\n\nexport type GeneralPayload = {\n   __typename?: 'GeneralPayload',\n  fieldErrors?: Maybe<Array<Maybe<EntityFieldError>>>,\n  messages: Array<Scalars['String']>,\n  success: Scalars['Boolean'],\n};\n\n\nexport type GroupField = Field & {\n   __typename?: 'GroupField',\n  id: Scalars['ID'],\n  order?: Maybe<Scalars['Int']>,\n  grid?: Maybe<Scalars['Grid']>,\n  label?: Maybe<Scalars['String']>,\n  name?: Maybe<Scalars['String']>,\n  fields?: Maybe<Array<Field>>,\n};\n\nexport type HaTypeVisit = {\n   __typename?: 'HATypeVisit',\n  id: Scalars['ID'],\n  typeVisitId: Scalars['Int'],\n  visitName: Scalars['String'],\n};\n\nexport type IncidentDetail = {\n   __typename?: 'IncidentDetail',\n  asbestos?: Maybe<Scalars['Boolean']>,\n  cATCode?: Maybe<CatCode>,\n  category?: Maybe<ClaimCategory>,\n  eventType?: Maybe<IncidentEvent>,\n  habitableProperty?: Maybe<Scalars['Boolean']>,\n  hold: Scalars['Boolean'],\n  incidentDate?: Maybe<Scalars['DateString']>,\n  makeSafeRequired: Scalars['Boolean'],\n  riskAddress?: Maybe<Address>,\n};\n\nexport type IncidentDetailNewType = {\n  eventTypeId: Scalars['ID'],\n  catCodeId: Scalars['ID'],\n  habitableProperty?: Maybe<Scalars['Boolean']>,\n  asbestos?: Maybe<Scalars['Boolean']>,\n  hold?: Maybe<Scalars['Boolean']>,\n  makeSafeRequired: Scalars['Boolean'],\n  incidentDate: Scalars['DateString'],\n  riskAddress: AddressInput,\n  category?: Maybe<ClaimCategory>,\n};\n\nexport type IncidentEvent = {\n   __typename?: 'IncidentEvent',\n  eventName: Scalars['String'],\n  eventTypeId: Scalars['Int'],\n};\n\nexport type InfoField = Field & {\n   __typename?: 'InfoField',\n  id: Scalars['ID'],\n  order?: Maybe<Scalars['Int']>,\n  grid?: Maybe<Scalars['Grid']>,\n  label?: Maybe<Scalars['String']>,\n  value?: Maybe<Scalars['String']>,\n};\n\nexport type InternalAssesor = {\n   __typename?: 'InternalAssesor',\n  assesorId: Scalars['Int'],\n  assesorName: Scalars['String'],\n  id: Scalars['ID'],\n};\n\nexport type InternalAssesorConnection = {\n   __typename?: 'InternalAssesorConnection',\n  edges?: Maybe<Array<Maybe<InternalAssesorEdge>>>,\n  items?: Maybe<Array<Maybe<InternalAssesor>>>,\n  pageInfo: PageInfo,\n  totalCount?: Maybe<Scalars['Int']>,\n};\n\nexport type InternalAssesorEdge = {\n   __typename?: 'InternalAssesorEdge',\n  cursor: Scalars['String'],\n  node?: Maybe<InternalAssesor>,\n};\n\nexport type JobContentAuthoriseInput = {\n  authorisedItems: Array<Scalars['Int']>,\n  deliveryChargeUsed: Scalars['Boolean'],\n};\n\nexport type JobContentItemCreate = {\n  costCentreId: Scalars['Int'],\n  costItemId: Scalars['Int'],\n  lineDescription: Scalars['String'],\n  locationId: Scalars['Int'],\n  dimensions?: Maybe<Scalars['String']>,\n  proofOfLoss?: Maybe<Scalars['String']>,\n  directsupply?: Maybe<Scalars['Boolean']>,\n  purchasePrice?: Maybe<Scalars['String']>,\n  ageOfItem?: Maybe<Scalars['String']>,\n  policyLimit?: Maybe<Scalars['Decimal']>,\n  qty: Scalars['Decimal'],\n  rate: Scalars['Decimal'],\n};\n\nexport type JobContentItemsCreate = {\n  jobQuoteId: Scalars['Int'],\n  items?: Maybe<Array<Maybe<JobContentItemCreate>>>,\n};\n\nexport type JobContentRemoveAuthorityInput = {\n  items: Array<Scalars['Int']>,\n};\n\nexport type JobMakeSafe = {\n   __typename?: 'JobMakeSafe',\n  approvedDate?: Maybe<Scalars['DateTimeString']>,\n  completed: Scalars['Boolean'],\n  description: Scalars['String'],\n  gst?: Maybe<Scalars['Decimal']>,\n  id: Scalars['ID'],\n  invoiced: Scalars['Boolean'],\n  lineItems?: Maybe<Array<Maybe<JobMakeSafeItem>>>,\n  logdate: Scalars['DateString'],\n  makeSafeId: Scalars['Int'],\n  margin?: Maybe<Scalars['Decimal']>,\n  portfolioType?: Maybe<PortfolioType>,\n  quoteStatus?: Maybe<ClaimStatus>,\n  requestScopePriceAdjust: Scalars['Boolean'],\n  reviewed: Scalars['Boolean'],\n  subtotal?: Maybe<Scalars['Decimal']>,\n  supplier?: Maybe<Company>,\n  total?: Maybe<Scalars['Decimal']>,\n};\n\nexport type JobMakeSafeConnection = {\n   __typename?: 'JobMakeSafeConnection',\n  edges?: Maybe<Array<Maybe<JobMakeSafeEdge>>>,\n  items?: Maybe<Array<Maybe<JobMakeSafe>>>,\n  pageInfo: PageInfo,\n  totalCount?: Maybe<Scalars['Int']>,\n};\n\nexport type JobMakeSafeEdge = {\n   __typename?: 'JobMakeSafeEdge',\n  cursor: Scalars['String'],\n  node?: Maybe<JobMakeSafe>,\n};\n\nexport type JobMakeSafeIndex = {\n  id?: Maybe<Array<Maybe<Scalars['Int']>>>,\n  claimId?: Maybe<Scalars['ID']>,\n  createDateFrom?: Maybe<Scalars['Date']>,\n  createDateTo?: Maybe<Scalars['Date']>,\n  portfolios?: Maybe<Array<Maybe<PortfolioType>>>,\n};\n\nexport type JobMakeSafeItem = {\n   __typename?: 'JobMakeSafeItem',\n  costCentre?: Maybe<QuoteCostCentre>,\n  costItem?: Maybe<QuoteCostItem>,\n  dimensions?: Maybe<Scalars['String']>,\n  gst?: Maybe<Scalars['Decimal']>,\n  id: Scalars['ID'],\n  lineDescription: Scalars['String'],\n  location?: Maybe<QuoteCostLocation>,\n  logdate: Scalars['DateString'],\n  makeSafeId: Scalars['Int'],\n  makeSafeItemId: Scalars['Int'],\n  margin?: Maybe<Scalars['Decimal']>,\n  marginRate: Scalars['Decimal'],\n  qty: Scalars['Decimal'],\n  rate?: Maybe<Scalars['Decimal']>,\n  subtotal?: Maybe<Scalars['Decimal']>,\n  total?: Maybe<Scalars['Decimal']>,\n  unit?: Maybe<QuoteItemUnit>,\n};\n\nexport type JobMakeSafeItemPayload = {\n   __typename?: 'JobMakeSafeItemPayload',\n  fieldErrors?: Maybe<Array<Maybe<EntityFieldError>>>,\n  messages: Array<Scalars['String']>,\n  result?: Maybe<JobMakeSafeItem>,\n  success: Scalars['Boolean'],\n};\n\nexport type JobMakeSafeItemsCreate = {\n  claimId: Scalars['ID'],\n  portfolioType: PortfolioType,\n  items?: Maybe<Array<Maybe<QuoteItemCreate>>>,\n};\n\nexport type JobMakeSafeItemsPayload = {\n   __typename?: 'JobMakeSafeItemsPayload',\n  fieldErrors?: Maybe<Array<Maybe<EntityFieldError>>>,\n  messages: Array<Scalars['String']>,\n  result?: Maybe<Array<Maybe<JobMakeSafeItem>>>,\n  success: Scalars['Boolean'],\n};\n\nexport type JobMakeSafePayload = {\n   __typename?: 'JobMakeSafePayload',\n  fieldErrors?: Maybe<Array<Maybe<EntityFieldError>>>,\n  messages: Array<Scalars['String']>,\n  result?: Maybe<JobMakeSafe>,\n  success: Scalars['Boolean'],\n};\n\nexport type JobProgress = {\n   __typename?: 'JobProgress',\n  claimJobId: Scalars['Int'],\n  completed: Scalars['Boolean'],\n  id: Scalars['ID'],\n  jobProgressId: Scalars['Int'],\n  jobQuoteId?: Maybe<Scalars['Int']>,\n  logdate?: Maybe<Scalars['DateTimeString']>,\n  portfolioType?: Maybe<PortfolioType>,\n  status?: Maybe<ClaimJobStatusInfo>,\n  statusdate?: Maybe<Scalars['DateTimeString']>,\n  user?: Maybe<User>,\n};\n\nexport type JobProgressConnection = {\n   __typename?: 'JobProgressConnection',\n  edges?: Maybe<Array<Maybe<JobProgressEdge>>>,\n  items?: Maybe<Array<Maybe<JobProgress>>>,\n  pageInfo: PageInfo,\n  totalCount?: Maybe<Scalars['Int']>,\n};\n\nexport type JobProgressEdge = {\n   __typename?: 'JobProgressEdge',\n  cursor: Scalars['String'],\n  node?: Maybe<JobProgress>,\n};\n\nexport type JobProgressPayload = {\n   __typename?: 'JobProgressPayload',\n  fieldErrors?: Maybe<Array<Maybe<EntityFieldError>>>,\n  messages: Array<Scalars['String']>,\n  result?: Maybe<JobProgress>,\n  success: Scalars['Boolean'],\n};\n\nexport type JobQuote = {\n   __typename?: 'JobQuote',\n  approved?: Maybe<Scalars['Boolean']>,\n  approvedDate?: Maybe<Scalars['DateTimeString']>,\n  collectExcess?: Maybe<Scalars['Boolean']>,\n  completed: Scalars['Boolean'],\n  contentsInitialCall?: Maybe<Scalars['Boolean']>,\n  contentsInitialCallDate?: Maybe<Scalars['DateTimeString']>,\n  contentsValidationService?: Maybe<Scalars['Boolean']>,\n  costCentres?: Maybe<Array<Maybe<JobQuoteItemCostCentreGroup>>>,\n  deliveryCharges?: Maybe<Scalars['Decimal']>,\n  deliveryChargeUsed: Scalars['Boolean'],\n  description: Scalars['String'],\n  estimatedTimeForRepairs?: Maybe<Scalars['String']>,\n  gst?: Maybe<Scalars['Decimal']>,\n  id: Scalars['ID'],\n  jobQuoteId: Scalars['Int'],\n  lineItems?: Maybe<Array<Maybe<JobQuoteItem>>>,\n  logdate: Scalars['DateString'],\n  margin?: Maybe<Scalars['Decimal']>,\n  notAcceptedItems?: Maybe<Array<Maybe<JobQuoteItem>>>,\n  originalTotal?: Maybe<Scalars['Decimal']>,\n  portfolioType?: Maybe<PortfolioType>,\n  quoteJobStatus?: Maybe<ClaimStatus>,\n  quoteStatus?: Maybe<ClaimStatus>,\n  quoteType?: Maybe<QuoteRequestType>,\n  recommended: Scalars['Boolean'],\n  requestScopePriceAdjust?: Maybe<Scalars['Boolean']>,\n  reviewed: Scalars['Boolean'],\n  sirGst?: Maybe<Scalars['Decimal']>,\n  sirMargin?: Maybe<Scalars['Decimal']>,\n  sirSubtotal?: Maybe<Scalars['Decimal']>,\n  sirTotal?: Maybe<Scalars['Decimal']>,\n  startAfterContractReceived?: Maybe<Scalars['String']>,\n  subtotal?: Maybe<Scalars['Decimal']>,\n  supplier?: Maybe<Company>,\n  total?: Maybe<Scalars['Decimal']>,\n};\n\nexport type JobQuoteAuthoriseInput = {\n  notAcceptedItemIds?: Maybe<Array<Maybe<Scalars['Int']>>>,\n};\n\nexport type JobQuoteCompleteInput = {\n  startAfterContractReceived?: Maybe<Scalars['String']>,\n  estimatedTimeForRepairs?: Maybe<Scalars['String']>,\n  deliveryCharges?: Maybe<Scalars['Decimal']>,\n  claimRecommendationId?: Maybe<Scalars['Byte']>,\n};\n\nexport type JobQuoteConnection = {\n   __typename?: 'JobQuoteConnection',\n  edges?: Maybe<Array<Maybe<JobQuoteEdge>>>,\n  items?: Maybe<Array<Maybe<JobQuote>>>,\n  pageInfo: PageInfo,\n  totalCount?: Maybe<Scalars['Int']>,\n};\n\nexport type JobQuoteEdge = {\n   __typename?: 'JobQuoteEdge',\n  cursor: Scalars['String'],\n  node?: Maybe<JobQuote>,\n};\n\nexport type JobQuoteIndex = {\n  id?: Maybe<Array<Maybe<Scalars['Int']>>>,\n  claimId?: Maybe<Scalars['ID']>,\n  createDateFrom?: Maybe<Scalars['Date']>,\n  createDateTo?: Maybe<Scalars['Date']>,\n  portfolios?: Maybe<Array<Maybe<PortfolioType>>>,\n  requestTypes?: Maybe<Array<Maybe<QuoteRequestType>>>,\n  requestCategory?: Maybe<RequestCategory>,\n};\n\nexport type JobQuoteItem = {\n   __typename?: 'JobQuoteItem',\n  accepted: Scalars['Boolean'],\n  ageOfItem?: Maybe<Scalars['String']>,\n  authorised?: Maybe<Scalars['Boolean']>,\n  authorisedDate?: Maybe<Scalars['DateTimeString']>,\n  authorisedSupplierId?: Maybe<Scalars['Int']>,\n  costCentre?: Maybe<QuoteCostCentre>,\n  costItem?: Maybe<QuoteCostItem>,\n  dimensions?: Maybe<Scalars['String']>,\n  directsupply: Scalars['Boolean'],\n  gst?: Maybe<Scalars['Decimal']>,\n  id: Scalars['ID'],\n  jobQuoteId: Scalars['Int'],\n  jobQuoteItemId: Scalars['Int'],\n  lineDescription: Scalars['String'],\n  location?: Maybe<QuoteCostLocation>,\n  logdate: Scalars['DateString'],\n  margin?: Maybe<Scalars['Decimal']>,\n  marginRate: Scalars['Decimal'],\n  policyLimit?: Maybe<Scalars['Decimal']>,\n  proofOfLoss?: Maybe<Scalars['String']>,\n  purchasePrice?: Maybe<Scalars['String']>,\n  qty: Scalars['Decimal'],\n  rate?: Maybe<Scalars['Decimal']>,\n  requestedQuote: Scalars['Boolean'],\n  scopeItemId?: Maybe<Scalars['Int']>,\n  sirGst?: Maybe<Scalars['Decimal']>,\n  sirMargin?: Maybe<Scalars['Decimal']>,\n  sirMarginRate: Scalars['String'],\n  sirRate?: Maybe<Scalars['Decimal']>,\n  sirSubtotal?: Maybe<Scalars['Decimal']>,\n  sirTotal?: Maybe<Scalars['Decimal']>,\n  substitutename?: Maybe<Scalars['String']>,\n  subtotal?: Maybe<Scalars['Decimal']>,\n  total?: Maybe<Scalars['Decimal']>,\n  unit?: Maybe<QuoteItemUnit>,\n};\n\nexport type JobQuoteItemCostCentreGroup = {\n   __typename?: 'JobQuoteItemCostCentreGroup',\n  costCentre?: Maybe<QuoteCostCentre>,\n  firstLineItemId: Scalars['Int'],\n  id: Scalars['ID'],\n  sirSubtotal?: Maybe<Scalars['Decimal']>,\n  subtotal?: Maybe<Scalars['Decimal']>,\n};\n\nexport type JobQuoteItemPayload = {\n   __typename?: 'JobQuoteItemPayload',\n  fieldErrors?: Maybe<Array<Maybe<EntityFieldError>>>,\n  messages: Array<Scalars['String']>,\n  result?: Maybe<JobQuoteItem>,\n  success: Scalars['Boolean'],\n};\n\nexport type JobQuoteItemsCreate = {\n  jobQuoteId: Scalars['Int'],\n  portfolioType: PortfolioType,\n  items?: Maybe<Array<Maybe<QuoteItemCreate>>>,\n};\n\nexport type JobQuoteItemsPayload = {\n   __typename?: 'JobQuoteItemsPayload',\n  fieldErrors?: Maybe<Array<Maybe<EntityFieldError>>>,\n  messages: Array<Scalars['String']>,\n  result?: Maybe<Array<Maybe<JobQuoteItem>>>,\n  success: Scalars['Boolean'],\n};\n\nexport type JobQuoteItemUpdate = {\n  costCentreId?: Maybe<Scalars['Int']>,\n  costItemId?: Maybe<Scalars['Int']>,\n  locationId?: Maybe<Scalars['Int']>,\n  dimensions?: Maybe<Scalars['String']>,\n  lineDescription?: Maybe<Scalars['String']>,\n  qty?: Maybe<Scalars['Decimal']>,\n  rate?: Maybe<Scalars['Decimal']>,\n  proofOfLoss?: Maybe<Scalars['String']>,\n  directsupply?: Maybe<Scalars['Boolean']>,\n  purchasePrice?: Maybe<Scalars['String']>,\n  ageOfItem?: Maybe<Scalars['String']>,\n  policyLimit?: Maybe<Scalars['Decimal']>,\n  substitutename?: Maybe<Scalars['String']>,\n};\n\nexport type JobQuotePayload = {\n   __typename?: 'JobQuotePayload',\n  fieldErrors?: Maybe<Array<Maybe<EntityFieldError>>>,\n  messages: Array<Scalars['String']>,\n  result?: Maybe<JobQuote>,\n  success: Scalars['Boolean'],\n};\n\nexport enum JobRecommendationStatus {\n  NotRecommended = 'NotRecommended'\n}\n\nexport type JobSupplier = {\n   __typename?: 'JobSupplier',\n  authorised: Scalars['Boolean'],\n  id: Scalars['ID'],\n  jobSupplierId: Scalars['Int'],\n  quote?: Maybe<JobQuote>,\n  quoteSubmitDate?: Maybe<Scalars['Date']>,\n  requestDate?: Maybe<Scalars['DateString']>,\n  requestType?: Maybe<Scalars['String']>,\n  supplier?: Maybe<Company>,\n};\n\nexport type JobVariation = {\n   __typename?: 'JobVariation',\n  approvedDate?: Maybe<Scalars['DateTimeString']>,\n  completed: Scalars['Boolean'],\n  completedDate?: Maybe<Scalars['DateTimeString']>,\n  description: Scalars['String'],\n  gst?: Maybe<Scalars['Decimal']>,\n  id: Scalars['ID'],\n  lineItems?: Maybe<Array<Maybe<JobVariationItem>>>,\n  logdate: Scalars['DateString'],\n  margin?: Maybe<Scalars['Decimal']>,\n  notAcceptedItems?: Maybe<Array<Maybe<JobVariationItem>>>,\n  portfolioType?: Maybe<PortfolioType>,\n  quoteId?: Maybe<Scalars['Int']>,\n  subtotal?: Maybe<Scalars['Decimal']>,\n  supplier?: Maybe<Company>,\n  total?: Maybe<Scalars['Decimal']>,\n  variationDescription: Scalars['String'],\n  variationId: Scalars['Int'],\n  variationReason?: Maybe<JobVariationReason>,\n  variationStatus?: Maybe<Scalars['String']>,\n  variationTitle: Scalars['String'],\n};\n\nexport type JobVariationAuditInput = {\n  notAcceptedItemIds?: Maybe<Array<Maybe<Scalars['Int']>>>,\n  auditToStatus: JobVariationStatus,\n};\n\nexport type JobVariationConnection = {\n   __typename?: 'JobVariationConnection',\n  edges?: Maybe<Array<Maybe<JobVariationEdge>>>,\n  items?: Maybe<Array<Maybe<JobVariation>>>,\n  pageInfo: PageInfo,\n  totalCount?: Maybe<Scalars['Int']>,\n};\n\nexport type JobVariationCreate = {\n  variationTitle: Scalars['String'],\n  variationDescription: Scalars['String'],\n  variationReasonId: Scalars['Int'],\n  claimJobId: Scalars['ID'],\n  portfolioType?: Maybe<PortfolioType>,\n};\n\nexport type JobVariationEdge = {\n   __typename?: 'JobVariationEdge',\n  cursor: Scalars['String'],\n  node?: Maybe<JobVariation>,\n};\n\nexport type JobVariationIndex = {\n  id?: Maybe<Array<Maybe<Scalars['Int']>>>,\n  claimId?: Maybe<Scalars['ID']>,\n  createDateFrom?: Maybe<Scalars['Date']>,\n  createDateTo?: Maybe<Scalars['Date']>,\n  portfolios?: Maybe<Array<Maybe<PortfolioType>>>,\n};\n\nexport type JobVariationItem = {\n   __typename?: 'JobVariationItem',\n  accepted: Scalars['Boolean'],\n  costCentre?: Maybe<QuoteCostCentre>,\n  costItem?: Maybe<QuoteCostItem>,\n  dimensions?: Maybe<Scalars['String']>,\n  gst?: Maybe<Scalars['Decimal']>,\n  id: Scalars['ID'],\n  lineDescription: Scalars['String'],\n  location?: Maybe<QuoteCostLocation>,\n  logdate: Scalars['DateString'],\n  margin?: Maybe<Scalars['Decimal']>,\n  marginRate: Scalars['Decimal'],\n  qty: Scalars['Decimal'],\n  rate?: Maybe<Scalars['Decimal']>,\n  subtotal?: Maybe<Scalars['Decimal']>,\n  total?: Maybe<Scalars['Decimal']>,\n  unit?: Maybe<QuoteItemUnit>,\n  variationId: Scalars['Int'],\n  variationItemId: Scalars['Int'],\n};\n\nexport type JobVariationItemPayload = {\n   __typename?: 'JobVariationItemPayload',\n  fieldErrors?: Maybe<Array<Maybe<EntityFieldError>>>,\n  messages: Array<Scalars['String']>,\n  result?: Maybe<JobVariationItem>,\n  success: Scalars['Boolean'],\n};\n\nexport type JobVariationItemsCreate = {\n  variationId: Scalars['Int'],\n  portfolioType: PortfolioType,\n  items?: Maybe<Array<Maybe<QuoteItemCreate>>>,\n};\n\nexport type JobVariationItemsPayload = {\n   __typename?: 'JobVariationItemsPayload',\n  fieldErrors?: Maybe<Array<Maybe<EntityFieldError>>>,\n  messages: Array<Scalars['String']>,\n  result?: Maybe<Array<Maybe<JobVariationItem>>>,\n  success: Scalars['Boolean'],\n};\n\nexport type JobVariationPayload = {\n   __typename?: 'JobVariationPayload',\n  fieldErrors?: Maybe<Array<Maybe<EntityFieldError>>>,\n  messages: Array<Scalars['String']>,\n  result?: Maybe<JobVariation>,\n  success: Scalars['Boolean'],\n};\n\nexport type JobVariationReason = {\n   __typename?: 'JobVariationReason',\n  reasonDescription: Scalars['String'],\n  variationReasonId?: Maybe<Scalars['Byte']>,\n};\n\nexport enum JobVariationStatus {\n  Pending = 'Pending',\n  Approved = 'Approved',\n  Rejected = 'Rejected',\n  Reset = 'Reset'\n}\n\nexport type JobWorkOrder = {\n   __typename?: 'JobWorkOrder',\n  approvedDate?: Maybe<Scalars['DateTimeString']>,\n  costCentres?: Maybe<Array<Maybe<JobWorkOrderItemCostCentreGroup>>>,\n  description: Scalars['String'],\n  gst?: Maybe<Scalars['Decimal']>,\n  id: Scalars['ID'],\n  jobWorkOrderId: Scalars['Int'],\n  lineItems?: Maybe<Array<Maybe<JobWorkOrderItem>>>,\n  logdate: Scalars['DateString'],\n  margin?: Maybe<Scalars['Decimal']>,\n  portfolioType?: Maybe<PortfolioType>,\n  quoteStatus?: Maybe<ClaimStatus>,\n  subtotal?: Maybe<Scalars['Decimal']>,\n  supplier?: Maybe<Company>,\n  total?: Maybe<Scalars['Decimal']>,\n};\n\nexport type JobWorkOrderConnection = {\n   __typename?: 'JobWorkOrderConnection',\n  edges?: Maybe<Array<Maybe<JobWorkOrderEdge>>>,\n  items?: Maybe<Array<Maybe<JobWorkOrder>>>,\n  pageInfo: PageInfo,\n  totalCount?: Maybe<Scalars['Int']>,\n};\n\nexport type JobWorkOrderDateInput = {\n  startDate?: Maybe<Scalars['DateString']>,\n  completeDate?: Maybe<Scalars['DateString']>,\n};\n\nexport type JobWorkOrderEdge = {\n   __typename?: 'JobWorkOrderEdge',\n  cursor: Scalars['String'],\n  node?: Maybe<JobWorkOrder>,\n};\n\nexport type JobWorkOrderIndex = {\n  id?: Maybe<Array<Maybe<Scalars['Int']>>>,\n  claimId?: Maybe<Scalars['ID']>,\n  createDateFrom?: Maybe<Scalars['Date']>,\n  createDateTo?: Maybe<Scalars['Date']>,\n  portfolios?: Maybe<Array<Maybe<PortfolioType>>>,\n};\n\nexport type JobWorkOrderItem = {\n   __typename?: 'JobWorkOrderItem',\n  completeDate?: Maybe<Scalars['DateString']>,\n  costCentre?: Maybe<QuoteCostCentre>,\n  costItem?: Maybe<QuoteCostItem>,\n  dimensions?: Maybe<Scalars['String']>,\n  gst?: Maybe<Scalars['Decimal']>,\n  id: Scalars['ID'],\n  jobWorkOrderId: Scalars['Int'],\n  jobWorkOrderItemId: Scalars['Int'],\n  lineDescription: Scalars['String'],\n  location?: Maybe<QuoteCostLocation>,\n  logdate: Scalars['DateString'],\n  margin?: Maybe<Scalars['Decimal']>,\n  marginRate: Scalars['Decimal'],\n  qty: Scalars['Decimal'],\n  rate?: Maybe<Scalars['Decimal']>,\n  startDate?: Maybe<Scalars['DateString']>,\n  subtotal?: Maybe<Scalars['Decimal']>,\n  total?: Maybe<Scalars['Decimal']>,\n  unit?: Maybe<QuoteItemUnit>,\n};\n\nexport type JobWorkOrderItemCostCentreGroup = {\n   __typename?: 'JobWorkOrderItemCostCentreGroup',\n  completeDate?: Maybe<Scalars['DateString']>,\n  costCentre?: Maybe<QuoteCostCentre>,\n  firstLineItemId: Scalars['Int'],\n  id: Scalars['ID'],\n  startDate?: Maybe<Scalars['DateString']>,\n  subtotal?: Maybe<Scalars['Decimal']>,\n};\n\nexport type JobWorkOrderItemCostCentreGroupPayload = {\n   __typename?: 'JobWorkOrderItemCostCentreGroupPayload',\n  fieldErrors?: Maybe<Array<Maybe<EntityFieldError>>>,\n  messages: Array<Scalars['String']>,\n  result?: Maybe<JobWorkOrderItemCostCentreGroup>,\n  success: Scalars['Boolean'],\n};\n\nexport type JobWorkProgressInput = {\n  claimJobId: Scalars['ID'],\n  statusDate?: Maybe<Scalars['Date']>,\n  portfolioType: PortfolioType,\n};\n\n\nexport enum LogLevel {\n  Trace = 'Trace',\n  Debug = 'Debug',\n  Information = 'Information',\n  Warning = 'Warning',\n  Error = 'Error',\n  Critical = 'Critical',\n  None = 'None'\n}\n\nexport type LossAdjusterReportType = {\n   __typename?: 'LossAdjusterReportType',\n  reportTypeId?: Maybe<Scalars['Byte']>,\n  reportTypeName: Scalars['String'],\n};\n\nexport type MakeInitialCallInput = {\n  note?: Maybe<Scalars['String']>,\n};\n\n\nexport type Mutation = {\n   __typename?: 'Mutation',\n  adjusterInitialCall?: Maybe<ClaimJobPayload>,\n  adjusterMakeAppointment?: Maybe<ClaimJobPayload>,\n  claimAcceptRequest?: Maybe<ClaimPortfolioPayload>,\n  claimAddPortfolio?: Maybe<ClaimPortfolioPayload>,\n  claimAwaitingInfo?: Maybe<ClaimPortfolioPayload>,\n  claimCancelAwaitingInfo?: Maybe<ClaimPortfolioPayload>,\n  claimCaseSettleCreate?: Maybe<GeneralPayload>,\n  claimCommunicationAcknoledge?: Maybe<ClaimCommunicationPayload>,\n  claimDeclineRequest?: Maybe<ClaimPortfolioPayload>,\n  claimFinalise?: Maybe<ClaimPortfolioPayload>,\n  claimFollowUp?: Maybe<GeneralPayload>,\n  claimInitialCall?: Maybe<ClaimPortfolioPayload>,\n  claimMakeAppointment?: Maybe<ClaimPortfolioPayload>,\n  claimMakeSafeAppointment?: Maybe<ClaimPortfolioPayload>,\n  claimMakeSafeComplete?: Maybe<ClaimPortfolioPayload>,\n  claimMakeSafeInitialCall?: Maybe<ClaimPortfolioPayload>,\n  claimReallocateScopingSupplier?: Maybe<ClaimPortfolioPayload>,\n  claimRequestCostedScope?: Maybe<ClaimPortfolioPayload>,\n  claimRequestQuotes?: Maybe<ClaimPortfolioPayload>,\n  claimReserveUpdate?: Maybe<GeneralPayload>,\n  claimResetFinalise?: Maybe<ClaimPortfolioPayload>,\n  createClaimCommunication?: Maybe<ClaimCommunicationPayload>,\n  createClaimDocument?: Maybe<ClaimDocumentPayload>,\n  createClaimJob?: Maybe<ClaimJobPayload>,\n  createClaimLossAdjusterDocument?: Maybe<ClaimLossAdjusterDocumentPayload>,\n  createClaimNote?: Maybe<ClaimNotePayload>,\n  createJobContentItems?: Maybe<JobQuoteItemsPayload>,\n  createJobMakeSafeItems?: Maybe<JobMakeSafeItemsPayload>,\n  createJobQuoteItems?: Maybe<JobQuoteItemsPayload>,\n  createJobVariation?: Maybe<JobVariationPayload>,\n  createJobVariationItems?: Maybe<JobVariationItemsPayload>,\n  createJobWorkProgress?: Maybe<JobProgressPayload>,\n  csvProduceForJobQuote?: Maybe<GeneralPayload>,\n  deleteClaimDocument?: Maybe<GeneralPayload>,\n  deleteClaimLossAdjusterDocument?: Maybe<GeneralPayload>,\n  deleteJobMakeSafeItem?: Maybe<GeneralPayload>,\n  deleteJobQuoteItem?: Maybe<GeneralPayload>,\n  deleteJobVariationItem?: Maybe<GeneralPayload>,\n  estimatorCreate?: Maybe<EstimatorPayload>,\n  estimatorUpdate?: Maybe<EstimatorPayload>,\n  feeInvoiceDelete?: Maybe<FeeInvoicePayload>,\n  feeInvoiceUpdate?: Maybe<FeeInvoicePayload>,\n  feeInvoiceUpload?: Maybe<FeeInvoicePayload>,\n  feeItemCreate?: Maybe<FeeItemPayload>,\n  feeItemDelete?: Maybe<FeeItemPayload>,\n  feeItemEdit?: Maybe<FeeItemPayload>,\n  jobContentAuthorise?: Maybe<JobQuotePayload>,\n  jobContentComplete?: Maybe<JobQuotePayload>,\n  jobContentInitialCall?: Maybe<JobQuoteItemPayload>,\n  jobContentRemoveAuthority?: Maybe<JobQuotePayload>,\n  jobMakeSafeQuoteComplete?: Maybe<JobMakeSafePayload>,\n  jobMakeSafeQuoteReset?: Maybe<JobMakeSafePayload>,\n  jobQuoteAuthorise?: Maybe<JobQuotePayload>,\n  jobQuoteComplete?: Maybe<JobQuotePayload>,\n  jobQuoteRecommend?: Maybe<JobQuotePayload>,\n  jobQuoteReset?: Maybe<JobQuotePayload>,\n  jobQuoteReview?: Maybe<JobQuotePayload>,\n  jobVariationAudit?: Maybe<JobVariationPayload>,\n  jobVariationComplete?: Maybe<JobVariationPayload>,\n  pdfProduceForAdjusterDocuments?: Maybe<GeneralPayload>,\n  pdfProduceForClaimDocuments?: Maybe<GeneralPayload>,\n  pdfProduceForJobQuote?: Maybe<GeneralPayload>,\n  pdfProduceForMakeSafe?: Maybe<GeneralPayload>,\n  pdfProduceForSiteReport?: Maybe<GeneralPayload>,\n  pdfProduceForVariation?: Maybe<GeneralPayload>,\n  specialistRequestCreate?: Maybe<SpecialistRequestPayload>,\n  specialistRequestDelete?: Maybe<SpecialistRequestPayload>,\n  specialistRequestEdit?: Maybe<SpecialistRequestPayload>,\n  supervisorCreate?: Maybe<SupervisorPayload>,\n  supervisorUpdate?: Maybe<SupervisorPayload>,\n  updateClaimJob?: Maybe<ClaimJobPayload>,\n  updateJobContentItem?: Maybe<JobQuoteItemPayload>,\n  updateJobMakeSafeItem?: Maybe<JobMakeSafeItemPayload>,\n  updateJobQuoteItem?: Maybe<JobQuoteItemPayload>,\n  updateJobVariationItem?: Maybe<JobVariationItemPayload>,\n  updateJobWorkDate?: Maybe<JobWorkOrderItemCostCentreGroupPayload>,\n  updateSiteReport?: Maybe<GeneralPayload>,\n  userAuthenticateAllServer?: Maybe<Array<Maybe<UserValidation>>>,\n  userLogout?: Maybe<GeneralPayload>,\n  userRenewToken?: Maybe<UserValidation>,\n  userServiceToken?: Maybe<ServiceValidation>,\n  claimReportUpsert: Report,\n  claimReportSubmit: Report,\n  claimReportReset: Report,\n};\n\n\nexport type MutationAdjusterInitialCallArgs = {\n  input?: Maybe<MakeInitialCallInput>,\n  where: ClaimUniqueWhere\n};\n\n\nexport type MutationAdjusterMakeAppointmentArgs = {\n  input: AppointmentInput,\n  where: ClaimUniqueWhere\n};\n\n\nexport type MutationClaimAcceptRequestArgs = {\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationClaimAddPortfolioArgs = {\n  input: AddPortfolioInput,\n  where: EnDataEntityKey\n};\n\n\nexport type MutationClaimAwaitingInfoArgs = {\n  input: AwaitingInfoClaimInputType,\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationClaimCancelAwaitingInfoArgs = {\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationClaimCaseSettleCreateArgs = {\n  input: ClaimCashSettleInput\n};\n\n\nexport type MutationClaimCommunicationAcknoledgeArgs = {\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationClaimDeclineRequestArgs = {\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationClaimFinaliseArgs = {\n  input: FinaliseClaimInput,\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationClaimFollowUpArgs = {\n  input: FollowUpClaimInputType,\n  where: EnDataEntityKey\n};\n\n\nexport type MutationClaimInitialCallArgs = {\n  input?: Maybe<MakeInitialCallInput>,\n  where: EnDataEntityKey\n};\n\n\nexport type MutationClaimMakeAppointmentArgs = {\n  input: AppointmentInput,\n  where: EnDataEntityKey\n};\n\n\nexport type MutationClaimMakeSafeAppointmentArgs = {\n  input: AppointmentInput,\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationClaimMakeSafeCompleteArgs = {\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationClaimMakeSafeInitialCallArgs = {\n  input?: Maybe<MakeInitialCallInput>,\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationClaimReallocateScopingSupplierArgs = {\n  input: ReallocateScopingSupplierInput,\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationClaimRequestCostedScopeArgs = {\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationClaimRequestQuotesArgs = {\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationClaimReserveUpdateArgs = {\n  input: ClaimReserveInput,\n  where: ClaimUniqueWhere\n};\n\n\nexport type MutationClaimResetFinaliseArgs = {\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationCreateClaimCommunicationArgs = {\n  input: ClaimCommunicationCreate\n};\n\n\nexport type MutationCreateClaimDocumentArgs = {\n  input: ClaimDocumentCreate\n};\n\n\nexport type MutationCreateClaimJobArgs = {\n  input: ClaimJobCreate\n};\n\n\nexport type MutationCreateClaimLossAdjusterDocumentArgs = {\n  input: ClaimLossAdjusterDocumentCreate\n};\n\n\nexport type MutationCreateClaimNoteArgs = {\n  input: ClaimNoteCreate\n};\n\n\nexport type MutationCreateJobContentItemsArgs = {\n  input: JobContentItemsCreate\n};\n\n\nexport type MutationCreateJobMakeSafeItemsArgs = {\n  input: JobMakeSafeItemsCreate\n};\n\n\nexport type MutationCreateJobQuoteItemsArgs = {\n  input: JobQuoteItemsCreate\n};\n\n\nexport type MutationCreateJobVariationArgs = {\n  input: JobVariationCreate\n};\n\n\nexport type MutationCreateJobVariationItemsArgs = {\n  input: JobVariationItemsCreate\n};\n\n\nexport type MutationCreateJobWorkProgressArgs = {\n  input: JobWorkProgressInput\n};\n\n\nexport type MutationCsvProduceForJobQuoteArgs = {\n  where: JobQuoteIndex\n};\n\n\nexport type MutationDeleteClaimDocumentArgs = {\n  input: EnDataPortfolioKey\n};\n\n\nexport type MutationDeleteJobMakeSafeItemArgs = {\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationDeleteJobQuoteItemArgs = {\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationDeleteJobVariationItemArgs = {\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationEstimatorCreateArgs = {\n  input: EstimatorCreateInput\n};\n\n\nexport type MutationEstimatorUpdateArgs = {\n  input: EstimatorUpdateInput,\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationFeeInvoiceDeleteArgs = {\n  where: FeeInvoiceUniqueWhere\n};\n\n\nexport type MutationFeeInvoiceUpdateArgs = {\n  input: FeeInvoiceUpdateInput,\n  where: FeeInvoiceUniqueWhere\n};\n\n\nexport type MutationFeeInvoiceUploadArgs = {\n  input: FeeInvoiceUploadInput,\n  where: FeeInvoiceUploadWhere\n};\n\n\nexport type MutationFeeItemCreateArgs = {\n  input: FeeItemCreateInput\n};\n\n\nexport type MutationFeeItemDeleteArgs = {\n  where: FeeItemUniqueWhere\n};\n\n\nexport type MutationFeeItemEditArgs = {\n  input: FeeItemEditInput,\n  where: FeeItemUniqueWhere\n};\n\n\nexport type MutationJobContentAuthoriseArgs = {\n  where: EnDataEntityKey,\n  input: JobContentAuthoriseInput\n};\n\n\nexport type MutationJobContentCompleteArgs = {\n  where: EnDataEntityKey\n};\n\n\nexport type MutationJobContentInitialCallArgs = {\n  input?: Maybe<MakeInitialCallInput>,\n  where: EnDataEntityKey\n};\n\n\nexport type MutationJobContentRemoveAuthorityArgs = {\n  where: EnDataEntityKey,\n  input: JobContentRemoveAuthorityInput\n};\n\n\nexport type MutationJobMakeSafeQuoteCompleteArgs = {\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationJobMakeSafeQuoteResetArgs = {\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationJobQuoteAuthoriseArgs = {\n  where: EnDataPortfolioKey,\n  input?: Maybe<JobQuoteAuthoriseInput>\n};\n\n\nexport type MutationJobQuoteCompleteArgs = {\n  input?: Maybe<JobQuoteCompleteInput>,\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationJobQuoteRecommendArgs = {\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationJobQuoteResetArgs = {\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationJobQuoteReviewArgs = {\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationJobVariationAuditArgs = {\n  input: JobVariationAuditInput,\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationJobVariationCompleteArgs = {\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationPdfProduceForAdjusterDocumentsArgs = {\n  where: ClaimItemFilter\n};\n\n\nexport type MutationPdfProduceForClaimDocumentsArgs = {\n  where: ClaimItemFilter\n};\n\n\nexport type MutationPdfProduceForJobQuoteArgs = {\n  where: JobQuoteIndex\n};\n\n\nexport type MutationPdfProduceForMakeSafeArgs = {\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationPdfProduceForSiteReportArgs = {\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationPdfProduceForVariationArgs = {\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationSpecialistRequestCreateArgs = {\n  input: SpecialistRequestCreateInput\n};\n\n\nexport type MutationSpecialistRequestDeleteArgs = {\n  where: SpecialistRequestUniqueWhere\n};\n\n\nexport type MutationSpecialistRequestEditArgs = {\n  where: SpecialistRequestUniqueWhere,\n  input: SpecialistRequestEditInput\n};\n\n\nexport type MutationSupervisorCreateArgs = {\n  input: SupervisorCreateInput\n};\n\n\nexport type MutationSupervisorUpdateArgs = {\n  input: SupervisorUpdateInput,\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationUpdateClaimJobArgs = {\n  input: ClaimJobInput,\n  where: EnDataEntityKey\n};\n\n\nexport type MutationUpdateJobContentItemArgs = {\n  input: JobQuoteItemUpdate,\n  where: EnDataEntityKey\n};\n\n\nexport type MutationUpdateJobMakeSafeItemArgs = {\n  input: QuoteItemUpdate,\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationUpdateJobQuoteItemArgs = {\n  input: QuoteItemUpdate,\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationUpdateJobVariationItemArgs = {\n  input: QuoteItemUpdate,\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationUpdateJobWorkDateArgs = {\n  input: JobWorkOrderDateInput,\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationUpdateSiteReportArgs = {\n  input: SiteReportInput,\n  where: EnDataPortfolioKey\n};\n\n\nexport type MutationUserAuthenticateAllServerArgs = {\n  input: UserCredential\n};\n\n\nexport type MutationUserServiceTokenArgs = {\n  input: ServiceInput\n};\n\n\nexport type MutationClaimReportUpsertArgs = {\n  claimId: Scalars['ID'],\n  data: Scalars['Json']\n};\n\n\nexport type MutationClaimReportSubmitArgs = {\n  claimId: Scalars['ID']\n};\n\n\nexport type MutationClaimReportResetArgs = {\n  claimId: Scalars['ID']\n};\n\nexport type PageInfo = {\n   __typename?: 'PageInfo',\n  endCursor?: Maybe<Scalars['String']>,\n  hasNextPage: Scalars['Boolean'],\n  hasPreviousPage: Scalars['Boolean'],\n  startCursor?: Maybe<Scalars['String']>,\n};\n\nexport type PaymentMethod = {\n   __typename?: 'PaymentMethod',\n  id: Scalars['ID'],\n  name: Scalars['String'],\n  paymentMethodId: Scalars['Int'],\n};\n\nexport type PaymentMethodWhere = {\n  claimId: Scalars['ID'],\n};\n\nexport type PaymentType = {\n   __typename?: 'PaymentType',\n  id: Scalars['ID'],\n  name: Scalars['String'],\n  paymentTypeId: Scalars['Int'],\n};\n\nexport type PaymentTypeWhere = {\n  claimId: Scalars['ID'],\n  claimPortfolioType: PortfolioType,\n};\n\n\n\nexport type PolicyCover = {\n   __typename?: 'PolicyCover',\n  policyCoverId?: Maybe<Scalars['Short']>,\n  policyCoverName: Scalars['String'],\n};\n\nexport type PolicyType = {\n   __typename?: 'PolicyType',\n  policyTypeId?: Maybe<Scalars['Short']>,\n  policyTypeName: Scalars['String'],\n};\n\nexport enum PortfolioType {\n  Building = 'Building',\n  Contents = 'Contents',\n  Restoration = 'Restoration'\n}\n\nexport type PrivilegeAction = {\n   __typename?: 'PrivilegeAction',\n  nodeName: Scalars['String'],\n  privilegeCode: Scalars['String'],\n};\n\nexport type PrivilegeMenu = {\n   __typename?: 'PrivilegeMenu',\n  nodeName: Scalars['String'],\n  pages?: Maybe<Array<Maybe<PrivilegePage>>>,\n  privilegeCode: Scalars['String'],\n};\n\nexport type PrivilegePage = {\n   __typename?: 'PrivilegePage',\n  actions?: Maybe<Array<Maybe<PrivilegeAction>>>,\n  nodeName: Scalars['String'],\n  privilegeCode: Scalars['String'],\n};\n\nexport type Query = {\n   __typename?: 'Query',\n  _claimCategories: Array<Maybe<SelectOption>>,\n  _form?: Maybe<Form>,\n  _report?: Maybe<Report>,\n  _states: Array<Maybe<SelectOption>>,\n  claimCommuications?: Maybe<ClaimCommunicationConnection>,\n  claimDocuments?: Maybe<ClaimDocumentConnection>,\n  claimFilterOptions?: Maybe<Array<Maybe<FilterOption>>>,\n  claimFilters?: Maybe<Array<Maybe<FilterElement>>>,\n  claimJob?: Maybe<ClaimJob>,\n  claimJobs?: Maybe<ClaimJobConnection>,\n  claimLossAdjusterDocuments?: Maybe<ClaimLossAdjusterDocumentConnection>,\n  claimNextStep?: Maybe<Array<Maybe<ClaimJobStatusInfo>>>,\n  claimNotes?: Maybe<ClaimNoteConnection>,\n  claimParticipants?: Maybe<Array<Maybe<Company>>>,\n  communicationFilters?: Maybe<Array<Maybe<FilterElement>>>,\n  company?: Maybe<CompanyProfile>,\n  currentUser?: Maybe<AuthenticatedUser>,\n  dashboardFilters?: Maybe<Array<Maybe<FilterElement>>>,\n  dashboardWidgets?: Maybe<Array<Maybe<WidgetGraphType>>>,\n  dashboards?: Maybe<Array<Maybe<Dashboard>>>,\n  estimators?: Maybe<EstimatorConnection>,\n  feeCategories?: Maybe<Array<Maybe<FeeCategory>>>,\n  feeInvoice?: Maybe<FeeInvoice>,\n  feeInvoiceStatus?: Maybe<Array<Maybe<FeeInvoiceStatus>>>,\n  feeItem?: Maybe<FeeItem>,\n  feeItems?: Maybe<Array<Maybe<FeeItem>>>,\n  feePortfolios?: Maybe<Array<Maybe<FeePortfolio>>>,\n  internalAssessors?: Maybe<InternalAssesorConnection>,\n  jobMakeSafes?: Maybe<JobMakeSafeConnection>,\n  jobQuotes?: Maybe<JobQuoteConnection>,\n  jobVariationReasons?: Maybe<Array<Maybe<JobVariationReason>>>,\n  jobVariations?: Maybe<JobVariationConnection>,\n  jobWorkOrders?: Maybe<JobWorkOrderConnection>,\n  jobWorkProgresses?: Maybe<JobProgressConnection>,\n  me?: Maybe<User>,\n  paymentMethods?: Maybe<Array<Maybe<PaymentMethod>>>,\n  paymentTypes?: Maybe<Array<Maybe<PaymentType>>>,\n  quoteCostCentres?: Maybe<QuoteCostCentreConnection>,\n  quoteCostItems?: Maybe<QuoteCostItemConnection>,\n  quoteCostLocations?: Maybe<QuoteCostLocationConnection>,\n  reportingClaimJobGeneral?: Maybe<ClaimJobGeneralReportConnection>,\n  specialistCategories?: Maybe<Array<Maybe<SpecialistCategory>>>,\n  specialistRequests?: Maybe<Array<Maybe<SpecialistRequest>>>,\n  specialists?: Maybe<Array<Maybe<Company>>>,\n  supervisors?: Maybe<SupervisorConnection>,\n};\n\n\nexport type Query_FormArgs = {\n  id: Scalars['ID']\n};\n\n\nexport type Query_ReportArgs = {\n  claimId: Scalars['ID']\n};\n\n\nexport type QueryClaimCommuicationsArgs = {\n  after?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  where?: Maybe<CommunicationFilter>\n};\n\n\nexport type QueryClaimDocumentsArgs = {\n  after?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  where?: Maybe<ClaimItemFilter>\n};\n\n\nexport type QueryClaimFilterOptionsArgs = {\n  where?: Maybe<ClaimJobFilter>\n};\n\n\nexport type QueryClaimJobArgs = {\n  where: EnDataEntityKey\n};\n\n\nexport type QueryClaimJobsArgs = {\n  after?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  where?: Maybe<ClaimJobFilter>\n};\n\n\nexport type QueryClaimLossAdjusterDocumentsArgs = {\n  after?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  where?: Maybe<ClaimItemFilter>\n};\n\n\nexport type QueryClaimNextStepArgs = {\n  where: EnDataEntityKey\n};\n\n\nexport type QueryClaimNotesArgs = {\n  after?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  where?: Maybe<ClaimItemFilter>\n};\n\n\nexport type QueryClaimParticipantsArgs = {\n  where?: Maybe<ClaimParticipantIndex>\n};\n\n\nexport type QueryCompanyArgs = {\n  where: EnDataPortfolioKey\n};\n\n\nexport type QueryDashboardWidgetsArgs = {\n  where: DashboardWidgetIndex\n};\n\n\nexport type QueryEstimatorsArgs = {\n  after?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  where?: Maybe<SupplierManagerIndex>\n};\n\n\nexport type QueryFeeCategoriesArgs = {\n  where: FeeCategoryWhere\n};\n\n\nexport type QueryFeeInvoiceArgs = {\n  where: FeeInvoiceUniqueWhere\n};\n\n\nexport type QueryFeeInvoiceStatusArgs = {\n  where: FeeInvoiceStatusWhere\n};\n\n\nexport type QueryFeeItemArgs = {\n  where: FeeItemUniqueWhere\n};\n\n\nexport type QueryFeeItemsArgs = {\n  where: FeeItemWhere\n};\n\n\nexport type QueryFeePortfoliosArgs = {\n  where: ClaimPortfoliosWhere\n};\n\n\nexport type QueryInternalAssessorsArgs = {\n  after?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  where?: Maybe<SupplierManagerIndex>\n};\n\n\nexport type QueryJobMakeSafesArgs = {\n  after?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  where: JobMakeSafeIndex\n};\n\n\nexport type QueryJobQuotesArgs = {\n  after?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  where: JobQuoteIndex\n};\n\n\nexport type QueryJobVariationsArgs = {\n  after?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  where: JobVariationIndex\n};\n\n\nexport type QueryJobWorkOrdersArgs = {\n  after?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  where: JobWorkOrderIndex\n};\n\n\nexport type QueryJobWorkProgressesArgs = {\n  after?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  where: EnDataPortfolioKey\n};\n\n\nexport type QueryPaymentMethodsArgs = {\n  where: PaymentMethodWhere\n};\n\n\nexport type QueryPaymentTypesArgs = {\n  where: PaymentTypeWhere\n};\n\n\nexport type QueryQuoteCostCentresArgs = {\n  after?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  where: QuoteCostCentreIndex\n};\n\n\nexport type QueryQuoteCostItemsArgs = {\n  after?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  where: QuoteCostItemIndex\n};\n\n\nexport type QueryQuoteCostLocationsArgs = {\n  after?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  where: QuoteCostLocationIndex\n};\n\n\nexport type QueryReportingClaimJobGeneralArgs = {\n  after?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  where?: Maybe<CaseReportIndex>\n};\n\n\nexport type QuerySpecialistCategoriesArgs = {\n  where: SpecialistCategoryWhere\n};\n\n\nexport type QuerySpecialistRequestsArgs = {\n  where: SpecialistRequestWhere\n};\n\n\nexport type QuerySpecialistsArgs = {\n  where: SpecialistWhere\n};\n\n\nexport type QuerySupervisorsArgs = {\n  after?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  where?: Maybe<SupplierManagerIndex>\n};\n\nexport type QuoteCostCentre = {\n   __typename?: 'QuoteCostCentre',\n  costCentreId: Scalars['Int'],\n  costCentreName: Scalars['String'],\n  costType?: Maybe<QuoteCostType>,\n  directSupplier: Scalars['Boolean'],\n  id: Scalars['ID'],\n};\n\nexport type QuoteCostCentreConnection = {\n   __typename?: 'QuoteCostCentreConnection',\n  edges?: Maybe<Array<Maybe<QuoteCostCentreEdge>>>,\n  items?: Maybe<Array<Maybe<QuoteCostCentre>>>,\n  pageInfo: PageInfo,\n  totalCount?: Maybe<Scalars['Int']>,\n};\n\nexport type QuoteCostCentreEdge = {\n   __typename?: 'QuoteCostCentreEdge',\n  cursor: Scalars['String'],\n  node?: Maybe<QuoteCostCentre>,\n};\n\nexport type QuoteCostCentreIndex = {\n  insurerId?: Maybe<Scalars['Int']>,\n  costType?: Maybe<QuoteCostType>,\n  portfolioType: PortfolioType,\n};\n\nexport type QuoteCostItem = {\n   __typename?: 'QuoteCostItem',\n  costItemId: Scalars['Int'],\n  id: Scalars['ID'],\n  itemDescription: Scalars['String'],\n  units?: Maybe<Array<Maybe<QuoteItemUnit>>>,\n};\n\nexport type QuoteCostItemConnection = {\n   __typename?: 'QuoteCostItemConnection',\n  edges?: Maybe<Array<Maybe<QuoteCostItemEdge>>>,\n  items?: Maybe<Array<Maybe<QuoteCostItem>>>,\n  pageInfo: PageInfo,\n  totalCount?: Maybe<Scalars['Int']>,\n};\n\nexport type QuoteCostItemEdge = {\n   __typename?: 'QuoteCostItemEdge',\n  cursor: Scalars['String'],\n  node?: Maybe<QuoteCostItem>,\n};\n\nexport type QuoteCostItemIndex = {\n  costCentreId: Scalars['Int'],\n  portfolioType: PortfolioType,\n};\n\nexport type QuoteCostLocation = {\n   __typename?: 'QuoteCostLocation',\n  costLocationId: Scalars['Int'],\n  id: Scalars['ID'],\n  locationName: Scalars['String'],\n};\n\nexport type QuoteCostLocationConnection = {\n   __typename?: 'QuoteCostLocationConnection',\n  edges?: Maybe<Array<Maybe<QuoteCostLocationEdge>>>,\n  items?: Maybe<Array<Maybe<QuoteCostLocation>>>,\n  pageInfo: PageInfo,\n  totalCount?: Maybe<Scalars['Int']>,\n};\n\nexport type QuoteCostLocationEdge = {\n   __typename?: 'QuoteCostLocationEdge',\n  cursor: Scalars['String'],\n  node?: Maybe<QuoteCostLocation>,\n};\n\nexport type QuoteCostLocationIndex = {\n  portfolioType: PortfolioType,\n};\n\nexport enum QuoteCostType {\n  UnDefined = 'UnDefined',\n  Labour = 'Labour',\n  Material = 'Material'\n}\n\nexport type QuoteItemCreate = {\n  costCentreId: Scalars['Int'],\n  costItemId: Scalars['Int'],\n  lineDescription: Scalars['String'],\n  locationId: Scalars['Int'],\n  dimensions?: Maybe<Scalars['String']>,\n  qty: Scalars['Decimal'],\n  unitId: Scalars['Int'],\n  rate: Scalars['Decimal'],\n  marginRate: Scalars['Decimal'],\n  gst?: Maybe<Scalars['Decimal']>,\n};\n\nexport type QuoteItemUnit = {\n   __typename?: 'QuoteItemUnit',\n  defaultValue: Scalars['Decimal'],\n  unitId: Scalars['Int'],\n  unitName: Scalars['String'],\n};\n\nexport type QuoteItemUpdate = {\n  costCentreId?: Maybe<Scalars['Int']>,\n  costItemId?: Maybe<Scalars['Int']>,\n  locationId?: Maybe<Scalars['Int']>,\n  dimensions?: Maybe<Scalars['String']>,\n  lineDescription?: Maybe<Scalars['String']>,\n  unitId?: Maybe<Scalars['Int']>,\n  qty?: Maybe<Scalars['Decimal']>,\n  rate?: Maybe<Scalars['Decimal']>,\n  marginRate?: Maybe<Scalars['Decimal']>,\n  gst?: Maybe<Scalars['Decimal']>,\n};\n\nexport enum QuoteRequestStatus {\n  NewClaims = 'NewClaims',\n  OfferScopeAcc = 'OfferScopeAcc',\n  InitialCallMade = 'InitialCallMade',\n  AppointmentMade = 'AppointmentMade',\n  AwaitingInfo = 'AwaitingInfo',\n  AwaitingInfoContents = 'AwaitingInfoContents',\n  ClaimFinalised = 'ClaimFinalised',\n  JobAuthorised = 'JobAuthorised',\n  JobLost = 'JobLost',\n  AdditionalItems = 'AdditionalItems',\n  WaitingScope = 'WaitingScope',\n  WaitingQuotes = 'WaitingQuotes',\n  QuoteSubmitted = 'QuoteSubmitted',\n  WaitingResult = 'WaitingResult'\n}\n\nexport enum QuoteRequestType {\n  UnDefined = 'UnDefined',\n  Scoping = 'Scoping',\n  DesktopQuoting = 'DesktopQuoting'\n}\n\nexport type ReallocateScopingSupplierInput = {\n  supplierId: Scalars['Int'],\n  availableForQuoting: Scalars['Boolean'],\n  note?: Maybe<Scalars['String']>,\n};\n\nexport type Report = {\n   __typename?: 'Report',\n  id: Scalars['ID'],\n  data?: Maybe<Scalars['Json']>,\n  status: ReportStatus,\n};\n\nexport enum ReportStatus {\n  Reporting = 'REPORTING',\n  Reported = 'REPORTED'\n}\n\nexport enum RequestCategory {\n  All = 'All',\n  Scoping = 'Scoping',\n  DesktopQuoting = 'DesktopQuoting',\n  Authorised = 'Authorised',\n  Lost = 'Lost'\n}\n\n\nexport type SelectField = Field & {\n   __typename?: 'SelectField',\n  id: Scalars['ID'],\n  order?: Maybe<Scalars['Int']>,\n  grid?: Maybe<Scalars['Grid']>,\n  label?: Maybe<Scalars['String']>,\n  name?: Maybe<Scalars['String']>,\n  options?: Maybe<Array<SelectFieldOption>>,\n};\n\nexport type SelectFieldOption = {\n   __typename?: 'SelectFieldOption',\n  id: Scalars['ID'],\n  label: Scalars['String'],\n  value: Scalars['String'],\n};\n\nexport type SelectOption = {\n   __typename?: 'SelectOption',\n  label?: Maybe<Scalars['String']>,\n  value: Scalars['ID'],\n};\n\nexport enum Server {\n  All = 'ALL',\n  Endata = 'ENDATA',\n  Iag = 'IAG',\n  Alz = 'ALZ',\n  Rac = 'RAC',\n  Ract = 'RACT',\n  Qbe = 'QBE',\n  Aig = 'AIG',\n  Wbc = 'WBC',\n  Testuat_1 = 'TESTUAT_1',\n  Testuat_2 = 'TESTUAT_2',\n  Tsetpvt = 'TSETPVT'\n}\n\nexport type ServiceInput = {\n  serviceId: Scalars['Int'],\n};\n\nexport type ServiceValidation = {\n   __typename?: 'ServiceValidation',\n  server?: Maybe<Server>,\n  serviceToken: Scalars['String'],\n};\n\n\nexport type SiteCladdingType = {\n   __typename?: 'SiteCladdingType',\n  claddingTypeId: Scalars['Int'],\n  claddingTypeName: Scalars['String'],\n  id: Scalars['ID'],\n};\n\nexport type SiteDwellingAge = {\n   __typename?: 'SiteDwellingAge',\n  dwellingAgeId: Scalars['Int'],\n  dwellingAgeName: Scalars['String'],\n  id: Scalars['ID'],\n};\n\nexport type SiteDwellingType = {\n   __typename?: 'SiteDwellingType',\n  dwellingTypeId: Scalars['Int'],\n  dwellingTypeName: Scalars['String'],\n  id: Scalars['ID'],\n};\n\nexport type SiteFoundationType = {\n   __typename?: 'SiteFoundationType',\n  foundationTypeId: Scalars['Int'],\n  foundationTypeName: Scalars['String'],\n  id: Scalars['ID'],\n};\n\nexport type SiteHouseType = {\n   __typename?: 'SiteHouseType',\n  houseTypeId: Scalars['Int'],\n  houseTypeName: Scalars['String'],\n  id: Scalars['ID'],\n};\n\nexport type SiteIsAClaim = {\n   __typename?: 'SiteIsAClaim',\n  id: Scalars['ID'],\n  isAClaimId: Scalars['Int'],\n  isAClaimName: Scalars['String'],\n};\n\nexport type SiteReportInput = {\n  claddingTypeId?: Maybe<Scalars['Int']>,\n  dwellingAgeId?: Maybe<Scalars['Int']>,\n  dwellingTypeId?: Maybe<Scalars['Int']>,\n  foundationTypeId?: Maybe<Scalars['Int']>,\n  houseTypeId?: Maybe<Scalars['Int']>,\n  isAClaimId?: Maybe<Scalars['Int']>,\n  roofTypeId?: Maybe<Scalars['Int']>,\n  suppervisorId?: Maybe<Scalars['Int']>,\n  estimatorId?: Maybe<Scalars['Int']>,\n  claimrecommendationId?: Maybe<Scalars['Int']>,\n  reportDate?: Maybe<Scalars['DateString']>,\n  emergencyMakeSafeWorks?: Maybe<Scalars['Int']>,\n  sumInsuredAdequate?: Maybe<Scalars['Int']>,\n  siteReportDescription?: Maybe<Scalars['String']>,\n};\n\nexport type SiteRoofType = {\n   __typename?: 'SiteRoofType',\n  id: Scalars['ID'],\n  roofTypeId: Scalars['Int'],\n  roofTypeName: Scalars['String'],\n};\n\nexport type SpecialistCategory = {\n   __typename?: 'SpecialistCategory',\n  id: Scalars['ID'],\n  name: Scalars['String'],\n  specialistCategoryId: Scalars['Int'],\n};\n\nexport type SpecialistCategoryWhere = {\n  claimId: Scalars['ID'],\n  specialistId?: Maybe<Scalars['Int']>,\n};\n\nexport type SpecialistRequest = {\n   __typename?: 'SpecialistRequest',\n  actions: Array<Maybe<Action>>,\n  id: Scalars['ID'],\n  requestedDate?: Maybe<Scalars['DateString']>,\n  specialist?: Maybe<Company>,\n  specialistCategory?: Maybe<SpecialistCategory>,\n  specialistRequestId: Scalars['Int'],\n};\n\nexport type SpecialistRequestCreateInput = {\n  claimId: Scalars['ID'],\n  specialistCategoryId: Scalars['Int'],\n  specialistId: Scalars['Int'],\n};\n\nexport type SpecialistRequestEditInput = {\n  specialistCategoryId: Scalars['Int'],\n};\n\nexport type SpecialistRequestPayload = {\n   __typename?: 'SpecialistRequestPayload',\n  fieldErrors?: Maybe<Array<Maybe<EntityFieldError>>>,\n  messages: Array<Scalars['String']>,\n  result?: Maybe<SpecialistRequest>,\n  success: Scalars['Boolean'],\n};\n\nexport type SpecialistRequestUniqueWhere = {\n  specialistRequestId: Scalars['Int'],\n};\n\nexport type SpecialistRequestWhere = {\n  claimId: Scalars['ID'],\n};\n\nexport type SpecialistWhere = {\n  claimId: Scalars['ID'],\n  specialistCategoryId: Scalars['Int'],\n};\n\nexport enum State {\n  Qld = 'QLD',\n  Nsw = 'NSW',\n  Vic = 'VIC',\n  Wa = 'WA',\n  Act = 'ACT',\n  Sa = 'SA',\n  Tas = 'TAS',\n  Nt = 'NT'\n}\n\nexport type Supervisor = {\n   __typename?: 'Supervisor',\n  companyId: Scalars['Int'],\n  id: Scalars['ID'],\n  initials?: Maybe<Scalars['String']>,\n  name?: Maybe<Scalars['String']>,\n  phone?: Maybe<Scalars['String']>,\n  portfolioType?: Maybe<PortfolioType>,\n  suppervisorId: Scalars['Int'],\n};\n\nexport type SupervisorConnection = {\n   __typename?: 'SupervisorConnection',\n  edges?: Maybe<Array<Maybe<SupervisorEdge>>>,\n  items?: Maybe<Array<Maybe<Supervisor>>>,\n  pageInfo: PageInfo,\n  totalCount?: Maybe<Scalars['Int']>,\n};\n\nexport type SupervisorCreateInput = {\n  name: Scalars['String'],\n  initials?: Maybe<Scalars['String']>,\n  phone?: Maybe<Scalars['String']>,\n  companyId?: Maybe<Scalars['Int']>,\n  portfolioType?: Maybe<PortfolioType>,\n};\n\nexport type SupervisorEdge = {\n   __typename?: 'SupervisorEdge',\n  cursor: Scalars['String'],\n  node?: Maybe<Supervisor>,\n};\n\nexport type SupervisorPayload = {\n   __typename?: 'SupervisorPayload',\n  fieldErrors?: Maybe<Array<Maybe<EntityFieldError>>>,\n  messages: Array<Scalars['String']>,\n  result?: Maybe<Supervisor>,\n  success: Scalars['Boolean'],\n};\n\nexport type SupervisorUpdateInput = {\n  name?: Maybe<Scalars['String']>,\n  initials?: Maybe<Scalars['String']>,\n  phone?: Maybe<Scalars['String']>,\n};\n\nexport type SupplierManagerIndex = {\n  companyId?: Maybe<Scalars['Int']>,\n  portfolioType?: Maybe<PortfolioType>,\n};\n\nexport enum SupplierStatusFilter {\n  RequestedAndAvailable = 'RequestedAndAvailable',\n  RequestedOnly = 'RequestedOnly',\n  AcceptedOnly = 'AcceptedOnly'\n}\n\nexport enum SupplierTypeFilter {\n  ManagerAndSupplier = 'ManagerAndSupplier',\n  Supplier = 'Supplier',\n  SupplierExcludeScoping = 'SupplierExcludeScoping'\n}\n\nexport type SwitchField = Field & {\n   __typename?: 'SwitchField',\n  id: Scalars['ID'],\n  order?: Maybe<Scalars['Int']>,\n  grid?: Maybe<Scalars['Grid']>,\n  label?: Maybe<Scalars['String']>,\n  name?: Maybe<Scalars['String']>,\n};\n\nexport type TextAreaField = Field & {\n   __typename?: 'TextAreaField',\n  id: Scalars['ID'],\n  order?: Maybe<Scalars['Int']>,\n  grid?: Maybe<Scalars['Grid']>,\n  label?: Maybe<Scalars['String']>,\n  name?: Maybe<Scalars['String']>,\n  rows?: Maybe<Scalars['Int']>,\n  rowsMax?: Maybe<Scalars['Int']>,\n};\n\nexport type TextField = Field & {\n   __typename?: 'TextField',\n  id: Scalars['ID'],\n  order?: Maybe<Scalars['Int']>,\n  grid?: Maybe<Scalars['Grid']>,\n  label?: Maybe<Scalars['String']>,\n  name?: Maybe<Scalars['String']>,\n};\n\nexport type User = {\n   __typename?: 'User',\n  company?: Maybe<CompanyProfile>,\n  disabled: Scalars['Boolean'],\n  hasMultipleAccess: Scalars['Boolean'],\n  permitedCompanyIDs: Array<Scalars['Int']>,\n  preference?: Maybe<UserPreference>,\n  privileges?: Maybe<UserPrivileges>,\n  userEmail?: Maybe<Scalars['String']>,\n  userId: Scalars['Int'],\n  userName: Scalars['String'],\n  userPhone?: Maybe<Scalars['String']>,\n  userRole?: Maybe<AccessRole>,\n};\n\nexport type UserCredential = {\n  userLogin: Scalars['String'],\n  password: Scalars['String'],\n};\n\nexport type UserPreference = {\n   __typename?: 'UserPreference',\n  applicationFont: Scalars['String'],\n  applicationLanguage: Scalars['String'],\n  applicationTheme: Scalars['String'],\n  applicationTimeZone?: Maybe<Scalars['Byte']>,\n};\n\nexport type UserPrivileges = {\n   __typename?: 'UserPrivileges',\n  menus?: Maybe<Array<Maybe<PrivilegeMenu>>>,\n};\n\nexport enum UserType {\n  Administrator = 'Administrator',\n  Builder = 'Builder',\n  Restorer = 'Restorer',\n  ContentSupplier = 'ContentSupplier'\n}\n\nexport type UserValidation = {\n   __typename?: 'UserValidation',\n  accessToken: Scalars['String'],\n  refreshToken: Scalars['String'],\n  server?: Maybe<Server>,\n  token: Scalars['String'],\n  user?: Maybe<User>,\n};\n\nexport type WidgetData = {\n   __typename?: 'WidgetData',\n  dataSetName: Scalars['String'],\n  internalFilterName?: Maybe<Scalars['String']>,\n  legend?: Maybe<Scalars['String']>,\n  valueDisplay?: Maybe<DataDisplay>,\n  valueGroup?: Maybe<Scalars['Byte']>,\n  values?: Maybe<Array<Maybe<Scalars['Float']>>>,\n  valueSense?: Maybe<DataSense>,\n  valueUnit?: Maybe<DataUnit>,\n};\n\nexport type WidgetGraphType = {\n   __typename?: 'WidgetGraphType',\n  data?: Maybe<Array<Maybe<WidgetData>>>,\n  description?: Maybe<Scalars['String']>,\n  extended: Scalars['Boolean'],\n  id: Scalars['ID'],\n  labels: Array<Scalars['String']>,\n  title: Scalars['String'],\n  viewName?: Maybe<WidgetViewName>,\n  widgetId: Scalars['Int'],\n  width?: Maybe<Scalars['Byte']>,\n};\n\nexport enum WidgetViewName {\n  UnDefined = 'UnDefined',\n  DataSingle = 'DataSingle',\n  DataDouble = 'DataDouble',\n  ChartJs = 'ChartJs',\n  KpiGear = 'KPIGear',\n  ListData = 'ListData',\n  ListCheck = 'ListCheck',\n  Messages = 'Messages',\n  JobTasks = 'JobTasks'\n}\n\nexport type CommunicationmenuQueryVariables = {};\n\n\nexport type CommunicationmenuQuery = (\n  { __typename?: 'Query' }\n  & { communications: Maybe<(\n    { __typename?: 'ClaimCommunicationConnection' }\n    & Pick<ClaimCommunicationConnection, 'totalCount'>\n    & { edges: Maybe<Array<Maybe<(\n      { __typename?: 'ClaimCommunicationEdge' }\n      & { node: Maybe<(\n        { __typename?: 'ClaimCommunication' }\n        & Pick<ClaimCommunication, 'id' | 'claimRef' | 'message'>\n      )> }\n    )>>> }\n  )> }\n);\n\nexport type ClaimDetailsCardFragmentFragment = (\n  { __typename?: 'Query' }\n  & { me: Maybe<(\n    { __typename?: 'AuthenticatedUser' }\n    & Pick<AuthenticatedUser, 'userType'>\n  )>, managers: Maybe<Array<Maybe<(\n    { __typename?: 'FilterOption' }\n    & Pick<FilterOption, 'value'>\n    & { label: FilterOption['name'] }\n  )>>>, adjusters: Maybe<Array<Maybe<(\n    { __typename?: 'FilterOption' }\n    & Pick<FilterOption, 'value'>\n    & { label: FilterOption['name'] }\n  )>>>, builders: Maybe<Array<Maybe<(\n    { __typename?: 'FilterOption' }\n    & Pick<FilterOption, 'value'>\n    & { label: FilterOption['name'] }\n  )>>>, restorers: Maybe<Array<Maybe<(\n    { __typename?: 'FilterOption' }\n    & Pick<FilterOption, 'value'>\n    & { label: FilterOption['name'] }\n  )>>>, eventTypes: Maybe<Array<Maybe<(\n    { __typename?: 'FilterOption' }\n    & Pick<FilterOption, 'value'>\n    & { label: FilterOption['name'] }\n  )>>>, catCodes: Maybe<Array<Maybe<(\n    { __typename?: 'FilterOption' }\n    & Pick<FilterOption, 'value'>\n    & { label: FilterOption['name'] }\n  )>>>, policyTypes: Maybe<Array<Maybe<(\n    { __typename?: 'FilterOption' }\n    & Pick<FilterOption, 'value'>\n    & { label: FilterOption['name'] }\n  )>>>, policyCovers: Maybe<Array<Maybe<(\n    { __typename?: 'FilterOption' }\n    & Pick<FilterOption, 'value'>\n    & { label: FilterOption['name'] }\n  )>>>, internalAssessors: Maybe<Array<Maybe<(\n    { __typename?: 'FilterOption' }\n    & Pick<FilterOption, 'value'>\n    & { label: FilterOption['name'] }\n  )>>> }\n);\n\nexport type ClaimDetailsCardMetaFragmentFragment = (\n  { __typename?: 'CompanyProfile' }\n  & Pick<CompanyProfile, 'contentsref' | 'quickrepair' | 'policyTypeSuppliersView' | 'policyCoverSuppliersView' | 'isToProvideSiteReportView' | 'useInternalAssessor' | 'cm2nd' | 'enableMultipleRisks'>\n);\n\nexport type CustomerDetailsCardFragmentFragment = (\n  { __typename?: 'Query' }\n  & { catCodes: Maybe<Array<Maybe<(\n    { __typename?: 'FilterOption' }\n    & Pick<FilterOption, 'value'>\n    & { label: FilterOption['name'] }\n  )>>> }\n);\n\nexport type CustomerDetailsCardMetaFragmentFragment = (\n  { __typename?: 'CompanyProfile' }\n  & Pick<CompanyProfile, 'companyName' | 'policyTypeSuppliersView' | 'insrefnumLength' | 'removeHabitableAsbestos' | 'setupcustomerlogin' | 'hideCategoryOfClaim'>\n);\n\nexport type QuotingBuildersCardFragmentFragment = (\n  { __typename?: 'Query' }\n  & { builders: Maybe<Array<Maybe<(\n    { __typename?: 'FilterOption' }\n    & Pick<FilterOption, 'value'>\n    & { label: FilterOption['name'] }\n  )>>> }\n);\n\nexport type QuotingBuildersCardMetaFragmentFragment = (\n  { __typename?: 'CompanyProfile' }\n  & Pick<CompanyProfile, 'quotesperclaim'>\n);\n\nexport type QuotingRestorersCardFragmentFragment = (\n  { __typename?: 'Query' }\n  & { restorers: Maybe<Array<Maybe<(\n    { __typename?: 'FilterOption' }\n    & Pick<FilterOption, 'value'>\n    & { label: FilterOption['name'] }\n  )>>> }\n);\n\nexport type AddClaimMutationVariables = {\n  input: ClaimJobCreate\n};\n\n\nexport type AddClaimMutation = (\n  { __typename?: 'Mutation' }\n  & { createClaimJob: Maybe<(\n    { __typename?: 'ClaimJobPayload' }\n    & Pick<ClaimJobPayload, 'success' | 'messages'>\n    & { fieldErrors: Maybe<Array<Maybe<(\n      { __typename?: 'EntityFieldError' }\n      & Pick<EntityFieldError, 'fieldName' | 'level' | 'message'>\n    )>>>, result: Maybe<(\n      { __typename?: 'ClaimJob' }\n      & Pick<ClaimJob, 'id' | 'claimId'>\n    )> }\n  )> }\n);\n\nexport type AddClaimRootQueryVariables = {\n  companyWhere: EnDataPortfolioKey,\n  managersWhere?: Maybe<ClaimJobFilter>,\n  adjustersWhere?: Maybe<ClaimJobFilter>,\n  buildersWhere?: Maybe<ClaimJobFilter>,\n  restorersWhere?: Maybe<ClaimJobFilter>,\n  eventTypeWhere?: Maybe<ClaimJobFilter>,\n  catCodesWhere?: Maybe<ClaimJobFilter>,\n  policyTypesWhere?: Maybe<ClaimJobFilter>,\n  policyCoversWhere?: Maybe<ClaimJobFilter>,\n  internalAssessorsWhere?: Maybe<ClaimJobFilter>\n};\n\n\nexport type AddClaimRootQuery = (\n  { __typename?: 'Query' }\n  & { company: Maybe<(\n    { __typename?: 'CompanyProfile' }\n    & CustomerDetailsCardMetaFragmentFragment\n    & ClaimDetailsCardMetaFragmentFragment\n    & QuotingBuildersCardMetaFragmentFragment\n  )> }\n  & CustomerDetailsCardFragmentFragment\n  & ClaimDetailsCardFragmentFragment\n  & QuotingBuildersCardFragmentFragment\n  & QuotingRestorersCardFragmentFragment\n);\n\nexport type ChooseCompanyQueryVariables = {};\n\n\nexport type ChooseCompanyQuery = (\n  { __typename?: 'Query' }\n  & { claimFilterOptions: Maybe<Array<Maybe<(\n    { __typename?: 'FilterOption' }\n    & Pick<FilterOption, 'value'>\n    & { label: FilterOption['name'] }\n  )>>> }\n);\n\nexport type ClaimMetaContextQueryVariables = {\n  where: EnDataEntityKey\n};\n\n\nexport type ClaimMetaContextQuery = (\n  { __typename?: 'Query' }\n  & { me: Maybe<(\n    { __typename?: 'AuthenticatedUser' }\n    & AddDocumentMetaFragmentFragment\n  )>, user: Maybe<(\n    { __typename?: 'User' }\n    & { company: Maybe<(\n      { __typename?: 'CompanyProfile' }\n      & Pick<CompanyProfile, 'companyId'>\n    )> }\n  )>, claim: Maybe<(\n    { __typename?: 'ClaimJob' }\n    & Pick<ClaimJob, 'id' | 'claimId'>\n    & AddClaimTypeDialogClaimFragmentFragment\n    & AddDocumentClaimFragmentFragment\n    & JobInfo_ClaimDetailsCardMetaFragmentFragment\n    & JobInfo_CustomerInfoCardMetaFragmentFragment\n  )> }\n);\n\nexport type InfoCardDataFragmentFragment = (\n  { __typename?: 'ClaimJob' }\n  & Pick<ClaimJob, 'refNumber' | '_incidentAddress' | '_insuredPhone' | 'lodgeDate'>\n  & { insurer: Maybe<(\n    { __typename?: 'Company' }\n    & Pick<Company, 'companyName' | 'policyTypeSuppliersView' | 'policyCoverSuppliersView'>\n  )>, insured: Maybe<(\n    { __typename?: 'ContactDetail' }\n    & Pick<ContactDetail, 'name' | 'phone1' | 'phone2' | 'phone3' | 'email'>\n  )>, incidentDetail: Maybe<(\n    { __typename?: 'IncidentDetail' }\n    & { riskAddress: Maybe<(\n      { __typename?: 'Address' }\n      & Pick<Address, 'line1' | 'suburb' | 'state' | 'postcode'>\n    )>, eventType: Maybe<(\n      { __typename?: 'IncidentEvent' }\n      & Pick<IncidentEvent, 'eventName'>\n    )>, cATCode: Maybe<(\n      { __typename?: 'CATCode' }\n      & Pick<CatCode, 'cATCodeName'>\n    )> }\n  )>, policyType: Maybe<(\n    { __typename?: 'PolicyType' }\n    & Pick<PolicyType, 'policyTypeName'>\n  )>, policyCover: Maybe<(\n    { __typename?: 'PolicyCover' }\n    & Pick<PolicyCover, 'policyCoverName'>\n  )>, building: Maybe<(\n    { __typename?: 'ClaimPortfolio' }\n    & Pick<ClaimPortfolio, 'toCollectExcess' | 'excessValue' | '_providerAndStatus' | '_portfolioTooltips'>\n    & { claimStatus: Maybe<(\n      { __typename?: 'ClaimStatus' }\n      & Pick<ClaimStatus, 'statusName'>\n    )>, scopingSupplier: Maybe<(\n      { __typename?: 'Company' }\n      & Pick<Company, 'companyName' | 'companyPhone1' | 'companyPhone2'>\n    )>, authorisedSupplier: Maybe<(\n      { __typename?: 'Company' }\n      & Pick<Company, 'companyName' | 'companyPhone1' | 'companyPhone2'>\n    )>, jobSuppliers: Maybe<Array<Maybe<(\n      { __typename?: 'JobSupplier' }\n      & { quote: Maybe<(\n        { __typename?: 'JobQuote' }\n        & { supplier: Maybe<(\n          { __typename?: 'Company' }\n          & Pick<Company, 'companyName'>\n        )>, quoteStatus: Maybe<(\n          { __typename?: 'ClaimStatus' }\n          & Pick<ClaimStatus, 'statusName'>\n        )> }\n      )> }\n    )>>> }\n  )>, restoration: Maybe<(\n    { __typename?: 'ClaimPortfolio' }\n    & Pick<ClaimPortfolio, 'toCollectExcess' | 'excessValue' | '_providerAndStatus' | '_portfolioTooltips'>\n    & { claimStatus: Maybe<(\n      { __typename?: 'ClaimStatus' }\n      & Pick<ClaimStatus, 'statusName'>\n    )>, scopingSupplier: Maybe<(\n      { __typename?: 'Company' }\n      & Pick<Company, 'companyName' | 'companyPhone1' | 'companyPhone2'>\n    )>, authorisedSupplier: Maybe<(\n      { __typename?: 'Company' }\n      & Pick<Company, 'companyName' | 'companyPhone1' | 'companyPhone2'>\n    )>, jobSuppliers: Maybe<Array<Maybe<(\n      { __typename?: 'JobSupplier' }\n      & { quote: Maybe<(\n        { __typename?: 'JobQuote' }\n        & { supplier: Maybe<(\n          { __typename?: 'Company' }\n          & Pick<Company, 'companyName'>\n        )>, quoteStatus: Maybe<(\n          { __typename?: 'ClaimStatus' }\n          & Pick<ClaimStatus, 'statusName'>\n        )> }\n      )> }\n    )>>> }\n  )>, contents: Maybe<(\n    { __typename?: 'ClaimPortfolio' }\n    & Pick<ClaimPortfolio, 'portfolioType' | 'toCollectExcess' | 'excessValue' | '_providerAndStatus' | '_portfolioTooltips'>\n    & { claimStatus: Maybe<(\n      { __typename?: 'ClaimStatus' }\n      & Pick<ClaimStatus, 'statusName'>\n    )> }\n  )> }\n);\n\nexport type AddClaimTypeDialogClaimFragmentFragment = (\n  { __typename?: 'ClaimJob' }\n  & Pick<ClaimJob, 'claimId' | 'hasBuilding' | 'hasContents' | 'hasRestoration' | '_portfolios'>\n  & { insurer: Maybe<(\n    { __typename?: 'Company' }\n    & Pick<Company, 'companyId'>\n  )>, incidentDetail: Maybe<(\n    { __typename?: 'IncidentDetail' }\n    & { riskAddress: Maybe<(\n      { __typename?: 'Address' }\n      & Pick<Address, 'postcode'>\n    )> }\n  )> }\n);\n\nexport type AddClaimTypeDialogQueryVariables = {\n  buildersWhere?: Maybe<ClaimJobFilter>,\n  restorersWhere?: Maybe<ClaimJobFilter>\n};\n\n\nexport type AddClaimTypeDialogQuery = (\n  { __typename?: 'Query' }\n  & { building: Maybe<Array<Maybe<(\n    { __typename?: 'FilterOption' }\n    & Pick<FilterOption, 'value'>\n    & { label: FilterOption['name'] }\n  )>>>, restoration: Maybe<Array<Maybe<(\n    { __typename?: 'FilterOption' }\n    & Pick<FilterOption, 'value'>\n    & { label: FilterOption['name'] }\n  )>>> }\n);\n\nexport type AddClaimTypeMutationVariables = {\n  input: AddPortfolioInput,\n  where: EnDataEntityKey\n};\n\n\nexport type AddClaimTypeMutation = (\n  { __typename?: 'Mutation' }\n  & { claimAddPortfolio: Maybe<(\n    { __typename?: 'ClaimPortfolioPayload' }\n    & Pick<ClaimPortfolioPayload, 'success' | 'messages'>\n  )> }\n);\n\nexport type AddCommunicationActionQueryVariables = {\n  where?: Maybe<ClaimParticipantIndex>\n};\n\n\nexport type AddCommunicationActionQuery = (\n  { __typename?: 'Query' }\n  & { claimParticipants: Maybe<Array<Maybe<(\n    { __typename?: 'Company' }\n    & Pick<Company, 'isLossAdjuster'>\n    & { group: Company['companyType'], label: Company['companyName'], value: Company['companyId'] }\n  )>>> }\n);\n\nexport type AddCommunicationMutationVariables = {\n  input: ClaimCommunicationCreate\n};\n\n\nexport type AddCommunicationMutation = (\n  { __typename?: 'Mutation' }\n  & { createClaimCommunication: Maybe<(\n    { __typename?: 'ClaimCommunicationPayload' }\n    & Pick<ClaimCommunicationPayload, 'messages' | 'success'>\n  )> }\n);\n\nexport type AddDocumentClaimFragmentFragment = (\n  { __typename?: 'ClaimJob' }\n  & Pick<ClaimJob, 'claimId' | 'hasBuilding' | 'hasContents' | 'hasRestoration' | '_portfolios'>\n  & { insurer: Maybe<(\n    { __typename?: 'Company' }\n    & Pick<Company, 'isFeeModule'>\n  )> }\n);\n\nexport type AddDocumentMetaFragmentFragment = (\n  { __typename?: 'AuthenticatedUser' }\n  & Pick<AuthenticatedUser, 'userType'>\n);\n\nexport type UploadDocumentMutationVariables = {\n  input: ClaimDocumentCreate\n};\n\n\nexport type UploadDocumentMutation = (\n  { __typename?: 'Mutation' }\n  & { createClaimDocument: Maybe<(\n    { __typename?: 'ClaimDocumentPayload' }\n    & Pick<ClaimDocumentPayload, 'success' | 'messages'>\n  )> }\n);\n\nexport type AddJobNoteMutationVariables = {\n  input: ClaimNoteCreate\n};\n\n\nexport type AddJobNoteMutation = (\n  { __typename?: 'Mutation' }\n  & { createClaimNote: Maybe<(\n    { __typename?: 'ClaimNotePayload' }\n    & Pick<ClaimNotePayload, 'success' | 'messages'>\n  )> }\n);\n\nexport type NextStepDialogQueryVariables = {\n  where: EnDataEntityKey\n};\n\n\nexport type NextStepDialogQuery = (\n  { __typename?: 'Query' }\n  & { nextSteps: Maybe<Array<Maybe<(\n    { __typename?: 'ClaimJobStatusInfo' }\n    & Pick<ClaimJobStatusInfo, 'statusName' | 'description' | 'nextStep' | 'portfolioType'>\n  )>>> }\n);\n\nexport type ClaimDetailsQueryVariables = {\n  claimId: Scalars['ID']\n};\n\n\nexport type ClaimDetailsQuery = (\n  { __typename?: 'Query' }\n  & { claimJob: Maybe<(\n    { __typename?: 'ClaimJob' }\n    & InfoCardDataFragmentFragment\n    & JobInfoTabFragmentFragment\n    & ReportTabFragmentFragment\n    & JobNotesFragmentFragment\n  )> }\n);\n\nexport type JobInfo_ClaimDetailsCardFragmentFragment = (\n  { __typename?: 'Query' }\n  & { managers: Maybe<Array<Maybe<(\n    { __typename?: 'FilterOption' }\n    & Pick<FilterOption, 'value'>\n    & { label: FilterOption['name'] }\n  )>>>, externalAdjusters: Maybe<Array<Maybe<(\n    { __typename?: 'FilterOption' }\n    & Pick<FilterOption, 'value'>\n    & { label: FilterOption['name'] }\n  )>>>, eventTypes: Maybe<Array<Maybe<(\n    { __typename?: 'FilterOption' }\n    & Pick<FilterOption, 'value'>\n    & { label: FilterOption['name'] }\n  )>>>, catCodes: Maybe<Array<Maybe<(\n    { __typename?: 'FilterOption' }\n    & Pick<FilterOption, 'value'>\n    & { label: FilterOption['name'] }\n  )>>>, policyTypes: Maybe<Array<Maybe<(\n    { __typename?: 'FilterOption' }\n    & Pick<FilterOption, 'value'>\n    & { label: FilterOption['name'] }\n  )>>>, policyCovers: Maybe<Array<Maybe<(\n    { __typename?: 'FilterOption' }\n    & Pick<FilterOption, 'value'>\n    & { label: FilterOption['name'] }\n  )>>>, internalAssessors: Maybe<Array<Maybe<(\n    { __typename?: 'FilterOption' }\n    & Pick<FilterOption, 'value'>\n    & { label: FilterOption['name'] }\n  )>>> }\n);\n\nexport type JobInfo_ClaimDetailsCardMetaFragmentFragment = (\n  { __typename?: 'ClaimJob' }\n  & Pick<ClaimJob, 'hasContents'>\n  & { insurer: Maybe<(\n    { __typename?: 'Company' }\n    & Pick<Company, 'contentsref' | 'quickrepair' | 'policyTypeSuppliersView' | 'policyCoverSuppliersView' | 'enableMultipleRisks' | 'additionalRefNo' | 'useInternalAssessor' | 'cm2nd'>\n  )>, building: Maybe<(\n    { __typename?: 'ClaimPortfolio' }\n    & Pick<ClaimPortfolio, 'toCollectExcess' | 'excessValue'>\n  )>, contents: Maybe<(\n    { __typename?: 'ClaimPortfolio' }\n    & Pick<ClaimPortfolio, 'toCollectExcess' | 'excessValue'>\n  )>, restoration: Maybe<(\n    { __typename?: 'ClaimPortfolio' }\n    & Pick<ClaimPortfolio, 'toCollectExcess' | 'excessValue'>\n  )> }\n);\n\nexport type JobInfo_CustomerInfoCardMetaFragmentFragment = (\n  { __typename?: 'ClaimJob' }\n  & { insurer: Maybe<(\n    { __typename?: 'Company' }\n    & Pick<Company, 'setupcustomerlogin' | 'removeHabitableAsbestos' | 'hideCategoryOfClaim'>\n  )>, actions: Array<Maybe<(\n    { __typename?: 'Action' }\n    & Pick<Action, 'actionType' | 'isDisplay' | 'isDisabled'>\n  )>> }\n);\n\nexport type JobInfo_QuotingBuilderCardFragmentFragment = (\n  { __typename?: 'Query' }\n  & { quotingBuilders: Maybe<Array<Maybe<(\n    { __typename?: 'FilterOption' }\n    & Pick<FilterOption, 'value'>\n    & { label: FilterOption['name'] }\n  )>>> }\n);\n\nexport type JobInfo_QuotingRestorerCardFragmentFragment = (\n  { __typename?: 'Query' }\n  & { quotingRestorers: Maybe<Array<Maybe<(\n    { __typename?: 'FilterOption' }\n    & Pick<FilterOption, 'value'>\n    & { label: FilterOption['name'] }\n  )>>> }\n);\n\nexport type JobInfoTabFragmentFragment = (\n  { __typename?: 'ClaimJob' }\n  & Pick<ClaimJob, 'id' | 'refNumber' | 'contentsRefNum' | 'lodgeDate' | 'riskname' | 'additionalRefNumber' | '_allocatedBuilder' | '_allocatedRestorer' | 'requireCustomLogin' | 'customLoginEmail' | 'claimDescription'>\n  & { insurer: Maybe<(\n    { __typename?: 'Company' }\n    & Pick<Company, 'companyId' | 'companyName'>\n  )>, incidentDetail: Maybe<(\n    { __typename?: 'IncidentDetail' }\n    & Pick<IncidentDetail, 'incidentDate' | 'hold' | 'habitableProperty' | 'category'>\n    & { eventType: Maybe<(\n      { __typename?: 'IncidentEvent' }\n      & Pick<IncidentEvent, 'eventTypeId'>\n    )>, cATCode: Maybe<(\n      { __typename?: 'CATCode' }\n      & Pick<CatCode, 'cATCodeId'>\n    )>, riskAddress: Maybe<(\n      { __typename?: 'Address' }\n      & Pick<Address, 'line1' | 'line2' | 'suburb' | 'state' | 'postcode'>\n    )> }\n  )>, caseManager: Maybe<(\n    { __typename?: 'ClaimManager' }\n    & Pick<ClaimManager, 'managerId'>\n  )>, externalLossAdjuster: Maybe<(\n    { __typename?: 'Company' }\n    & Pick<Company, 'companyId'>\n  )>, building: Maybe<(\n    { __typename?: 'ClaimPortfolio' }\n    & Pick<ClaimPortfolio, 'toCollectExcess' | 'excessValue' | 'sumInsured'>\n    & { authorisedSupplier: Maybe<(\n      { __typename?: 'Company' }\n      & Pick<Company, 'companyName'>\n    )>, scopingSupplier: Maybe<(\n      { __typename?: 'Company' }\n      & Pick<Company, 'companyId' | 'companyName'>\n    )>, jobSuppliers: Maybe<Array<Maybe<(\n      { __typename?: 'JobSupplier' }\n      & { supplier: Maybe<(\n        { __typename?: 'Company' }\n        & Pick<Company, 'companyId' | 'companyName'>\n      )>, quote: Maybe<(\n        { __typename?: 'JobQuote' }\n        & { supplier: Maybe<(\n          { __typename?: 'Company' }\n          & Pick<Company, 'companyId' | 'companyName'>\n        )> }\n      )> }\n    )>>> }\n  )>, contents: Maybe<(\n    { __typename?: 'ClaimPortfolio' }\n    & Pick<ClaimPortfolio, 'toCollectExcess' | 'excessValue' | 'sumInsured'>\n  )>, restoration: Maybe<(\n    { __typename?: 'ClaimPortfolio' }\n    & Pick<ClaimPortfolio, 'toCollectExcess' | 'excessValue' | 'sumInsured'>\n    & { authorisedSupplier: Maybe<(\n      { __typename?: 'Company' }\n      & Pick<Company, 'companyName'>\n    )>, scopingSupplier: Maybe<(\n      { __typename?: 'Company' }\n      & Pick<Company, 'companyId' | 'companyName'>\n    )>, jobSuppliers: Maybe<Array<Maybe<(\n      { __typename?: 'JobSupplier' }\n      & { supplier: Maybe<(\n        { __typename?: 'Company' }\n        & Pick<Company, 'companyId' | 'companyName'>\n      )>, quote: Maybe<(\n        { __typename?: 'JobQuote' }\n        & { supplier: Maybe<(\n          { __typename?: 'Company' }\n          & Pick<Company, 'companyId' | 'companyName'>\n        )> }\n      )> }\n    )>>> }\n  )>, policyType: Maybe<(\n    { __typename?: 'PolicyType' }\n    & Pick<PolicyType, 'policyTypeId'>\n  )>, policyCover: Maybe<(\n    { __typename?: 'PolicyCover' }\n    & Pick<PolicyCover, 'policyCoverId'>\n  )>, homeAssessor: Maybe<(\n    { __typename?: 'InternalAssesor' }\n    & Pick<InternalAssesor, 'assesorId'>\n  )>, brc: Maybe<(\n    { __typename?: 'ClaimManager' }\n    & Pick<ClaimManager, 'managerId'>\n  )>, insured: Maybe<(\n    { __typename?: 'ContactDetail' }\n    & Pick<ContactDetail, 'salutation' | 'name' | 'email' | 'phone1' | 'phone2' | 'phone3' | 'fax'>\n    & { postalAddress: Maybe<(\n      { __typename?: 'Address' }\n      & Pick<Address, 'line1' | 'line2' | 'suburb' | 'state' | 'postcode'>\n    )> }\n  )>, tenantDetails: Maybe<(\n    { __typename?: 'Contact' }\n    & Pick<Contact, 'name' | 'phone1' | 'phone2' | 'phone3'>\n  )> }\n);\n\nexport type JobInfoQueryVariables = {\n  managersWhere?: Maybe<ClaimJobFilter>,\n  externalAdjustersWhere?: Maybe<ClaimJobFilter>,\n  eventTypeWhere?: Maybe<ClaimJobFilter>,\n  catCodesWhere?: Maybe<ClaimJobFilter>,\n  policyTypesWhere?: Maybe<ClaimJobFilter>,\n  policyCoversWhere?: Maybe<ClaimJobFilter>,\n  internalAssessorsWhere?: Maybe<ClaimJobFilter>,\n  whereQuotingBuilder?: Maybe<ClaimJobFilter>,\n  whereQuotingRestorer?: Maybe<ClaimJobFilter>\n};\n\n\nexport type JobInfoQuery = (\n  { __typename?: 'Query' }\n  & { _states: Array<Maybe<(\n    { __typename?: 'SelectOption' }\n    & Pick<SelectOption, 'label' | 'value'>\n  )>>, _claimCategories: Array<Maybe<(\n    { __typename?: 'SelectOption' }\n    & Pick<SelectOption, 'label' | 'value'>\n  )>> }\n  & JobInfo_ClaimDetailsCardFragmentFragment\n  & JobInfo_QuotingBuilderCardFragmentFragment\n  & JobInfo_QuotingRestorerCardFragmentFragment\n);\n\nexport type JobInfoTabUpdateMutationVariables = {\n  input: ClaimJobInput,\n  where: EnDataEntityKey\n};\n\n\nexport type JobInfoTabUpdateMutation = (\n  { __typename?: 'Mutation' }\n  & { updateClaimJob: Maybe<(\n    { __typename?: 'ClaimJobPayload' }\n    & Pick<ClaimJobPayload, 'success' | 'messages'>\n    & { fieldErrors: Maybe<Array<Maybe<(\n      { __typename?: 'EntityFieldError' }\n      & Pick<EntityFieldError, 'fieldName' | 'level' | 'message'>\n    )>>> }\n  )> }\n);\n\nexport type JobNoteListFragmentFragment = (\n  { __typename?: 'ClaimNote' }\n  & Pick<ClaimNote, 'portfolioType' | 'logDate' | 'private' | '_privacy' | 'message'>\n  & { user: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'userName'>\n    & { company: Maybe<(\n      { __typename?: 'CompanyProfile' }\n      & Pick<CompanyProfile, 'companyName'>\n    )> }\n  )> }\n);\n\nexport type JobNotesQueryVariables = {\n  where?: Maybe<ClaimItemFilter>,\n  first?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>\n};\n\n\nexport type JobNotesQuery = (\n  { __typename?: 'Query' }\n  & { claimNotes: Maybe<(\n    { __typename?: 'ClaimNoteConnection' }\n    & { edges: Maybe<Array<Maybe<(\n      { __typename?: 'ClaimNoteEdge' }\n      & { node: Maybe<(\n        { __typename?: 'ClaimNote' }\n        & Pick<ClaimNote, 'id'>\n        & JobNoteListFragmentFragment\n      )> }\n    )>>> }\n  )> }\n);\n\nexport type JobNotesFragmentFragment = (\n  { __typename?: 'ClaimJob' }\n  & { actions: Array<Maybe<(\n    { __typename?: 'Action' }\n    & Pick<Action, 'actionType' | 'name' | 'isDisplay' | 'isDisabled'>\n  )>>, building: Maybe<(\n    { __typename?: 'ClaimPortfolio' }\n    & { progress: Maybe<(\n      { __typename?: 'ClaimProgress' }\n      & Pick<ClaimProgress, 'initialCallMade' | 'appointmentBooked'>\n    )>, claimStatus: Maybe<(\n      { __typename?: 'ClaimStatus' }\n      & Pick<ClaimStatus, 'statusId'>\n    )>, jobSuppliers: Maybe<Array<Maybe<(\n      { __typename?: 'JobSupplier' }\n      & { quote: Maybe<(\n        { __typename?: 'JobQuote' }\n        & Pick<JobQuote, 'id'>\n      )> }\n    )>>> }\n  )>, restoration: Maybe<(\n    { __typename?: 'ClaimPortfolio' }\n    & { progress: Maybe<(\n      { __typename?: 'ClaimProgress' }\n      & Pick<ClaimProgress, 'initialCallMade' | 'appointmentBooked'>\n    )>, claimStatus: Maybe<(\n      { __typename?: 'ClaimStatus' }\n      & Pick<ClaimStatus, 'statusId'>\n    )>, jobSuppliers: Maybe<Array<Maybe<(\n      { __typename?: 'JobSupplier' }\n      & { quote: Maybe<(\n        { __typename?: 'JobQuote' }\n        & Pick<JobQuote, 'id'>\n      )> }\n    )>>> }\n  )> }\n);\n\nexport type AppointmentMadeMutationVariables = {\n  id: Scalars['ID'],\n  input: AppointmentInput\n};\n\n\nexport type AppointmentMadeMutation = (\n  { __typename?: 'Mutation' }\n  & { claimMakeAppointment: Maybe<(\n    { __typename?: 'ClaimPortfolioPayload' }\n    & Pick<ClaimPortfolioPayload, 'success' | 'messages'>\n  )> }\n);\n\nexport type CancelAwaitingInfoMutationVariables = {\n  where: EnDataPortfolioKey\n};\n\n\nexport type CancelAwaitingInfoMutation = (\n  { __typename?: 'Mutation' }\n  & { claimCancelAwaitingInfo: Maybe<(\n    { __typename?: 'ClaimPortfolioPayload' }\n    & Pick<ClaimPortfolioPayload, 'success' | 'messages'>\n  )> }\n);\n\nexport type AddAwaitingInfoMutationVariables = {\n  input: AwaitingInfoClaimInputType,\n  where: EnDataPortfolioKey\n};\n\n\nexport type AddAwaitingInfoMutation = (\n  { __typename?: 'Mutation' }\n  & { claimAwaitingInfo: Maybe<(\n    { __typename?: 'ClaimPortfolioPayload' }\n    & Pick<ClaimPortfolioPayload, 'success' | 'messages'>\n  )> }\n);\n\nexport type AwaitingInfoFormQueryVariables = {\n  portfolios?: Maybe<Array<Maybe<PortfolioType>>>\n};\n\n\nexport type AwaitingInfoFormQuery = (\n  { __typename?: 'Query' }\n  & { claimFilterOptions: Maybe<Array<Maybe<(\n    { __typename?: 'FilterOption' }\n    & Pick<FilterOption, 'value'>\n    & { label: FilterOption['name'] }\n  )>>> }\n);\n\nexport type ChangeAppointmentMutationVariables = {\n  id: Scalars['ID'],\n  input: AppointmentInput\n};\n\n\nexport type ChangeAppointmentMutation = (\n  { __typename?: 'Mutation' }\n  & { claimMakeAppointment: Maybe<(\n    { __typename?: 'ClaimPortfolioPayload' }\n    & Pick<ClaimPortfolioPayload, 'success' | 'messages'>\n  )> }\n);\n\nexport type InitCallMutationVariables = {\n  id: Scalars['ID']\n};\n\n\nexport type InitCallMutation = (\n  { __typename?: 'Mutation' }\n  & { claimInitialCall: Maybe<(\n    { __typename?: 'ClaimPortfolioPayload' }\n    & Pick<ClaimPortfolioPayload, 'success' | 'messages'>\n  )> }\n);\n\nexport type FormCardFragmentFragment = (\n  { __typename?: 'Card' }\n  & Pick<Card, 'id' | 'grid' | 'order' | 'title'>\n  & { fields: Maybe<Array<(\n    { __typename: 'DateTimeField' }\n    & Pick<DateTimeField, 'name' | 'id' | 'grid' | 'order' | 'label'>\n  ) | (\n    { __typename: 'FileField' }\n    & Pick<FileField, 'name' | 'id' | 'grid' | 'order' | 'label'>\n  ) | (\n    { __typename: 'GroupField' }\n    & Pick<GroupField, 'name' | 'id' | 'grid' | 'order' | 'label'>\n    & { fields: Maybe<Array<(\n      { __typename: 'DateTimeField' }\n      & Pick<DateTimeField, 'name' | 'order' | 'grid' | 'label'>\n    ) | (\n      { __typename: 'FileField' }\n      & Pick<FileField, 'name' | 'order' | 'grid' | 'label'>\n    ) | (\n      { __typename: 'GroupField' }\n      & Pick<GroupField, 'order' | 'grid' | 'label'>\n    ) | (\n      { __typename: 'InfoField' }\n      & Pick<InfoField, 'value' | 'order' | 'grid' | 'label'>\n    ) | (\n      { __typename: 'SelectField' }\n      & Pick<SelectField, 'name' | 'order' | 'grid' | 'label'>\n      & { options: Maybe<Array<(\n        { __typename?: 'SelectFieldOption' }\n        & Pick<SelectFieldOption, 'label' | 'value'>\n      )>> }\n    ) | (\n      { __typename: 'SwitchField' }\n      & Pick<SwitchField, 'name' | 'order' | 'grid' | 'label'>\n    ) | (\n      { __typename: 'TextAreaField' }\n      & Pick<TextAreaField, 'name' | 'rows' | 'rowsMax' | 'order' | 'grid' | 'label'>\n    ) | (\n      { __typename: 'TextField' }\n      & Pick<TextField, 'name' | 'order' | 'grid' | 'label'>\n    )>> }\n  ) | (\n    { __typename: 'InfoField' }\n    & Pick<InfoField, 'value' | 'id' | 'grid' | 'order' | 'label'>\n  ) | (\n    { __typename: 'SelectField' }\n    & Pick<SelectField, 'name' | 'id' | 'grid' | 'order' | 'label'>\n    & { options: Maybe<Array<(\n      { __typename?: 'SelectFieldOption' }\n      & Pick<SelectFieldOption, 'label' | 'value'>\n    )>> }\n  ) | (\n    { __typename: 'SwitchField' }\n    & Pick<SwitchField, 'name' | 'id' | 'grid' | 'order' | 'label'>\n  ) | (\n    { __typename: 'TextAreaField' }\n    & Pick<TextAreaField, 'name' | 'rows' | 'rowsMax' | 'id' | 'grid' | 'order' | 'label'>\n  ) | (\n    { __typename: 'TextField' }\n    & Pick<TextField, 'name' | 'id' | 'grid' | 'order' | 'label'>\n  )>> }\n);\n\nexport type ReportTabFragmentFragment = (\n  { __typename?: 'ClaimJob' }\n  & Pick<ClaimJob, 'id'>\n  & { reportForm: Maybe<(\n    { __typename?: 'Form' }\n    & Pick<Form, 'title'>\n    & { cards: Maybe<Array<(\n      { __typename?: 'Card' }\n      & Pick<Card, 'id'>\n      & FormCardFragmentFragment\n    )>> }\n  )>, reportData: Maybe<(\n    { __typename?: 'Report' }\n    & Pick<Report, 'data' | 'status'>\n  )> }\n);\n\nexport type SaveReportMutationVariables = {\n  claimId: Scalars['ID'],\n  data: Scalars['Json']\n};\n\n\nexport type SaveReportMutation = (\n  { __typename?: 'Mutation' }\n  & { claimReportUpsert: (\n    { __typename?: 'Report' }\n    & Pick<Report, 'id'>\n  ) }\n);\n\nexport type SubmitReportMutationVariables = {\n  claimId: Scalars['ID']\n};\n\n\nexport type SubmitReportMutation = (\n  { __typename?: 'Mutation' }\n  & { claimReportSubmit: (\n    { __typename?: 'Report' }\n    & Pick<Report, 'id'>\n  ) }\n);\n\nexport type ResetReportMutationVariables = {\n  claimId: Scalars['ID']\n};\n\n\nexport type ResetReportMutation = (\n  { __typename?: 'Mutation' }\n  & { claimReportReset: (\n    { __typename?: 'Report' }\n    & Pick<Report, 'id'>\n  ) }\n);\n\nexport type ClaimListBodyFragment = (\n  { __typename?: 'ClaimJob' }\n  & Pick<ClaimJob, 'id' | 'hasBuilding' | 'hasContents' | 'hasRestoration' | '_portfolios' | 'refNumber' | 'lodgeDate' | '_requestDate' | '_request' | '_claimValue' | '_claimStatus' | '_claimBuilder' | '_claimRestorer' | '_insuredPhone' | '_incidentAddress'>\n  & { insurer: Maybe<(\n    { __typename?: 'Company' }\n    & Pick<Company, 'companyName'>\n  )>, building: Maybe<(\n    { __typename?: 'ClaimPortfolio' }\n    & Pick<ClaimPortfolio, 'authorisedValue' | 'scopedValue' | 'daysAtStatus'>\n    & { jobSuppliers: Maybe<Array<Maybe<(\n      { __typename?: 'JobSupplier' }\n      & Pick<JobSupplier, 'requestDate' | 'requestType'>\n      & { quote: Maybe<(\n        { __typename?: 'JobQuote' }\n        & Pick<JobQuote, 'total'>\n        & { quoteStatus: Maybe<(\n          { __typename?: 'ClaimStatus' }\n          & Pick<ClaimStatus, 'statusName'>\n        )> }\n      )> }\n    )>>>, claimStatus: Maybe<(\n      { __typename?: 'ClaimStatus' }\n      & Pick<ClaimStatus, 'statusName'>\n    )>, authorisedSupplier: Maybe<(\n      { __typename?: 'Company' }\n      & Pick<Company, 'companyName'>\n    )>, scopingSupplier: Maybe<(\n      { __typename?: 'Company' }\n      & Pick<Company, 'companyName'>\n    )> }\n  )>, contents: Maybe<(\n    { __typename?: 'ClaimPortfolio' }\n    & { jobSuppliers: Maybe<Array<Maybe<(\n      { __typename?: 'JobSupplier' }\n      & Pick<JobSupplier, 'requestDate' | 'requestType'>\n      & { quote: Maybe<(\n        { __typename?: 'JobQuote' }\n        & Pick<JobQuote, 'total'>\n        & { quoteStatus: Maybe<(\n          { __typename?: 'ClaimStatus' }\n          & Pick<ClaimStatus, 'statusName'>\n        )> }\n      )> }\n    )>>>, claimStatus: Maybe<(\n      { __typename?: 'ClaimStatus' }\n      & Pick<ClaimStatus, 'statusName'>\n    )> }\n  )>, restoration: Maybe<(\n    { __typename?: 'ClaimPortfolio' }\n    & { jobSuppliers: Maybe<Array<Maybe<(\n      { __typename?: 'JobSupplier' }\n      & Pick<JobSupplier, 'requestDate' | 'requestType'>\n      & { quote: Maybe<(\n        { __typename?: 'JobQuote' }\n        & Pick<JobQuote, 'total'>\n        & { quoteStatus: Maybe<(\n          { __typename?: 'ClaimStatus' }\n          & Pick<ClaimStatus, 'statusName'>\n        )> }\n      )> }\n    )>>>, claimStatus: Maybe<(\n      { __typename?: 'ClaimStatus' }\n      & Pick<ClaimStatus, 'statusName'>\n    )>, authorisedSupplier: Maybe<(\n      { __typename?: 'Company' }\n      & Pick<Company, 'companyName'>\n    )>, scopingSupplier: Maybe<(\n      { __typename?: 'Company' }\n      & Pick<Company, 'companyName'>\n    )> }\n  )>, insured: Maybe<(\n    { __typename?: 'ContactDetail' }\n    & Pick<ContactDetail, 'name' | 'phone1' | 'phone2' | 'phone3' | 'email'>\n  )>, incidentDetail: Maybe<(\n    { __typename?: 'IncidentDetail' }\n    & Pick<IncidentDetail, 'incidentDate'>\n    & { riskAddress: Maybe<(\n      { __typename?: 'Address' }\n      & Pick<Address, 'suburb' | 'state' | 'line1' | 'postcode'>\n    )> }\n  )> }\n);\n\nexport type ClaimListFilterQueryVariables = {};\n\n\nexport type ClaimListFilterQuery = (\n  { __typename?: 'Query' }\n  & { currentUser: Maybe<(\n    { __typename?: 'AuthenticatedUser' }\n    & { claimFilters: Maybe<Array<Maybe<(\n      { __typename?: 'FilterInput' }\n      & Pick<FilterInput, 'id' | 'type' | 'label' | 'name'>\n      & { options: Maybe<Array<Maybe<(\n        { __typename?: 'FilterInputOption' }\n        & Pick<FilterInputOption, 'group' | 'label'>\n        & { value: FilterInputOption['id'] }\n      )>>> }\n    )>>> }\n  )> }\n);\n\nexport type ClaimListWaterfallFilterQueryVariables = {\n  where: ClaimStatusVolumeWhere\n};\n\n\nexport type ClaimListWaterfallFilterQuery = (\n  { __typename?: 'Query' }\n  & { currentUser: Maybe<(\n    { __typename?: 'AuthenticatedUser' }\n    & { waterfallFilters: Maybe<Array<(\n      { __typename?: 'ClaimStatusVolumeGroup' }\n      & Pick<ClaimStatusVolumeGroup, 'id'>\n      & { items: Array<(\n        { __typename?: 'ClaimStatusVolume' }\n        & Pick<ClaimStatusVolume, 'label' | 'claimCount' | 'color'>\n        & { value: ClaimStatusVolume['id'] }\n      )> }\n    )>> }\n  )> }\n);\n\nexport type ClaimListDataQueryVariables = {\n  first?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  where?: Maybe<ClaimJobFilter>\n};\n\n\nexport type ClaimListDataQuery = (\n  { __typename?: 'Query' }\n  & { currentUser: Maybe<(\n    { __typename?: 'AuthenticatedUser' }\n    & Pick<AuthenticatedUser, 'userType'>\n  )>, claimJobs: Maybe<(\n    { __typename?: 'ClaimJobConnection' }\n    & Pick<ClaimJobConnection, 'totalCount'>\n    & { edges: Maybe<Array<Maybe<(\n      { __typename?: 'ClaimJobEdge' }\n      & { node: Maybe<(\n        { __typename?: 'ClaimJob' }\n        & ClaimListBodyFragment\n      )> }\n    )>>>, pageInfo: (\n      { __typename?: 'PageInfo' }\n      & Pick<PageInfo, 'endCursor' | 'hasNextPage'>\n    ) }\n  )> }\n);\n\nexport type CommunicationActionAcknowledgeMutationVariables = {\n  where: EnDataPortfolioKey\n};\n\n\nexport type CommunicationActionAcknowledgeMutation = (\n  { __typename?: 'Mutation' }\n  & { claimCommunicationAcknoledge: Maybe<(\n    { __typename?: 'ClaimCommunicationPayload' }\n    & Pick<ClaimCommunicationPayload, 'messages' | 'success'>\n  )> }\n);\n\nexport type CommunicationActionReplyMutationVariables = {\n  input: ClaimCommunicationCreate\n};\n\n\nexport type CommunicationActionReplyMutation = (\n  { __typename?: 'Mutation' }\n  & { createClaimCommunication: Maybe<(\n    { __typename?: 'ClaimCommunicationPayload' }\n    & Pick<ClaimCommunicationPayload, 'messages' | 'success'>\n  )> }\n);\n\nexport type ClaimCommunicationBodyFragment = (\n  { __typename?: 'ClaimCommunication' }\n  & Pick<ClaimCommunication, 'id' | 'claimId' | 'portfolioType' | 'claimRef' | 'sendDate' | 'senderName' | 'senderCompanyName' | 'message' | 'senderCompanyId' | 'senderRole' | 'communicationId'>\n);\n\nexport type CommunicationHeaderFragmentFragment = (\n  { __typename?: 'FilterInput' }\n  & Pick<FilterInput, 'id' | 'type' | 'label' | 'name'>\n  & { options: Maybe<Array<Maybe<(\n    { __typename?: 'FilterInputOption' }\n    & Pick<FilterInputOption, 'group' | 'label'>\n    & { value: FilterInputOption['id'] }\n  )>>> }\n);\n\nexport type CommunicationListFiltersQueryVariables = {};\n\n\nexport type CommunicationListFiltersQuery = (\n  { __typename?: 'Query' }\n  & { currentUser: Maybe<(\n    { __typename?: 'AuthenticatedUser' }\n    & { communicationFilters: Maybe<Array<Maybe<(\n      { __typename?: 'FilterInput' }\n      & CommunicationHeaderFragmentFragment\n    )>>> }\n  )> }\n);\n\nexport type CommunicationsDataQueryVariables = {\n  first?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  where?: Maybe<CommunicationFilter>\n};\n\n\nexport type CommunicationsDataQuery = (\n  { __typename?: 'Query' }\n  & { claimCommunications: Maybe<(\n    { __typename?: 'ClaimCommunicationConnection' }\n    & Pick<ClaimCommunicationConnection, 'totalCount'>\n    & { edges: Maybe<Array<Maybe<(\n      { __typename?: 'ClaimCommunicationEdge' }\n      & { node: Maybe<(\n        { __typename?: 'ClaimCommunication' }\n        & ClaimCommunicationBodyFragment\n      )> }\n    )>>>, pageInfo: (\n      { __typename?: 'PageInfo' }\n      & Pick<PageInfo, 'endCursor' | 'hasNextPage'>\n    ) }\n  )> }\n);\n\nexport type KpiAlertDetailsQueryVariables = {\n  where: CaseReportIndex,\n  first?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>\n};\n\n\nexport type KpiAlertDetailsQuery = (\n  { __typename?: 'Query' }\n  & { reportingClaimJobGeneral: Maybe<(\n    { __typename?: 'ClaimJobGeneralReportConnection' }\n    & { edges: Maybe<Array<Maybe<(\n      { __typename?: 'ClaimJobGeneralReportEdge' }\n      & { node: Maybe<(\n        { __typename?: 'ClaimJobGeneral' }\n        & Pick<ClaimJobGeneral, 'id' | 'portfolioType' | 'refNumber' | 'insuredName' | 'caseManagerName' | 'daysAtStatus'>\n        & { status: Maybe<(\n          { __typename?: 'ClaimStatus' }\n          & Pick<ClaimStatus, 'statusName'>\n        )> }\n      )> }\n    )>>>, pageInfo: (\n      { __typename?: 'PageInfo' }\n      & Pick<PageInfo, 'endCursor' | 'hasNextPage'>\n    ) }\n  )> }\n);\n\nexport type DashboardHeaderFragmentFragment = (\n  { __typename?: 'FilterInput' }\n  & Pick<FilterInput, 'id' | 'type' | 'label' | 'name'>\n  & { options: Maybe<Array<Maybe<(\n    { __typename?: 'FilterInputOption' }\n    & Pick<FilterInputOption, 'group' | 'label'>\n    & { value: FilterInputOption['id'] }\n  )>>> }\n);\n\nexport type DashboardFiltersQueryVariables = {};\n\n\nexport type DashboardFiltersQuery = (\n  { __typename?: 'Query' }\n  & { currentUser: Maybe<(\n    { __typename?: 'AuthenticatedUser' }\n    & Pick<AuthenticatedUser, 'userType'>\n    & { dashboardFilters: Maybe<Array<Maybe<(\n      { __typename?: 'FilterInput' }\n      & DashboardHeaderFragmentFragment\n    )>>> }\n  )>, dashboardFilters: Maybe<Array<Maybe<(\n    { __typename?: 'FilterElement' }\n    & Pick<FilterElement, 'id' | 'name'>\n    & { options: Maybe<Array<Maybe<(\n      { __typename?: 'FilterOption' }\n      & Pick<FilterOption, 'group' | 'value'>\n      & { label: FilterOption['name'] }\n    )>>> }\n  )>>> }\n);\n\nexport type DashboardKpiQueryVariables = {\n  where: DashboardWidgetIndex\n};\n\n\nexport type DashboardKpiQuery = (\n  { __typename?: 'Query' }\n  & { dashboardWidgets: Maybe<Array<Maybe<(\n    { __typename?: 'WidgetGraphType' }\n    & Pick<WidgetGraphType, 'title' | 'viewName' | 'labels' | 'description'>\n    & { data: Maybe<Array<Maybe<(\n      { __typename?: 'WidgetData' }\n      & Pick<WidgetData, 'dataSetName' | 'internalFilterName' | 'legend' | 'valueDisplay' | 'valueGroup' | 'valueUnit' | 'valueSense' | 'values'>\n    )>>> }\n  )>>> }\n);\n\nexport type AppRootQueryVariables = {};\n\n\nexport type AppRootQuery = (\n  { __typename?: 'Query' }\n  & { currentUser: Maybe<(\n    { __typename?: 'AuthenticatedUser' }\n    & Pick<AuthenticatedUser, '_appRoutes' | '_rootRoute'>\n    & { _customisation: Maybe<(\n      { __typename?: 'AppCustomization' }\n      & Pick<AppCustomization, 'alias' | 'favicon' | 'logo' | 'companyLogo'>\n    )> }\n  )> }\n);\n\nexport type LoginQueryVariables = {};\n\n\nexport type LoginQuery = (\n  { __typename?: 'Query' }\n  & { me: Maybe<(\n    { __typename?: 'AuthenticatedUser' }\n    & Pick<AuthenticatedUser, 'id' | 'name'>\n  )> }\n);\n\nexport type SigninMutationVariables = {\n  input: UserCredential\n};\n\n\nexport type SigninMutation = (\n  { __typename?: 'Mutation' }\n  & { userAuthenticateAllServer: Maybe<Array<Maybe<(\n    { __typename?: 'UserValidation' }\n    & Pick<UserValidation, 'accessToken' | 'refreshToken'>\n    & { user: Maybe<(\n      { __typename?: 'User' }\n      & Pick<User, 'userName'>\n    )> }\n  )>>> }\n);\n\nexport const ClaimDetailsCardFragmentFragmentDoc = gql`\n    fragment ClaimDetailsCardFragment on Query {\n  me: currentUser {\n    userType\n  }\n  managers: claimFilterOptions(where: $managersWhere) {\n    label: name\n    value\n  }\n  adjusters: claimFilterOptions(where: $adjustersWhere) {\n    label: name\n    value\n  }\n  builders: claimFilterOptions(where: $buildersWhere) {\n    label: name\n    value\n  }\n  restorers: claimFilterOptions(where: $restorersWhere) {\n    label: name\n    value\n  }\n  eventTypes: claimFilterOptions(where: $eventTypeWhere) {\n    label: name\n    value\n  }\n  catCodes: claimFilterOptions(where: $catCodesWhere) {\n    label: name\n    value\n  }\n  policyTypes: claimFilterOptions(where: $policyTypesWhere) {\n    label: name\n    value\n  }\n  policyCovers: claimFilterOptions(where: $policyCoversWhere) {\n    label: name\n    value\n  }\n  internalAssessors: claimFilterOptions(where: $internalAssessorsWhere) {\n    label: name\n    value\n  }\n}\n    `;\nexport const ClaimDetailsCardMetaFragmentFragmentDoc = gql`\n    fragment ClaimDetailsCardMetaFragment on CompanyProfile {\n  contentsref\n  quickrepair\n  policyTypeSuppliersView\n  policyCoverSuppliersView\n  isToProvideSiteReportView\n  useInternalAssessor\n  cm2nd\n  enableMultipleRisks\n}\n    `;\nexport const CustomerDetailsCardFragmentFragmentDoc = gql`\n    fragment CustomerDetailsCardFragment on Query {\n  catCodes: claimFilterOptions(where: $catCodesWhere) {\n    label: name\n    value\n  }\n}\n    `;\nexport const CustomerDetailsCardMetaFragmentFragmentDoc = gql`\n    fragment CustomerDetailsCardMetaFragment on CompanyProfile {\n  companyName\n  policyTypeSuppliersView\n  insrefnumLength\n  removeHabitableAsbestos\n  setupcustomerlogin\n  hideCategoryOfClaim\n}\n    `;\nexport const QuotingBuildersCardFragmentFragmentDoc = gql`\n    fragment QuotingBuildersCardFragment on Query {\n  builders: claimFilterOptions(where: $buildersWhere) {\n    label: name\n    value\n  }\n}\n    `;\nexport const QuotingBuildersCardMetaFragmentFragmentDoc = gql`\n    fragment QuotingBuildersCardMetaFragment on CompanyProfile {\n  quotesperclaim\n}\n    `;\nexport const QuotingRestorersCardFragmentFragmentDoc = gql`\n    fragment QuotingRestorersCardFragment on Query {\n  restorers: claimFilterOptions(where: $restorersWhere) {\n    label: name\n    value\n  }\n}\n    `;\nexport const InfoCardDataFragmentFragmentDoc = gql`\n    fragment InfoCardDataFragment on ClaimJob {\n  insurer {\n    companyName\n    policyTypeSuppliersView\n    policyCoverSuppliersView\n  }\n  refNumber\n  insured {\n    name\n    phone1\n    phone2\n    phone3\n    email\n  }\n  incidentDetail {\n    riskAddress {\n      line1\n      suburb\n      state\n      postcode\n    }\n    eventType {\n      eventName\n    }\n    cATCode {\n      cATCodeName\n    }\n  }\n  _incidentAddress @client\n  insured {\n    name\n    phone1\n    phone2\n    phone3\n    email\n  }\n  _insuredPhone @client\n  lodgeDate\n  incidentDetail {\n    eventType {\n      eventName\n    }\n  }\n  incidentDetail {\n    cATCode {\n      cATCodeName\n    }\n  }\n  policyType {\n    policyTypeName\n  }\n  policyCover {\n    policyCoverName\n  }\n  insurer {\n    policyTypeSuppliersView\n    policyCoverSuppliersView\n  }\n  building {\n    claimStatus {\n      statusName\n    }\n    scopingSupplier {\n      companyName\n      companyPhone1\n      companyPhone2\n    }\n    authorisedSupplier {\n      companyName\n      companyPhone1\n      companyPhone2\n    }\n    jobSuppliers {\n      quote {\n        supplier {\n          companyName\n        }\n        quoteStatus: quoteJobStatus {\n          statusName\n        }\n      }\n    }\n    toCollectExcess\n    excessValue\n    _providerAndStatus @client\n    _portfolioTooltips @client\n  }\n  restoration {\n    claimStatus {\n      statusName\n    }\n    scopingSupplier {\n      companyName\n      companyPhone1\n      companyPhone2\n    }\n    authorisedSupplier {\n      companyName\n      companyPhone1\n      companyPhone2\n    }\n    jobSuppliers {\n      quote {\n        supplier {\n          companyName\n        }\n        quoteStatus: quoteJobStatus {\n          statusName\n        }\n      }\n    }\n    toCollectExcess\n    excessValue\n    _providerAndStatus @client\n    _portfolioTooltips @client\n  }\n  contents {\n    portfolioType\n    claimStatus {\n      statusName\n    }\n    toCollectExcess\n    excessValue\n    _providerAndStatus @client\n    _portfolioTooltips @client\n  }\n}\n    `;\nexport const AddClaimTypeDialogClaimFragmentFragmentDoc = gql`\n    fragment AddClaimTypeDialogClaimFragment on ClaimJob {\n  claimId\n  hasBuilding\n  hasContents\n  hasRestoration\n  _portfolios @client\n  insurer {\n    companyId\n  }\n  incidentDetail {\n    riskAddress {\n      postcode\n    }\n  }\n}\n    `;\nexport const AddDocumentClaimFragmentFragmentDoc = gql`\n    fragment AddDocumentClaimFragment on ClaimJob {\n  claimId\n  hasBuilding\n  hasContents\n  hasRestoration\n  _portfolios @client\n  insurer {\n    isFeeModule\n  }\n}\n    `;\nexport const AddDocumentMetaFragmentFragmentDoc = gql`\n    fragment AddDocumentMetaFragment on AuthenticatedUser {\n  userType\n}\n    `;\nexport const JobInfo_ClaimDetailsCardFragmentFragmentDoc = gql`\n    fragment JobInfo_ClaimDetailsCardFragment on Query {\n  managers: claimFilterOptions(where: $managersWhere) {\n    label: name\n    value\n  }\n  externalAdjusters: claimFilterOptions(where: $externalAdjustersWhere) {\n    label: name\n    value\n  }\n  eventTypes: claimFilterOptions(where: $eventTypeWhere) {\n    label: name\n    value\n  }\n  catCodes: claimFilterOptions(where: $catCodesWhere) {\n    label: name\n    value\n  }\n  policyTypes: claimFilterOptions(where: $policyTypesWhere) {\n    label: name\n    value\n  }\n  policyCovers: claimFilterOptions(where: $policyCoversWhere) {\n    label: name\n    value\n  }\n  internalAssessors: claimFilterOptions(where: $internalAssessorsWhere) {\n    label: name\n    value\n  }\n}\n    `;\nexport const JobInfo_ClaimDetailsCardMetaFragmentFragmentDoc = gql`\n    fragment JobInfo_ClaimDetailsCardMetaFragment on ClaimJob {\n  hasContents\n  insurer {\n    contentsref\n    quickrepair\n    policyTypeSuppliersView\n    policyCoverSuppliersView\n    enableMultipleRisks\n    additionalRefNo\n    useInternalAssessor\n    cm2nd\n  }\n  building {\n    toCollectExcess\n    excessValue\n  }\n  contents {\n    toCollectExcess\n    excessValue\n  }\n  restoration {\n    toCollectExcess\n    excessValue\n  }\n}\n    `;\nexport const JobInfo_CustomerInfoCardMetaFragmentFragmentDoc = gql`\n    fragment JobInfo_CustomerInfoCardMetaFragment on ClaimJob {\n  insurer {\n    setupcustomerlogin\n    removeHabitableAsbestos\n    hideCategoryOfClaim\n  }\n  actions {\n    actionType\n    isDisplay\n    isDisabled\n  }\n}\n    `;\nexport const JobInfo_QuotingBuilderCardFragmentFragmentDoc = gql`\n    fragment JobInfo_QuotingBuilderCardFragment on Query {\n  quotingBuilders: claimFilterOptions(where: $whereQuotingBuilder) {\n    label: name\n    value\n  }\n}\n    `;\nexport const JobInfo_QuotingRestorerCardFragmentFragmentDoc = gql`\n    fragment JobInfo_QuotingRestorerCardFragment on Query {\n  quotingRestorers: claimFilterOptions(where: $whereQuotingRestorer) {\n    label: name\n    value\n  }\n}\n    `;\nexport const JobInfoTabFragmentFragmentDoc = gql`\n    fragment JobInfoTabFragment on ClaimJob {\n  id\n  insurer {\n    companyId\n    companyName\n  }\n  incidentDetail {\n    incidentDate\n    hold\n    eventType {\n      eventTypeId\n    }\n    cATCode {\n      cATCodeId\n    }\n    riskAddress {\n      line1\n      line2\n      suburb\n      state\n      postcode\n    }\n    habitableProperty\n    category\n  }\n  caseManager {\n    managerId\n  }\n  externalLossAdjuster {\n    companyId\n  }\n  refNumber\n  contentsRefNum\n  lodgeDate\n  incidentDetail {\n    hold\n  }\n  incidentDetail {\n    eventType {\n      eventTypeId\n    }\n  }\n  incidentDetail {\n    cATCode {\n      cATCodeId\n    }\n  }\n  building {\n    toCollectExcess\n    excessValue\n    sumInsured\n    authorisedSupplier {\n      companyName\n    }\n    scopingSupplier {\n      companyId\n      companyName\n    }\n    jobSuppliers {\n      supplier {\n        companyId\n        companyName\n      }\n      quote {\n        supplier {\n          companyId\n          companyName\n        }\n      }\n    }\n  }\n  contents {\n    toCollectExcess\n    excessValue\n    sumInsured\n  }\n  restoration {\n    toCollectExcess\n    excessValue\n    sumInsured\n    authorisedSupplier {\n      companyName\n    }\n    scopingSupplier {\n      companyId\n      companyName\n    }\n    jobSuppliers {\n      supplier {\n        companyId\n        companyName\n      }\n      quote {\n        supplier {\n          companyId\n          companyName\n        }\n      }\n    }\n  }\n  policyType {\n    policyTypeId\n  }\n  policyCover {\n    policyCoverId\n  }\n  riskname\n  additionalRefNumber\n  homeAssessor {\n    assesorId\n  }\n  brc {\n    managerId\n  }\n  building {\n    authorisedSupplier {\n      companyName\n    }\n    scopingSupplier {\n      companyId\n      companyName\n    }\n    jobSuppliers {\n      supplier {\n        companyId\n        companyName\n      }\n      quote {\n        supplier {\n          companyId\n          companyName\n        }\n      }\n    }\n  }\n  _allocatedBuilder @client\n  restoration {\n    authorisedSupplier {\n      companyName\n    }\n    scopingSupplier {\n      companyId\n      companyName\n    }\n    jobSuppliers {\n      supplier {\n        companyId\n        companyName\n      }\n      quote {\n        supplier {\n          companyId\n          companyName\n        }\n      }\n    }\n  }\n  _allocatedRestorer @client\n  insured {\n    salutation\n    name\n    email\n    phone1\n    phone2\n    phone3\n    fax\n    postalAddress {\n      line1\n      line2\n      suburb\n      state\n      postcode\n    }\n  }\n  incidentDetail {\n    riskAddress {\n      line1\n      line2\n      suburb\n      state\n      postcode\n    }\n    habitableProperty\n    category\n  }\n  requireCustomLogin\n  customLoginEmail\n  tenantDetails {\n    name\n    phone1\n    phone2\n    phone3\n  }\n  claimDescription\n}\n    `;\nexport const JobNoteListFragmentFragmentDoc = gql`\n    fragment JobNoteListFragment on ClaimNote {\n  portfolioType\n  logDate\n  private\n  _privacy @client\n  message\n  user {\n    userName\n    company {\n      companyName\n    }\n  }\n}\n    `;\nexport const JobNotesFragmentFragmentDoc = gql`\n    fragment JobNotesFragment on ClaimJob {\n  actions {\n    actionType\n    name\n    isDisplay\n    isDisabled\n  }\n  building {\n    progress {\n      initialCallMade\n      appointmentBooked\n    }\n    claimStatus {\n      statusId\n    }\n    jobSuppliers {\n      quote {\n        id\n      }\n    }\n  }\n  restoration {\n    progress {\n      initialCallMade\n      appointmentBooked\n    }\n    claimStatus {\n      statusId\n    }\n    jobSuppliers {\n      quote {\n        id\n      }\n    }\n  }\n}\n    `;\nexport const FormCardFragmentFragmentDoc = gql`\n    fragment FormCardFragment on Card {\n  id\n  grid\n  order\n  title\n  fields {\n    __typename\n    id\n    grid\n    order\n    label\n    ... on InfoField {\n      value\n    }\n    ... on TextField {\n      name\n    }\n    ... on TextAreaField {\n      name\n      rows\n      rowsMax\n    }\n    ... on SelectField {\n      name\n      options {\n        label\n        value\n      }\n    }\n    ... on SwitchField {\n      name\n    }\n    ... on FileField {\n      name\n    }\n    ... on DateTimeField {\n      name\n    }\n    ... on GroupField {\n      name\n      fields {\n        __typename\n        order\n        grid\n        label\n        ... on InfoField {\n          value\n        }\n        ... on TextField {\n          name\n        }\n        ... on TextAreaField {\n          name\n          rows\n          rowsMax\n        }\n        ... on SelectField {\n          name\n          options {\n            label\n            value\n          }\n        }\n        ... on SwitchField {\n          name\n        }\n        ... on FileField {\n          name\n        }\n        ... on DateTimeField {\n          name\n        }\n      }\n    }\n  }\n}\n    `;\nexport const ReportTabFragmentFragmentDoc = gql`\n    fragment ReportTabFragment on ClaimJob {\n  id\n  reportForm {\n    title\n    cards {\n      id\n      ...FormCardFragment\n    }\n  }\n  reportData {\n    data\n    status\n  }\n}\n    ${FormCardFragmentFragmentDoc}`;\nexport const ClaimListBodyFragmentDoc = gql`\n    fragment ClaimListBody on ClaimJob {\n  id\n  hasBuilding\n  hasContents\n  hasRestoration\n  _portfolios @client\n  refNumber\n  insurer {\n    companyName\n  }\n  lodgeDate\n  building {\n    jobSuppliers {\n      requestDate\n      requestType\n      quote {\n        total\n        quoteStatus {\n          statusName\n        }\n      }\n    }\n    authorisedValue\n    scopedValue\n    claimStatus {\n      statusName\n    }\n    authorisedSupplier {\n      companyName\n    }\n    scopingSupplier {\n      companyName\n    }\n    daysAtStatus\n  }\n  contents {\n    jobSuppliers {\n      requestDate\n      requestType\n      quote {\n        total\n        quoteStatus {\n          statusName\n        }\n      }\n    }\n    claimStatus {\n      statusName\n    }\n  }\n  restoration {\n    jobSuppliers {\n      requestDate\n      requestType\n      quote {\n        total\n        quoteStatus {\n          statusName\n        }\n      }\n    }\n    claimStatus {\n      statusName\n    }\n    authorisedSupplier {\n      companyName\n    }\n    scopingSupplier {\n      companyName\n    }\n  }\n  _requestDate @client\n  _request @client\n  insured {\n    name\n    phone1\n    phone2\n    phone3\n    email\n  }\n  incidentDetail {\n    riskAddress {\n      suburb\n      state\n      line1\n      postcode\n    }\n    incidentDate\n  }\n  building {\n    authorisedValue\n    scopedValue\n  }\n  building {\n    jobSuppliers {\n      quote {\n        total\n        quoteStatus {\n          statusName\n        }\n      }\n    }\n  }\n  contents {\n    jobSuppliers {\n      quote {\n        total\n        quoteStatus {\n          statusName\n        }\n      }\n    }\n  }\n  restoration {\n    jobSuppliers {\n      quote {\n        total\n        quoteStatus {\n          statusName\n        }\n      }\n    }\n  }\n  _claimValue @client\n  building {\n    jobSuppliers {\n      quote {\n        quoteStatus {\n          statusName\n        }\n      }\n    }\n  }\n  building {\n    claimStatus {\n      statusName\n    }\n  }\n  contents {\n    jobSuppliers {\n      quote {\n        quoteStatus {\n          statusName\n        }\n      }\n    }\n  }\n  contents {\n    claimStatus {\n      statusName\n    }\n  }\n  restoration {\n    jobSuppliers {\n      quote {\n        quoteStatus {\n          statusName\n        }\n      }\n    }\n  }\n  restoration {\n    claimStatus {\n      statusName\n    }\n  }\n  _claimStatus @client\n  building {\n    authorisedSupplier {\n      companyName\n    }\n    scopingSupplier {\n      companyName\n    }\n  }\n  _claimBuilder @client\n  restoration {\n    authorisedSupplier {\n      companyName\n    }\n    scopingSupplier {\n      companyName\n    }\n  }\n  _claimRestorer @client\n  building {\n    claimStatus {\n      statusName\n    }\n  }\n  building {\n    daysAtStatus\n  }\n  restoration {\n    claimStatus {\n      statusName\n    }\n  }\n  contents {\n    claimStatus {\n      statusName\n    }\n  }\n  refNumber\n  insured {\n    name\n    phone1\n    phone2\n    phone3\n    email\n  }\n  _insuredPhone @client\n  incidentDetail {\n    incidentDate\n    riskAddress {\n      line1\n      suburb\n      state\n      postcode\n    }\n  }\n  _incidentAddress @client\n}\n    `;\nexport const ClaimCommunicationBodyFragmentDoc = gql`\n    fragment ClaimCommunicationBody on ClaimCommunication {\n  id\n  claimId\n  portfolioType\n  claimRef\n  sendDate\n  senderName\n  senderCompanyName\n  message\n  senderCompanyId\n  senderRole\n  communicationId\n}\n    `;\nexport const CommunicationHeaderFragmentFragmentDoc = gql`\n    fragment CommunicationHeaderFragment on FilterInput {\n  id\n  type\n  label\n  name\n  options {\n    group\n    label\n    value: id\n  }\n}\n    `;\nexport const DashboardHeaderFragmentFragmentDoc = gql`\n    fragment DashboardHeaderFragment on FilterInput {\n  id\n  type\n  label\n  name\n  options {\n    group\n    label\n    value: id\n  }\n}\n    `;\nexport const CommunicationmenuDocument = gql`\n    query Communicationmenu {\n  communications: claimCommuications(first: 2, where: {boxes: Inbox, acknowledged: false}) {\n    totalCount\n    edges {\n      node {\n        id\n        claimRef\n        message\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useCommunicationmenuQuery__\n *\n * To run a query within a React component, call `useCommunicationmenuQuery` and pass it any options that fit your needs.\n * When your component renders, `useCommunicationmenuQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCommunicationmenuQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useCommunicationmenuQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<CommunicationmenuQuery, CommunicationmenuQueryVariables>) {\n        return ApolloReactHooks.useQuery<CommunicationmenuQuery, CommunicationmenuQueryVariables>(CommunicationmenuDocument, baseOptions);\n      }\nexport function useCommunicationmenuLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CommunicationmenuQuery, CommunicationmenuQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<CommunicationmenuQuery, CommunicationmenuQueryVariables>(CommunicationmenuDocument, baseOptions);\n        }\nexport type CommunicationmenuQueryHookResult = ReturnType<typeof useCommunicationmenuQuery>;\nexport type CommunicationmenuLazyQueryHookResult = ReturnType<typeof useCommunicationmenuLazyQuery>;\nexport type CommunicationmenuQueryResult = ApolloReactCommon.QueryResult<CommunicationmenuQuery, CommunicationmenuQueryVariables>;\nexport const AddClaimDocument = gql`\n    mutation AddClaim($input: ClaimJobCreate!) {\n  createClaimJob(input: $input) {\n    success\n    messages\n    fieldErrors {\n      fieldName\n      level\n      message\n    }\n    result {\n      id\n      claimId\n    }\n  }\n}\n    `;\nexport type AddClaimMutationFn = ApolloReactCommon.MutationFunction<AddClaimMutation, AddClaimMutationVariables>;\n\n/**\n * __useAddClaimMutation__\n *\n * To run a mutation, you first call `useAddClaimMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddClaimMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addClaimMutation, { data, loading, error }] = useAddClaimMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useAddClaimMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AddClaimMutation, AddClaimMutationVariables>) {\n        return ApolloReactHooks.useMutation<AddClaimMutation, AddClaimMutationVariables>(AddClaimDocument, baseOptions);\n      }\nexport type AddClaimMutationHookResult = ReturnType<typeof useAddClaimMutation>;\nexport type AddClaimMutationResult = ApolloReactCommon.MutationResult<AddClaimMutation>;\nexport type AddClaimMutationOptions = ApolloReactCommon.BaseMutationOptions<AddClaimMutation, AddClaimMutationVariables>;\nexport const AddClaimRootDocument = gql`\n    query AddClaimRoot($companyWhere: ENDataPortfolioKey!, $managersWhere: ClaimJobFilter, $adjustersWhere: ClaimJobFilter, $buildersWhere: ClaimJobFilter, $restorersWhere: ClaimJobFilter, $eventTypeWhere: ClaimJobFilter, $catCodesWhere: ClaimJobFilter, $policyTypesWhere: ClaimJobFilter, $policyCoversWhere: ClaimJobFilter, $internalAssessorsWhere: ClaimJobFilter) {\n  ...CustomerDetailsCardFragment\n  ...ClaimDetailsCardFragment\n  ...QuotingBuildersCardFragment\n  ...QuotingRestorersCardFragment\n  company(where: $companyWhere) {\n    ...CustomerDetailsCardMetaFragment\n    ...ClaimDetailsCardMetaFragment\n    ...QuotingBuildersCardMetaFragment\n  }\n}\n    ${CustomerDetailsCardFragmentFragmentDoc}\n${ClaimDetailsCardFragmentFragmentDoc}\n${QuotingBuildersCardFragmentFragmentDoc}\n${QuotingRestorersCardFragmentFragmentDoc}\n${CustomerDetailsCardMetaFragmentFragmentDoc}\n${ClaimDetailsCardMetaFragmentFragmentDoc}\n${QuotingBuildersCardMetaFragmentFragmentDoc}`;\n\n/**\n * __useAddClaimRootQuery__\n *\n * To run a query within a React component, call `useAddClaimRootQuery` and pass it any options that fit your needs.\n * When your component renders, `useAddClaimRootQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAddClaimRootQuery({\n *   variables: {\n *      companyWhere: // value for 'companyWhere'\n *      managersWhere: // value for 'managersWhere'\n *      adjustersWhere: // value for 'adjustersWhere'\n *      buildersWhere: // value for 'buildersWhere'\n *      restorersWhere: // value for 'restorersWhere'\n *      eventTypeWhere: // value for 'eventTypeWhere'\n *      catCodesWhere: // value for 'catCodesWhere'\n *      policyTypesWhere: // value for 'policyTypesWhere'\n *      policyCoversWhere: // value for 'policyCoversWhere'\n *      internalAssessorsWhere: // value for 'internalAssessorsWhere'\n *   },\n * });\n */\nexport function useAddClaimRootQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AddClaimRootQuery, AddClaimRootQueryVariables>) {\n        return ApolloReactHooks.useQuery<AddClaimRootQuery, AddClaimRootQueryVariables>(AddClaimRootDocument, baseOptions);\n      }\nexport function useAddClaimRootLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AddClaimRootQuery, AddClaimRootQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<AddClaimRootQuery, AddClaimRootQueryVariables>(AddClaimRootDocument, baseOptions);\n        }\nexport type AddClaimRootQueryHookResult = ReturnType<typeof useAddClaimRootQuery>;\nexport type AddClaimRootLazyQueryHookResult = ReturnType<typeof useAddClaimRootLazyQuery>;\nexport type AddClaimRootQueryResult = ApolloReactCommon.QueryResult<AddClaimRootQuery, AddClaimRootQueryVariables>;\nexport const ChooseCompanyDocument = gql`\n    query ChooseCompany {\n  claimFilterOptions(where: {subject: \"insurers\"}) {\n    label: name\n    value\n  }\n}\n    `;\n\n/**\n * __useChooseCompanyQuery__\n *\n * To run a query within a React component, call `useChooseCompanyQuery` and pass it any options that fit your needs.\n * When your component renders, `useChooseCompanyQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useChooseCompanyQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useChooseCompanyQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ChooseCompanyQuery, ChooseCompanyQueryVariables>) {\n        return ApolloReactHooks.useQuery<ChooseCompanyQuery, ChooseCompanyQueryVariables>(ChooseCompanyDocument, baseOptions);\n      }\nexport function useChooseCompanyLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ChooseCompanyQuery, ChooseCompanyQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<ChooseCompanyQuery, ChooseCompanyQueryVariables>(ChooseCompanyDocument, baseOptions);\n        }\nexport type ChooseCompanyQueryHookResult = ReturnType<typeof useChooseCompanyQuery>;\nexport type ChooseCompanyLazyQueryHookResult = ReturnType<typeof useChooseCompanyLazyQuery>;\nexport type ChooseCompanyQueryResult = ApolloReactCommon.QueryResult<ChooseCompanyQuery, ChooseCompanyQueryVariables>;\nexport const ClaimMetaContextDocument = gql`\n    query ClaimMetaContext($where: ENDataEntityKey!) {\n  me: currentUser {\n    ...AddDocumentMetaFragment\n  }\n  user: me {\n    company {\n      companyId\n    }\n  }\n  claim: claimJob(where: $where) {\n    id\n    claimId\n    ...AddClaimTypeDialogClaimFragment\n    ...AddDocumentClaimFragment\n    ...JobInfo_ClaimDetailsCardMetaFragment\n    ...JobInfo_CustomerInfoCardMetaFragment\n  }\n}\n    ${AddDocumentMetaFragmentFragmentDoc}\n${AddClaimTypeDialogClaimFragmentFragmentDoc}\n${AddDocumentClaimFragmentFragmentDoc}\n${JobInfo_ClaimDetailsCardMetaFragmentFragmentDoc}\n${JobInfo_CustomerInfoCardMetaFragmentFragmentDoc}`;\n\n/**\n * __useClaimMetaContextQuery__\n *\n * To run a query within a React component, call `useClaimMetaContextQuery` and pass it any options that fit your needs.\n * When your component renders, `useClaimMetaContextQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useClaimMetaContextQuery({\n *   variables: {\n *      where: // value for 'where'\n *   },\n * });\n */\nexport function useClaimMetaContextQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ClaimMetaContextQuery, ClaimMetaContextQueryVariables>) {\n        return ApolloReactHooks.useQuery<ClaimMetaContextQuery, ClaimMetaContextQueryVariables>(ClaimMetaContextDocument, baseOptions);\n      }\nexport function useClaimMetaContextLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ClaimMetaContextQuery, ClaimMetaContextQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<ClaimMetaContextQuery, ClaimMetaContextQueryVariables>(ClaimMetaContextDocument, baseOptions);\n        }\nexport type ClaimMetaContextQueryHookResult = ReturnType<typeof useClaimMetaContextQuery>;\nexport type ClaimMetaContextLazyQueryHookResult = ReturnType<typeof useClaimMetaContextLazyQuery>;\nexport type ClaimMetaContextQueryResult = ApolloReactCommon.QueryResult<ClaimMetaContextQuery, ClaimMetaContextQueryVariables>;\nexport const AddClaimTypeDialogDocument = gql`\n    query AddClaimTypeDialog($buildersWhere: ClaimJobFilter, $restorersWhere: ClaimJobFilter) {\n  building: claimFilterOptions(where: $buildersWhere) {\n    label: name\n    value\n  }\n  restoration: claimFilterOptions(where: $restorersWhere) {\n    label: name\n    value\n  }\n}\n    `;\n\n/**\n * __useAddClaimTypeDialogQuery__\n *\n * To run a query within a React component, call `useAddClaimTypeDialogQuery` and pass it any options that fit your needs.\n * When your component renders, `useAddClaimTypeDialogQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAddClaimTypeDialogQuery({\n *   variables: {\n *      buildersWhere: // value for 'buildersWhere'\n *      restorersWhere: // value for 'restorersWhere'\n *   },\n * });\n */\nexport function useAddClaimTypeDialogQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AddClaimTypeDialogQuery, AddClaimTypeDialogQueryVariables>) {\n        return ApolloReactHooks.useQuery<AddClaimTypeDialogQuery, AddClaimTypeDialogQueryVariables>(AddClaimTypeDialogDocument, baseOptions);\n      }\nexport function useAddClaimTypeDialogLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AddClaimTypeDialogQuery, AddClaimTypeDialogQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<AddClaimTypeDialogQuery, AddClaimTypeDialogQueryVariables>(AddClaimTypeDialogDocument, baseOptions);\n        }\nexport type AddClaimTypeDialogQueryHookResult = ReturnType<typeof useAddClaimTypeDialogQuery>;\nexport type AddClaimTypeDialogLazyQueryHookResult = ReturnType<typeof useAddClaimTypeDialogLazyQuery>;\nexport type AddClaimTypeDialogQueryResult = ApolloReactCommon.QueryResult<AddClaimTypeDialogQuery, AddClaimTypeDialogQueryVariables>;\nexport const AddClaimTypeDocument = gql`\n    mutation AddClaimType($input: AddPortfolioInput!, $where: ENDataEntityKey!) {\n  claimAddPortfolio(input: $input, where: $where) {\n    success\n    messages\n  }\n}\n    `;\nexport type AddClaimTypeMutationFn = ApolloReactCommon.MutationFunction<AddClaimTypeMutation, AddClaimTypeMutationVariables>;\n\n/**\n * __useAddClaimTypeMutation__\n *\n * To run a mutation, you first call `useAddClaimTypeMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddClaimTypeMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addClaimTypeMutation, { data, loading, error }] = useAddClaimTypeMutation({\n *   variables: {\n *      input: // value for 'input'\n *      where: // value for 'where'\n *   },\n * });\n */\nexport function useAddClaimTypeMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AddClaimTypeMutation, AddClaimTypeMutationVariables>) {\n        return ApolloReactHooks.useMutation<AddClaimTypeMutation, AddClaimTypeMutationVariables>(AddClaimTypeDocument, baseOptions);\n      }\nexport type AddClaimTypeMutationHookResult = ReturnType<typeof useAddClaimTypeMutation>;\nexport type AddClaimTypeMutationResult = ApolloReactCommon.MutationResult<AddClaimTypeMutation>;\nexport type AddClaimTypeMutationOptions = ApolloReactCommon.BaseMutationOptions<AddClaimTypeMutation, AddClaimTypeMutationVariables>;\nexport const AddCommunicationActionDocument = gql`\n    query AddCommunicationAction($where: ClaimParticipantIndex) {\n  claimParticipants(where: $where) {\n    group: companyType\n    label: companyName\n    value: companyId\n    isLossAdjuster\n  }\n}\n    `;\n\n/**\n * __useAddCommunicationActionQuery__\n *\n * To run a query within a React component, call `useAddCommunicationActionQuery` and pass it any options that fit your needs.\n * When your component renders, `useAddCommunicationActionQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAddCommunicationActionQuery({\n *   variables: {\n *      where: // value for 'where'\n *   },\n * });\n */\nexport function useAddCommunicationActionQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AddCommunicationActionQuery, AddCommunicationActionQueryVariables>) {\n        return ApolloReactHooks.useQuery<AddCommunicationActionQuery, AddCommunicationActionQueryVariables>(AddCommunicationActionDocument, baseOptions);\n      }\nexport function useAddCommunicationActionLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AddCommunicationActionQuery, AddCommunicationActionQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<AddCommunicationActionQuery, AddCommunicationActionQueryVariables>(AddCommunicationActionDocument, baseOptions);\n        }\nexport type AddCommunicationActionQueryHookResult = ReturnType<typeof useAddCommunicationActionQuery>;\nexport type AddCommunicationActionLazyQueryHookResult = ReturnType<typeof useAddCommunicationActionLazyQuery>;\nexport type AddCommunicationActionQueryResult = ApolloReactCommon.QueryResult<AddCommunicationActionQuery, AddCommunicationActionQueryVariables>;\nexport const AddCommunicationDocument = gql`\n    mutation AddCommunication($input: ClaimCommunicationCreate!) {\n  createClaimCommunication(input: $input) {\n    messages\n    success\n  }\n}\n    `;\nexport type AddCommunicationMutationFn = ApolloReactCommon.MutationFunction<AddCommunicationMutation, AddCommunicationMutationVariables>;\n\n/**\n * __useAddCommunicationMutation__\n *\n * To run a mutation, you first call `useAddCommunicationMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddCommunicationMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addCommunicationMutation, { data, loading, error }] = useAddCommunicationMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useAddCommunicationMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AddCommunicationMutation, AddCommunicationMutationVariables>) {\n        return ApolloReactHooks.useMutation<AddCommunicationMutation, AddCommunicationMutationVariables>(AddCommunicationDocument, baseOptions);\n      }\nexport type AddCommunicationMutationHookResult = ReturnType<typeof useAddCommunicationMutation>;\nexport type AddCommunicationMutationResult = ApolloReactCommon.MutationResult<AddCommunicationMutation>;\nexport type AddCommunicationMutationOptions = ApolloReactCommon.BaseMutationOptions<AddCommunicationMutation, AddCommunicationMutationVariables>;\nexport const UploadDocumentDocument = gql`\n    mutation UploadDocument($input: ClaimDocumentCreate!) {\n  createClaimDocument(input: $input) {\n    success\n    messages\n  }\n}\n    `;\nexport type UploadDocumentMutationFn = ApolloReactCommon.MutationFunction<UploadDocumentMutation, UploadDocumentMutationVariables>;\n\n/**\n * __useUploadDocumentMutation__\n *\n * To run a mutation, you first call `useUploadDocumentMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUploadDocumentMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [uploadDocumentMutation, { data, loading, error }] = useUploadDocumentMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useUploadDocumentMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UploadDocumentMutation, UploadDocumentMutationVariables>) {\n        return ApolloReactHooks.useMutation<UploadDocumentMutation, UploadDocumentMutationVariables>(UploadDocumentDocument, baseOptions);\n      }\nexport type UploadDocumentMutationHookResult = ReturnType<typeof useUploadDocumentMutation>;\nexport type UploadDocumentMutationResult = ApolloReactCommon.MutationResult<UploadDocumentMutation>;\nexport type UploadDocumentMutationOptions = ApolloReactCommon.BaseMutationOptions<UploadDocumentMutation, UploadDocumentMutationVariables>;\nexport const AddJobNoteDocument = gql`\n    mutation AddJobNote($input: ClaimNoteCreate!) {\n  createClaimNote(input: $input) {\n    success\n    messages\n  }\n}\n    `;\nexport type AddJobNoteMutationFn = ApolloReactCommon.MutationFunction<AddJobNoteMutation, AddJobNoteMutationVariables>;\n\n/**\n * __useAddJobNoteMutation__\n *\n * To run a mutation, you first call `useAddJobNoteMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddJobNoteMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addJobNoteMutation, { data, loading, error }] = useAddJobNoteMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useAddJobNoteMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AddJobNoteMutation, AddJobNoteMutationVariables>) {\n        return ApolloReactHooks.useMutation<AddJobNoteMutation, AddJobNoteMutationVariables>(AddJobNoteDocument, baseOptions);\n      }\nexport type AddJobNoteMutationHookResult = ReturnType<typeof useAddJobNoteMutation>;\nexport type AddJobNoteMutationResult = ApolloReactCommon.MutationResult<AddJobNoteMutation>;\nexport type AddJobNoteMutationOptions = ApolloReactCommon.BaseMutationOptions<AddJobNoteMutation, AddJobNoteMutationVariables>;\nexport const NextStepDialogDocument = gql`\n    query NextStepDialog($where: ENDataEntityKey!) {\n  nextSteps: claimNextStep(where: $where) {\n    statusName\n    description\n    nextStep\n    portfolioType\n  }\n}\n    `;\n\n/**\n * __useNextStepDialogQuery__\n *\n * To run a query within a React component, call `useNextStepDialogQuery` and pass it any options that fit your needs.\n * When your component renders, `useNextStepDialogQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useNextStepDialogQuery({\n *   variables: {\n *      where: // value for 'where'\n *   },\n * });\n */\nexport function useNextStepDialogQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<NextStepDialogQuery, NextStepDialogQueryVariables>) {\n        return ApolloReactHooks.useQuery<NextStepDialogQuery, NextStepDialogQueryVariables>(NextStepDialogDocument, baseOptions);\n      }\nexport function useNextStepDialogLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<NextStepDialogQuery, NextStepDialogQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<NextStepDialogQuery, NextStepDialogQueryVariables>(NextStepDialogDocument, baseOptions);\n        }\nexport type NextStepDialogQueryHookResult = ReturnType<typeof useNextStepDialogQuery>;\nexport type NextStepDialogLazyQueryHookResult = ReturnType<typeof useNextStepDialogLazyQuery>;\nexport type NextStepDialogQueryResult = ApolloReactCommon.QueryResult<NextStepDialogQuery, NextStepDialogQueryVariables>;\nexport const ClaimDetailsDocument = gql`\n    query ClaimDetails($claimId: ID!) {\n  claimJob(where: {id: $claimId}) {\n    ...InfoCardDataFragment\n    ...JobInfoTabFragment\n    ...ReportTabFragment\n    ...JobNotesFragment\n  }\n}\n    ${InfoCardDataFragmentFragmentDoc}\n${JobInfoTabFragmentFragmentDoc}\n${ReportTabFragmentFragmentDoc}\n${JobNotesFragmentFragmentDoc}`;\n\n/**\n * __useClaimDetailsQuery__\n *\n * To run a query within a React component, call `useClaimDetailsQuery` and pass it any options that fit your needs.\n * When your component renders, `useClaimDetailsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useClaimDetailsQuery({\n *   variables: {\n *      claimId: // value for 'claimId'\n *   },\n * });\n */\nexport function useClaimDetailsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ClaimDetailsQuery, ClaimDetailsQueryVariables>) {\n        return ApolloReactHooks.useQuery<ClaimDetailsQuery, ClaimDetailsQueryVariables>(ClaimDetailsDocument, baseOptions);\n      }\nexport function useClaimDetailsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ClaimDetailsQuery, ClaimDetailsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<ClaimDetailsQuery, ClaimDetailsQueryVariables>(ClaimDetailsDocument, baseOptions);\n        }\nexport type ClaimDetailsQueryHookResult = ReturnType<typeof useClaimDetailsQuery>;\nexport type ClaimDetailsLazyQueryHookResult = ReturnType<typeof useClaimDetailsLazyQuery>;\nexport type ClaimDetailsQueryResult = ApolloReactCommon.QueryResult<ClaimDetailsQuery, ClaimDetailsQueryVariables>;\nexport const JobInfoDocument = gql`\n    query JobInfo($managersWhere: ClaimJobFilter, $externalAdjustersWhere: ClaimJobFilter, $eventTypeWhere: ClaimJobFilter, $catCodesWhere: ClaimJobFilter, $policyTypesWhere: ClaimJobFilter, $policyCoversWhere: ClaimJobFilter, $internalAssessorsWhere: ClaimJobFilter, $whereQuotingBuilder: ClaimJobFilter, $whereQuotingRestorer: ClaimJobFilter) {\n  ...JobInfo_ClaimDetailsCardFragment\n  ...JobInfo_QuotingBuilderCardFragment\n  ...JobInfo_QuotingRestorerCardFragment\n  _states @client {\n    label @client\n    value @client\n  }\n  _claimCategories @client {\n    label @client\n    value @client\n  }\n}\n    ${JobInfo_ClaimDetailsCardFragmentFragmentDoc}\n${JobInfo_QuotingBuilderCardFragmentFragmentDoc}\n${JobInfo_QuotingRestorerCardFragmentFragmentDoc}`;\n\n/**\n * __useJobInfoQuery__\n *\n * To run a query within a React component, call `useJobInfoQuery` and pass it any options that fit your needs.\n * When your component renders, `useJobInfoQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useJobInfoQuery({\n *   variables: {\n *      managersWhere: // value for 'managersWhere'\n *      externalAdjustersWhere: // value for 'externalAdjustersWhere'\n *      eventTypeWhere: // value for 'eventTypeWhere'\n *      catCodesWhere: // value for 'catCodesWhere'\n *      policyTypesWhere: // value for 'policyTypesWhere'\n *      policyCoversWhere: // value for 'policyCoversWhere'\n *      internalAssessorsWhere: // value for 'internalAssessorsWhere'\n *      whereQuotingBuilder: // value for 'whereQuotingBuilder'\n *      whereQuotingRestorer: // value for 'whereQuotingRestorer'\n *   },\n * });\n */\nexport function useJobInfoQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<JobInfoQuery, JobInfoQueryVariables>) {\n        return ApolloReactHooks.useQuery<JobInfoQuery, JobInfoQueryVariables>(JobInfoDocument, baseOptions);\n      }\nexport function useJobInfoLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<JobInfoQuery, JobInfoQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<JobInfoQuery, JobInfoQueryVariables>(JobInfoDocument, baseOptions);\n        }\nexport type JobInfoQueryHookResult = ReturnType<typeof useJobInfoQuery>;\nexport type JobInfoLazyQueryHookResult = ReturnType<typeof useJobInfoLazyQuery>;\nexport type JobInfoQueryResult = ApolloReactCommon.QueryResult<JobInfoQuery, JobInfoQueryVariables>;\nexport const JobInfoTabUpdateDocument = gql`\n    mutation JobInfoTabUpdate($input: ClaimJobInput!, $where: ENDataEntityKey!) {\n  updateClaimJob(input: $input, where: $where) {\n    success\n    messages\n    fieldErrors {\n      fieldName\n      level\n      message\n    }\n  }\n}\n    `;\nexport type JobInfoTabUpdateMutationFn = ApolloReactCommon.MutationFunction<JobInfoTabUpdateMutation, JobInfoTabUpdateMutationVariables>;\n\n/**\n * __useJobInfoTabUpdateMutation__\n *\n * To run a mutation, you first call `useJobInfoTabUpdateMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useJobInfoTabUpdateMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [jobInfoTabUpdateMutation, { data, loading, error }] = useJobInfoTabUpdateMutation({\n *   variables: {\n *      input: // value for 'input'\n *      where: // value for 'where'\n *   },\n * });\n */\nexport function useJobInfoTabUpdateMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<JobInfoTabUpdateMutation, JobInfoTabUpdateMutationVariables>) {\n        return ApolloReactHooks.useMutation<JobInfoTabUpdateMutation, JobInfoTabUpdateMutationVariables>(JobInfoTabUpdateDocument, baseOptions);\n      }\nexport type JobInfoTabUpdateMutationHookResult = ReturnType<typeof useJobInfoTabUpdateMutation>;\nexport type JobInfoTabUpdateMutationResult = ApolloReactCommon.MutationResult<JobInfoTabUpdateMutation>;\nexport type JobInfoTabUpdateMutationOptions = ApolloReactCommon.BaseMutationOptions<JobInfoTabUpdateMutation, JobInfoTabUpdateMutationVariables>;\nexport const JobNotesDocument = gql`\n    query JobNotes($where: ClaimItemFilter, $first: Int, $after: String) {\n  claimNotes(where: $where, first: $first, after: $after) {\n    edges {\n      node {\n        id\n        ...JobNoteListFragment\n      }\n    }\n  }\n}\n    ${JobNoteListFragmentFragmentDoc}`;\n\n/**\n * __useJobNotesQuery__\n *\n * To run a query within a React component, call `useJobNotesQuery` and pass it any options that fit your needs.\n * When your component renders, `useJobNotesQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useJobNotesQuery({\n *   variables: {\n *      where: // value for 'where'\n *      first: // value for 'first'\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useJobNotesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<JobNotesQuery, JobNotesQueryVariables>) {\n        return ApolloReactHooks.useQuery<JobNotesQuery, JobNotesQueryVariables>(JobNotesDocument, baseOptions);\n      }\nexport function useJobNotesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<JobNotesQuery, JobNotesQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<JobNotesQuery, JobNotesQueryVariables>(JobNotesDocument, baseOptions);\n        }\nexport type JobNotesQueryHookResult = ReturnType<typeof useJobNotesQuery>;\nexport type JobNotesLazyQueryHookResult = ReturnType<typeof useJobNotesLazyQuery>;\nexport type JobNotesQueryResult = ApolloReactCommon.QueryResult<JobNotesQuery, JobNotesQueryVariables>;\nexport const AppointmentMadeDocument = gql`\n    mutation AppointmentMade($id: ID!, $input: AppointmentInput!) {\n  claimMakeAppointment(where: {id: $id}, input: $input) {\n    success\n    messages\n  }\n}\n    `;\nexport type AppointmentMadeMutationFn = ApolloReactCommon.MutationFunction<AppointmentMadeMutation, AppointmentMadeMutationVariables>;\n\n/**\n * __useAppointmentMadeMutation__\n *\n * To run a mutation, you first call `useAppointmentMadeMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAppointmentMadeMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [appointmentMadeMutation, { data, loading, error }] = useAppointmentMadeMutation({\n *   variables: {\n *      id: // value for 'id'\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useAppointmentMadeMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AppointmentMadeMutation, AppointmentMadeMutationVariables>) {\n        return ApolloReactHooks.useMutation<AppointmentMadeMutation, AppointmentMadeMutationVariables>(AppointmentMadeDocument, baseOptions);\n      }\nexport type AppointmentMadeMutationHookResult = ReturnType<typeof useAppointmentMadeMutation>;\nexport type AppointmentMadeMutationResult = ApolloReactCommon.MutationResult<AppointmentMadeMutation>;\nexport type AppointmentMadeMutationOptions = ApolloReactCommon.BaseMutationOptions<AppointmentMadeMutation, AppointmentMadeMutationVariables>;\nexport const CancelAwaitingInfoDocument = gql`\n    mutation CancelAwaitingInfo($where: ENDataPortfolioKey!) {\n  claimCancelAwaitingInfo(where: $where) {\n    success\n    messages\n  }\n}\n    `;\nexport type CancelAwaitingInfoMutationFn = ApolloReactCommon.MutationFunction<CancelAwaitingInfoMutation, CancelAwaitingInfoMutationVariables>;\n\n/**\n * __useCancelAwaitingInfoMutation__\n *\n * To run a mutation, you first call `useCancelAwaitingInfoMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCancelAwaitingInfoMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [cancelAwaitingInfoMutation, { data, loading, error }] = useCancelAwaitingInfoMutation({\n *   variables: {\n *      where: // value for 'where'\n *   },\n * });\n */\nexport function useCancelAwaitingInfoMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CancelAwaitingInfoMutation, CancelAwaitingInfoMutationVariables>) {\n        return ApolloReactHooks.useMutation<CancelAwaitingInfoMutation, CancelAwaitingInfoMutationVariables>(CancelAwaitingInfoDocument, baseOptions);\n      }\nexport type CancelAwaitingInfoMutationHookResult = ReturnType<typeof useCancelAwaitingInfoMutation>;\nexport type CancelAwaitingInfoMutationResult = ApolloReactCommon.MutationResult<CancelAwaitingInfoMutation>;\nexport type CancelAwaitingInfoMutationOptions = ApolloReactCommon.BaseMutationOptions<CancelAwaitingInfoMutation, CancelAwaitingInfoMutationVariables>;\nexport const AddAwaitingInfoDocument = gql`\n    mutation AddAwaitingInfo($input: AwaitingInfoClaimInputType!, $where: ENDataPortfolioKey!) {\n  claimAwaitingInfo(input: $input, where: $where) {\n    success\n    messages\n  }\n}\n    `;\nexport type AddAwaitingInfoMutationFn = ApolloReactCommon.MutationFunction<AddAwaitingInfoMutation, AddAwaitingInfoMutationVariables>;\n\n/**\n * __useAddAwaitingInfoMutation__\n *\n * To run a mutation, you first call `useAddAwaitingInfoMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddAwaitingInfoMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addAwaitingInfoMutation, { data, loading, error }] = useAddAwaitingInfoMutation({\n *   variables: {\n *      input: // value for 'input'\n *      where: // value for 'where'\n *   },\n * });\n */\nexport function useAddAwaitingInfoMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AddAwaitingInfoMutation, AddAwaitingInfoMutationVariables>) {\n        return ApolloReactHooks.useMutation<AddAwaitingInfoMutation, AddAwaitingInfoMutationVariables>(AddAwaitingInfoDocument, baseOptions);\n      }\nexport type AddAwaitingInfoMutationHookResult = ReturnType<typeof useAddAwaitingInfoMutation>;\nexport type AddAwaitingInfoMutationResult = ApolloReactCommon.MutationResult<AddAwaitingInfoMutation>;\nexport type AddAwaitingInfoMutationOptions = ApolloReactCommon.BaseMutationOptions<AddAwaitingInfoMutation, AddAwaitingInfoMutationVariables>;\nexport const AwaitingInfoFormDocument = gql`\n    query AwaitingInfoForm($portfolios: [PortfolioType]) {\n  claimFilterOptions(where: {subject: \"awaitingInfoReasons\", portfolios: $portfolios}) {\n    label: name\n    value\n  }\n}\n    `;\n\n/**\n * __useAwaitingInfoFormQuery__\n *\n * To run a query within a React component, call `useAwaitingInfoFormQuery` and pass it any options that fit your needs.\n * When your component renders, `useAwaitingInfoFormQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAwaitingInfoFormQuery({\n *   variables: {\n *      portfolios: // value for 'portfolios'\n *   },\n * });\n */\nexport function useAwaitingInfoFormQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AwaitingInfoFormQuery, AwaitingInfoFormQueryVariables>) {\n        return ApolloReactHooks.useQuery<AwaitingInfoFormQuery, AwaitingInfoFormQueryVariables>(AwaitingInfoFormDocument, baseOptions);\n      }\nexport function useAwaitingInfoFormLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AwaitingInfoFormQuery, AwaitingInfoFormQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<AwaitingInfoFormQuery, AwaitingInfoFormQueryVariables>(AwaitingInfoFormDocument, baseOptions);\n        }\nexport type AwaitingInfoFormQueryHookResult = ReturnType<typeof useAwaitingInfoFormQuery>;\nexport type AwaitingInfoFormLazyQueryHookResult = ReturnType<typeof useAwaitingInfoFormLazyQuery>;\nexport type AwaitingInfoFormQueryResult = ApolloReactCommon.QueryResult<AwaitingInfoFormQuery, AwaitingInfoFormQueryVariables>;\nexport const ChangeAppointmentDocument = gql`\n    mutation ChangeAppointment($id: ID!, $input: AppointmentInput!) {\n  claimMakeAppointment(where: {id: $id}, input: $input) {\n    success\n    messages\n  }\n}\n    `;\nexport type ChangeAppointmentMutationFn = ApolloReactCommon.MutationFunction<ChangeAppointmentMutation, ChangeAppointmentMutationVariables>;\n\n/**\n * __useChangeAppointmentMutation__\n *\n * To run a mutation, you first call `useChangeAppointmentMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useChangeAppointmentMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [changeAppointmentMutation, { data, loading, error }] = useChangeAppointmentMutation({\n *   variables: {\n *      id: // value for 'id'\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useChangeAppointmentMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ChangeAppointmentMutation, ChangeAppointmentMutationVariables>) {\n        return ApolloReactHooks.useMutation<ChangeAppointmentMutation, ChangeAppointmentMutationVariables>(ChangeAppointmentDocument, baseOptions);\n      }\nexport type ChangeAppointmentMutationHookResult = ReturnType<typeof useChangeAppointmentMutation>;\nexport type ChangeAppointmentMutationResult = ApolloReactCommon.MutationResult<ChangeAppointmentMutation>;\nexport type ChangeAppointmentMutationOptions = ApolloReactCommon.BaseMutationOptions<ChangeAppointmentMutation, ChangeAppointmentMutationVariables>;\nexport const InitCallDocument = gql`\n    mutation InitCall($id: ID!) {\n  claimInitialCall(where: {id: $id}) {\n    success\n    messages\n  }\n}\n    `;\nexport type InitCallMutationFn = ApolloReactCommon.MutationFunction<InitCallMutation, InitCallMutationVariables>;\n\n/**\n * __useInitCallMutation__\n *\n * To run a mutation, you first call `useInitCallMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useInitCallMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [initCallMutation, { data, loading, error }] = useInitCallMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useInitCallMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<InitCallMutation, InitCallMutationVariables>) {\n        return ApolloReactHooks.useMutation<InitCallMutation, InitCallMutationVariables>(InitCallDocument, baseOptions);\n      }\nexport type InitCallMutationHookResult = ReturnType<typeof useInitCallMutation>;\nexport type InitCallMutationResult = ApolloReactCommon.MutationResult<InitCallMutation>;\nexport type InitCallMutationOptions = ApolloReactCommon.BaseMutationOptions<InitCallMutation, InitCallMutationVariables>;\nexport const SaveReportDocument = gql`\n    mutation SaveReport($claimId: ID!, $data: Json!) {\n  claimReportUpsert(claimId: $claimId, data: $data) {\n    id\n  }\n}\n    `;\nexport type SaveReportMutationFn = ApolloReactCommon.MutationFunction<SaveReportMutation, SaveReportMutationVariables>;\n\n/**\n * __useSaveReportMutation__\n *\n * To run a mutation, you first call `useSaveReportMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSaveReportMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [saveReportMutation, { data, loading, error }] = useSaveReportMutation({\n *   variables: {\n *      claimId: // value for 'claimId'\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useSaveReportMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SaveReportMutation, SaveReportMutationVariables>) {\n        return ApolloReactHooks.useMutation<SaveReportMutation, SaveReportMutationVariables>(SaveReportDocument, baseOptions);\n      }\nexport type SaveReportMutationHookResult = ReturnType<typeof useSaveReportMutation>;\nexport type SaveReportMutationResult = ApolloReactCommon.MutationResult<SaveReportMutation>;\nexport type SaveReportMutationOptions = ApolloReactCommon.BaseMutationOptions<SaveReportMutation, SaveReportMutationVariables>;\nexport const SubmitReportDocument = gql`\n    mutation SubmitReport($claimId: ID!) {\n  claimReportSubmit(claimId: $claimId) {\n    id\n  }\n}\n    `;\nexport type SubmitReportMutationFn = ApolloReactCommon.MutationFunction<SubmitReportMutation, SubmitReportMutationVariables>;\n\n/**\n * __useSubmitReportMutation__\n *\n * To run a mutation, you first call `useSubmitReportMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSubmitReportMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [submitReportMutation, { data, loading, error }] = useSubmitReportMutation({\n *   variables: {\n *      claimId: // value for 'claimId'\n *   },\n * });\n */\nexport function useSubmitReportMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SubmitReportMutation, SubmitReportMutationVariables>) {\n        return ApolloReactHooks.useMutation<SubmitReportMutation, SubmitReportMutationVariables>(SubmitReportDocument, baseOptions);\n      }\nexport type SubmitReportMutationHookResult = ReturnType<typeof useSubmitReportMutation>;\nexport type SubmitReportMutationResult = ApolloReactCommon.MutationResult<SubmitReportMutation>;\nexport type SubmitReportMutationOptions = ApolloReactCommon.BaseMutationOptions<SubmitReportMutation, SubmitReportMutationVariables>;\nexport const ResetReportDocument = gql`\n    mutation ResetReport($claimId: ID!) {\n  claimReportReset(claimId: $claimId) {\n    id\n  }\n}\n    `;\nexport type ResetReportMutationFn = ApolloReactCommon.MutationFunction<ResetReportMutation, ResetReportMutationVariables>;\n\n/**\n * __useResetReportMutation__\n *\n * To run a mutation, you first call `useResetReportMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useResetReportMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [resetReportMutation, { data, loading, error }] = useResetReportMutation({\n *   variables: {\n *      claimId: // value for 'claimId'\n *   },\n * });\n */\nexport function useResetReportMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ResetReportMutation, ResetReportMutationVariables>) {\n        return ApolloReactHooks.useMutation<ResetReportMutation, ResetReportMutationVariables>(ResetReportDocument, baseOptions);\n      }\nexport type ResetReportMutationHookResult = ReturnType<typeof useResetReportMutation>;\nexport type ResetReportMutationResult = ApolloReactCommon.MutationResult<ResetReportMutation>;\nexport type ResetReportMutationOptions = ApolloReactCommon.BaseMutationOptions<ResetReportMutation, ResetReportMutationVariables>;\nexport const ClaimListFilterDocument = gql`\n    query ClaimListFilter {\n  currentUser {\n    claimFilters {\n      id\n      type\n      label\n      name\n      options {\n        group\n        label\n        value: id\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useClaimListFilterQuery__\n *\n * To run a query within a React component, call `useClaimListFilterQuery` and pass it any options that fit your needs.\n * When your component renders, `useClaimListFilterQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useClaimListFilterQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useClaimListFilterQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ClaimListFilterQuery, ClaimListFilterQueryVariables>) {\n        return ApolloReactHooks.useQuery<ClaimListFilterQuery, ClaimListFilterQueryVariables>(ClaimListFilterDocument, baseOptions);\n      }\nexport function useClaimListFilterLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ClaimListFilterQuery, ClaimListFilterQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<ClaimListFilterQuery, ClaimListFilterQueryVariables>(ClaimListFilterDocument, baseOptions);\n        }\nexport type ClaimListFilterQueryHookResult = ReturnType<typeof useClaimListFilterQuery>;\nexport type ClaimListFilterLazyQueryHookResult = ReturnType<typeof useClaimListFilterLazyQuery>;\nexport type ClaimListFilterQueryResult = ApolloReactCommon.QueryResult<ClaimListFilterQuery, ClaimListFilterQueryVariables>;\nexport const ClaimListWaterfallFilterDocument = gql`\n    query ClaimListWaterfallFilter($where: ClaimStatusVolumeWhere!) {\n  currentUser {\n    waterfallFilters(where: $where) {\n      id\n      items {\n        value: id\n        label\n        claimCount\n        color\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useClaimListWaterfallFilterQuery__\n *\n * To run a query within a React component, call `useClaimListWaterfallFilterQuery` and pass it any options that fit your needs.\n * When your component renders, `useClaimListWaterfallFilterQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useClaimListWaterfallFilterQuery({\n *   variables: {\n *      where: // value for 'where'\n *   },\n * });\n */\nexport function useClaimListWaterfallFilterQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ClaimListWaterfallFilterQuery, ClaimListWaterfallFilterQueryVariables>) {\n        return ApolloReactHooks.useQuery<ClaimListWaterfallFilterQuery, ClaimListWaterfallFilterQueryVariables>(ClaimListWaterfallFilterDocument, baseOptions);\n      }\nexport function useClaimListWaterfallFilterLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ClaimListWaterfallFilterQuery, ClaimListWaterfallFilterQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<ClaimListWaterfallFilterQuery, ClaimListWaterfallFilterQueryVariables>(ClaimListWaterfallFilterDocument, baseOptions);\n        }\nexport type ClaimListWaterfallFilterQueryHookResult = ReturnType<typeof useClaimListWaterfallFilterQuery>;\nexport type ClaimListWaterfallFilterLazyQueryHookResult = ReturnType<typeof useClaimListWaterfallFilterLazyQuery>;\nexport type ClaimListWaterfallFilterQueryResult = ApolloReactCommon.QueryResult<ClaimListWaterfallFilterQuery, ClaimListWaterfallFilterQueryVariables>;\nexport const ClaimListDataDocument = gql`\n    query ClaimListData($first: Int, $after: String, $where: ClaimJobFilter) {\n  currentUser {\n    userType\n  }\n  claimJobs(first: $first, after: $after, where: $where) @connection(key: \"claimJobs\", filter: [\"where\"]) {\n    totalCount\n    edges {\n      node {\n        ...ClaimListBody\n      }\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n}\n    ${ClaimListBodyFragmentDoc}`;\n\n/**\n * __useClaimListDataQuery__\n *\n * To run a query within a React component, call `useClaimListDataQuery` and pass it any options that fit your needs.\n * When your component renders, `useClaimListDataQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useClaimListDataQuery({\n *   variables: {\n *      first: // value for 'first'\n *      after: // value for 'after'\n *      where: // value for 'where'\n *   },\n * });\n */\nexport function useClaimListDataQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ClaimListDataQuery, ClaimListDataQueryVariables>) {\n        return ApolloReactHooks.useQuery<ClaimListDataQuery, ClaimListDataQueryVariables>(ClaimListDataDocument, baseOptions);\n      }\nexport function useClaimListDataLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ClaimListDataQuery, ClaimListDataQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<ClaimListDataQuery, ClaimListDataQueryVariables>(ClaimListDataDocument, baseOptions);\n        }\nexport type ClaimListDataQueryHookResult = ReturnType<typeof useClaimListDataQuery>;\nexport type ClaimListDataLazyQueryHookResult = ReturnType<typeof useClaimListDataLazyQuery>;\nexport type ClaimListDataQueryResult = ApolloReactCommon.QueryResult<ClaimListDataQuery, ClaimListDataQueryVariables>;\nexport const CommunicationActionAcknowledgeDocument = gql`\n    mutation CommunicationActionAcknowledge($where: ENDataPortfolioKey!) {\n  claimCommunicationAcknoledge(where: $where) {\n    messages\n    success\n  }\n}\n    `;\nexport type CommunicationActionAcknowledgeMutationFn = ApolloReactCommon.MutationFunction<CommunicationActionAcknowledgeMutation, CommunicationActionAcknowledgeMutationVariables>;\n\n/**\n * __useCommunicationActionAcknowledgeMutation__\n *\n * To run a mutation, you first call `useCommunicationActionAcknowledgeMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCommunicationActionAcknowledgeMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [communicationActionAcknowledgeMutation, { data, loading, error }] = useCommunicationActionAcknowledgeMutation({\n *   variables: {\n *      where: // value for 'where'\n *   },\n * });\n */\nexport function useCommunicationActionAcknowledgeMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CommunicationActionAcknowledgeMutation, CommunicationActionAcknowledgeMutationVariables>) {\n        return ApolloReactHooks.useMutation<CommunicationActionAcknowledgeMutation, CommunicationActionAcknowledgeMutationVariables>(CommunicationActionAcknowledgeDocument, baseOptions);\n      }\nexport type CommunicationActionAcknowledgeMutationHookResult = ReturnType<typeof useCommunicationActionAcknowledgeMutation>;\nexport type CommunicationActionAcknowledgeMutationResult = ApolloReactCommon.MutationResult<CommunicationActionAcknowledgeMutation>;\nexport type CommunicationActionAcknowledgeMutationOptions = ApolloReactCommon.BaseMutationOptions<CommunicationActionAcknowledgeMutation, CommunicationActionAcknowledgeMutationVariables>;\nexport const CommunicationActionReplyDocument = gql`\n    mutation CommunicationActionReply($input: ClaimCommunicationCreate!) {\n  createClaimCommunication(input: $input) {\n    messages\n    success\n  }\n}\n    `;\nexport type CommunicationActionReplyMutationFn = ApolloReactCommon.MutationFunction<CommunicationActionReplyMutation, CommunicationActionReplyMutationVariables>;\n\n/**\n * __useCommunicationActionReplyMutation__\n *\n * To run a mutation, you first call `useCommunicationActionReplyMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCommunicationActionReplyMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [communicationActionReplyMutation, { data, loading, error }] = useCommunicationActionReplyMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useCommunicationActionReplyMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CommunicationActionReplyMutation, CommunicationActionReplyMutationVariables>) {\n        return ApolloReactHooks.useMutation<CommunicationActionReplyMutation, CommunicationActionReplyMutationVariables>(CommunicationActionReplyDocument, baseOptions);\n      }\nexport type CommunicationActionReplyMutationHookResult = ReturnType<typeof useCommunicationActionReplyMutation>;\nexport type CommunicationActionReplyMutationResult = ApolloReactCommon.MutationResult<CommunicationActionReplyMutation>;\nexport type CommunicationActionReplyMutationOptions = ApolloReactCommon.BaseMutationOptions<CommunicationActionReplyMutation, CommunicationActionReplyMutationVariables>;\nexport const CommunicationListFiltersDocument = gql`\n    query CommunicationListFilters {\n  currentUser {\n    communicationFilters {\n      ...CommunicationHeaderFragment\n    }\n  }\n}\n    ${CommunicationHeaderFragmentFragmentDoc}`;\n\n/**\n * __useCommunicationListFiltersQuery__\n *\n * To run a query within a React component, call `useCommunicationListFiltersQuery` and pass it any options that fit your needs.\n * When your component renders, `useCommunicationListFiltersQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCommunicationListFiltersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useCommunicationListFiltersQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<CommunicationListFiltersQuery, CommunicationListFiltersQueryVariables>) {\n        return ApolloReactHooks.useQuery<CommunicationListFiltersQuery, CommunicationListFiltersQueryVariables>(CommunicationListFiltersDocument, baseOptions);\n      }\nexport function useCommunicationListFiltersLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CommunicationListFiltersQuery, CommunicationListFiltersQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<CommunicationListFiltersQuery, CommunicationListFiltersQueryVariables>(CommunicationListFiltersDocument, baseOptions);\n        }\nexport type CommunicationListFiltersQueryHookResult = ReturnType<typeof useCommunicationListFiltersQuery>;\nexport type CommunicationListFiltersLazyQueryHookResult = ReturnType<typeof useCommunicationListFiltersLazyQuery>;\nexport type CommunicationListFiltersQueryResult = ApolloReactCommon.QueryResult<CommunicationListFiltersQuery, CommunicationListFiltersQueryVariables>;\nexport const CommunicationsDataDocument = gql`\n    query CommunicationsData($first: Int, $after: String, $where: CommunicationFilter) {\n  claimCommunications: claimCommuications(first: $first, after: $after, where: $where) @connection(key: \"claimCommunications\", filter: [\"where\"]) {\n    totalCount\n    edges {\n      node {\n        ...ClaimCommunicationBody\n      }\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n}\n    ${ClaimCommunicationBodyFragmentDoc}`;\n\n/**\n * __useCommunicationsDataQuery__\n *\n * To run a query within a React component, call `useCommunicationsDataQuery` and pass it any options that fit your needs.\n * When your component renders, `useCommunicationsDataQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCommunicationsDataQuery({\n *   variables: {\n *      first: // value for 'first'\n *      after: // value for 'after'\n *      where: // value for 'where'\n *   },\n * });\n */\nexport function useCommunicationsDataQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<CommunicationsDataQuery, CommunicationsDataQueryVariables>) {\n        return ApolloReactHooks.useQuery<CommunicationsDataQuery, CommunicationsDataQueryVariables>(CommunicationsDataDocument, baseOptions);\n      }\nexport function useCommunicationsDataLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CommunicationsDataQuery, CommunicationsDataQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<CommunicationsDataQuery, CommunicationsDataQueryVariables>(CommunicationsDataDocument, baseOptions);\n        }\nexport type CommunicationsDataQueryHookResult = ReturnType<typeof useCommunicationsDataQuery>;\nexport type CommunicationsDataLazyQueryHookResult = ReturnType<typeof useCommunicationsDataLazyQuery>;\nexport type CommunicationsDataQueryResult = ApolloReactCommon.QueryResult<CommunicationsDataQuery, CommunicationsDataQueryVariables>;\nexport const KpiAlertDetailsDocument = gql`\n    query KpiAlertDetails($where: CaseReportIndex!, $first: Int, $after: String) {\n  reportingClaimJobGeneral(where: $where, first: $first, after: $after) {\n    edges {\n      node {\n        id\n        portfolioType\n        refNumber\n        insuredName\n        caseManagerName\n        status {\n          statusName\n        }\n        daysAtStatus\n      }\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n}\n    `;\n\n/**\n * __useKpiAlertDetailsQuery__\n *\n * To run a query within a React component, call `useKpiAlertDetailsQuery` and pass it any options that fit your needs.\n * When your component renders, `useKpiAlertDetailsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useKpiAlertDetailsQuery({\n *   variables: {\n *      where: // value for 'where'\n *      first: // value for 'first'\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useKpiAlertDetailsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<KpiAlertDetailsQuery, KpiAlertDetailsQueryVariables>) {\n        return ApolloReactHooks.useQuery<KpiAlertDetailsQuery, KpiAlertDetailsQueryVariables>(KpiAlertDetailsDocument, baseOptions);\n      }\nexport function useKpiAlertDetailsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<KpiAlertDetailsQuery, KpiAlertDetailsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<KpiAlertDetailsQuery, KpiAlertDetailsQueryVariables>(KpiAlertDetailsDocument, baseOptions);\n        }\nexport type KpiAlertDetailsQueryHookResult = ReturnType<typeof useKpiAlertDetailsQuery>;\nexport type KpiAlertDetailsLazyQueryHookResult = ReturnType<typeof useKpiAlertDetailsLazyQuery>;\nexport type KpiAlertDetailsQueryResult = ApolloReactCommon.QueryResult<KpiAlertDetailsQuery, KpiAlertDetailsQueryVariables>;\nexport const DashboardFiltersDocument = gql`\n    query DashboardFilters {\n  currentUser {\n    userType\n    dashboardFilters {\n      ...DashboardHeaderFragment\n    }\n  }\n  dashboardFilters {\n    id\n    name\n    options {\n      group\n      label: name\n      value\n    }\n  }\n}\n    ${DashboardHeaderFragmentFragmentDoc}`;\n\n/**\n * __useDashboardFiltersQuery__\n *\n * To run a query within a React component, call `useDashboardFiltersQuery` and pass it any options that fit your needs.\n * When your component renders, `useDashboardFiltersQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useDashboardFiltersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useDashboardFiltersQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<DashboardFiltersQuery, DashboardFiltersQueryVariables>) {\n        return ApolloReactHooks.useQuery<DashboardFiltersQuery, DashboardFiltersQueryVariables>(DashboardFiltersDocument, baseOptions);\n      }\nexport function useDashboardFiltersLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<DashboardFiltersQuery, DashboardFiltersQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<DashboardFiltersQuery, DashboardFiltersQueryVariables>(DashboardFiltersDocument, baseOptions);\n        }\nexport type DashboardFiltersQueryHookResult = ReturnType<typeof useDashboardFiltersQuery>;\nexport type DashboardFiltersLazyQueryHookResult = ReturnType<typeof useDashboardFiltersLazyQuery>;\nexport type DashboardFiltersQueryResult = ApolloReactCommon.QueryResult<DashboardFiltersQuery, DashboardFiltersQueryVariables>;\nexport const DashboardKpiDocument = gql`\n    query DashboardKpi($where: DashboardWidgetIndex!) {\n  dashboardWidgets(where: $where) {\n    title\n    viewName\n    labels\n    description\n    data {\n      dataSetName\n      internalFilterName\n      legend\n      valueDisplay\n      valueGroup\n      valueUnit\n      valueSense\n      values\n    }\n  }\n}\n    `;\n\n/**\n * __useDashboardKpiQuery__\n *\n * To run a query within a React component, call `useDashboardKpiQuery` and pass it any options that fit your needs.\n * When your component renders, `useDashboardKpiQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useDashboardKpiQuery({\n *   variables: {\n *      where: // value for 'where'\n *   },\n * });\n */\nexport function useDashboardKpiQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<DashboardKpiQuery, DashboardKpiQueryVariables>) {\n        return ApolloReactHooks.useQuery<DashboardKpiQuery, DashboardKpiQueryVariables>(DashboardKpiDocument, baseOptions);\n      }\nexport function useDashboardKpiLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<DashboardKpiQuery, DashboardKpiQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<DashboardKpiQuery, DashboardKpiQueryVariables>(DashboardKpiDocument, baseOptions);\n        }\nexport type DashboardKpiQueryHookResult = ReturnType<typeof useDashboardKpiQuery>;\nexport type DashboardKpiLazyQueryHookResult = ReturnType<typeof useDashboardKpiLazyQuery>;\nexport type DashboardKpiQueryResult = ApolloReactCommon.QueryResult<DashboardKpiQuery, DashboardKpiQueryVariables>;\nexport const AppRootDocument = gql`\n    query AppRoot {\n  currentUser {\n    _appRoutes @client\n    _rootRoute @client\n    _customisation @client {\n      alias\n      favicon\n      logo\n      companyLogo\n    }\n  }\n}\n    `;\n\n/**\n * __useAppRootQuery__\n *\n * To run a query within a React component, call `useAppRootQuery` and pass it any options that fit your needs.\n * When your component renders, `useAppRootQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAppRootQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useAppRootQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AppRootQuery, AppRootQueryVariables>) {\n        return ApolloReactHooks.useQuery<AppRootQuery, AppRootQueryVariables>(AppRootDocument, baseOptions);\n      }\nexport function useAppRootLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AppRootQuery, AppRootQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<AppRootQuery, AppRootQueryVariables>(AppRootDocument, baseOptions);\n        }\nexport type AppRootQueryHookResult = ReturnType<typeof useAppRootQuery>;\nexport type AppRootLazyQueryHookResult = ReturnType<typeof useAppRootLazyQuery>;\nexport type AppRootQueryResult = ApolloReactCommon.QueryResult<AppRootQuery, AppRootQueryVariables>;\nexport const LoginDocument = gql`\n    query Login {\n  me: currentUser {\n    id\n    name\n  }\n}\n    `;\n\n/**\n * __useLoginQuery__\n *\n * To run a query within a React component, call `useLoginQuery` and pass it any options that fit your needs.\n * When your component renders, `useLoginQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useLoginQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useLoginQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<LoginQuery, LoginQueryVariables>) {\n        return ApolloReactHooks.useQuery<LoginQuery, LoginQueryVariables>(LoginDocument, baseOptions);\n      }\nexport function useLoginLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<LoginQuery, LoginQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<LoginQuery, LoginQueryVariables>(LoginDocument, baseOptions);\n        }\nexport type LoginQueryHookResult = ReturnType<typeof useLoginQuery>;\nexport type LoginLazyQueryHookResult = ReturnType<typeof useLoginLazyQuery>;\nexport type LoginQueryResult = ApolloReactCommon.QueryResult<LoginQuery, LoginQueryVariables>;\nexport const SigninDocument = gql`\n    mutation Signin($input: UserCredential!) {\n  userAuthenticateAllServer(input: $input) {\n    accessToken\n    refreshToken\n    user {\n      userName\n    }\n  }\n}\n    `;\nexport type SigninMutationFn = ApolloReactCommon.MutationFunction<SigninMutation, SigninMutationVariables>;\n\n/**\n * __useSigninMutation__\n *\n * To run a mutation, you first call `useSigninMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSigninMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [signinMutation, { data, loading, error }] = useSigninMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useSigninMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SigninMutation, SigninMutationVariables>) {\n        return ApolloReactHooks.useMutation<SigninMutation, SigninMutationVariables>(SigninDocument, baseOptions);\n      }\nexport type SigninMutationHookResult = ReturnType<typeof useSigninMutation>;\nexport type SigninMutationResult = ApolloReactCommon.MutationResult<SigninMutation>;\nexport type SigninMutationOptions = ApolloReactCommon.BaseMutationOptions<SigninMutation, SigninMutationVariables>;","import ownerDocument from './ownerDocument';\nexport default function ownerWindow(node) {\n  var doc = ownerDocument(node);\n  return doc.defaultView || window;\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport Typography from '../Typography';\nimport withStyles from '../styles/withStyles';\nimport FormControlContext, { useFormControl } from '../FormControl/FormControlContext';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    height: '0.01em',\n    // Fix IE 11 flexbox alignment. To remove at some point.\n    maxHeight: '2em',\n    alignItems: 'center',\n    whiteSpace: 'nowrap'\n  },\n\n  /* Styles applied to the root element if `variant=\"filled\"`. */\n  filled: {\n    '&$positionStart:not($hiddenLabel)': {\n      marginTop: 16\n    }\n  },\n\n  /* Styles applied to the root element if `position=\"start\"`. */\n  positionStart: {\n    marginRight: 8\n  },\n\n  /* Styles applied to the root element if `position=\"end\"`. */\n  positionEnd: {\n    marginLeft: 8\n  },\n\n  /* Styles applied to the root element if `disablePointerEvents=true`. */\n  disablePointerEvents: {\n    pointerEvents: 'none'\n  },\n\n  /* Styles applied if the adornment is used inside <FormControl hiddenLabel />. */\n  hiddenLabel: {},\n\n  /* Styles applied if the adornment is used inside <FormControl margin=\"dense\" />. */\n  marginDense: {}\n};\nvar InputAdornment = React.forwardRef(function InputAdornment(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      _props$disablePointer = props.disablePointerEvents,\n      disablePointerEvents = _props$disablePointer === void 0 ? false : _props$disablePointer,\n      _props$disableTypogra = props.disableTypography,\n      disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra,\n      position = props.position,\n      variantProp = props.variant,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"component\", \"disablePointerEvents\", \"disableTypography\", \"position\", \"variant\"]);\n\n  var muiFormControl = useFormControl() || {};\n  var variant = variantProp;\n\n  if (variantProp && muiFormControl.variant) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (variantProp === muiFormControl.variant) {\n        console.error('Material-UI: The `InputAdornment` variant infers the variant prop ' + 'you do not have to provide one.');\n      }\n    }\n  }\n\n  if (muiFormControl && !variant) {\n    variant = muiFormControl.variant;\n  }\n\n  return React.createElement(FormControlContext.Provider, {\n    value: null\n  }, React.createElement(Component, _extends({\n    className: clsx(classes.root, className, disablePointerEvents && classes.disablePointerEvents, muiFormControl.hiddenLabel && classes.hiddenLabel, variant === 'filled' && classes.filled, {\n      'start': classes.positionStart,\n      'end': classes.positionEnd\n    }[position], muiFormControl.margin === 'dense' && classes.marginDense),\n    ref: ref\n  }, other), typeof children === 'string' && !disableTypography ? React.createElement(Typography, {\n    color: \"textSecondary\"\n  }, children) : children));\n});\nprocess.env.NODE_ENV !== \"production\" ? InputAdornment.propTypes = {\n  /**\n   * The content of the component, normally an `IconButton` or string.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * Disable pointer events on the root.\n   * This allows for the content of the adornment to focus the input on click.\n   */\n  disablePointerEvents: PropTypes.bool,\n\n  /**\n   * If children is a string then disable wrapping in a Typography component.\n   */\n  disableTypography: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  muiFormControl: PropTypes.object,\n\n  /**\n   * The position this adornment should appear relative to the `Input`.\n   */\n  position: PropTypes.oneOf(['start', 'end']),\n\n  /**\n   * The variant to use.\n   * Note: If you are using the `TextField` component or the `FormControl` component\n   * you do not have to set this manually.\n   */\n  variant: PropTypes.oneOf(['standard', 'outlined', 'filled'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiInputAdornment'\n})(InputAdornment);","import React from 'react';\nexport default function isMuiElement(element, muiNames) {\n  return React.isValidElement(element) && muiNames.indexOf(element.type.muiName) !== -1;\n}","// A change of the browser zoom change the scrollbar size.\n// Credit https://github.com/twbs/bootstrap/blob/3ffe3a5d82f6f561b82ff78d82b32a7d14aed558/js/src/modal.js#L512-L519\nexport default function getScrollbarSize() {\n  var scrollDiv = document.createElement('div');\n  scrollDiv.style.width = '99px';\n  scrollDiv.style.height = '99px';\n  scrollDiv.style.position = 'absolute';\n  scrollDiv.style.top = '-9999px';\n  scrollDiv.style.overflow = 'scroll';\n  document.body.appendChild(scrollDiv);\n  var scrollbarSize = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n  document.body.removeChild(scrollDiv);\n  return scrollbarSize;\n}","import React from 'react';\n/**\n * @ignore - internal component.\n */\n\nvar ListContext = React.createContext({});\n\nif (process.env.NODE_ENV !== 'production') {\n  ListContext.displayName = 'ListContext';\n}\n\nexport default ListContext;","import { equal } from '@wry/equality';\nimport { invariant } from 'ts-invariant';\nimport { parser, operationName } from '../parser/parser';\nvar OperationData = (function () {\n    function OperationData(options, context) {\n        this.isMounted = false;\n        this.previousOptions = {};\n        this.context = {};\n        this.options = {};\n        this.options = options || {};\n        this.context = context || {};\n    }\n    OperationData.prototype.getOptions = function () {\n        return this.options;\n    };\n    OperationData.prototype.setOptions = function (newOptions, storePrevious) {\n        if (storePrevious === void 0) { storePrevious = false; }\n        if (storePrevious && !equal(this.options, newOptions)) {\n            this.previousOptions = this.options;\n        }\n        this.options = newOptions;\n    };\n    OperationData.prototype.unmount = function () {\n        this.isMounted = false;\n    };\n    OperationData.prototype.refreshClient = function () {\n        var client = (this.options && this.options.client) ||\n            (this.context && this.context.client);\n        invariant(!!client, 'Could not find \"client\" in the context or passed in as an option. ' +\n            'Wrap the root component in an <ApolloProvider>, or pass an ' +\n            'ApolloClient instance in via options.');\n        var isNew = false;\n        if (client !== this.client) {\n            isNew = true;\n            this.client = client;\n            this.cleanup();\n        }\n        return {\n            client: this.client,\n            isNew: isNew\n        };\n    };\n    OperationData.prototype.verifyDocumentType = function (document, type) {\n        var operation = parser(document);\n        var requiredOperationName = operationName(type);\n        var usedOperationName = operationName(operation.type);\n        invariant(operation.type === type, \"Running a \" + requiredOperationName + \" requires a graphql \" +\n            (requiredOperationName + \", but a \" + usedOperationName + \" was used instead.\"));\n    };\n    return OperationData;\n}());\nexport { OperationData };\n//# sourceMappingURL=OperationData.js.map","import { __assign, __extends } from \"tslib\";\nimport { equal } from '@wry/equality';\nimport { ApolloError } from '../../errors/ApolloError';\nimport { NetworkStatus } from '../../core/networkStatus';\nimport { DocumentType } from '../parser/parser';\nimport { OperationData } from './OperationData';\nvar QueryData = (function (_super) {\n    __extends(QueryData, _super);\n    function QueryData(_a) {\n        var options = _a.options, context = _a.context, forceUpdate = _a.forceUpdate;\n        var _this = _super.call(this, options, context) || this;\n        _this.previousData = {};\n        _this.currentObservable = {};\n        _this.runLazy = false;\n        _this.runLazyQuery = function (options) {\n            _this.cleanup();\n            _this.runLazy = true;\n            _this.lazyOptions = options;\n            _this.forceUpdate();\n        };\n        _this.getQueryResult = function () {\n            var result = _this.observableQueryFields();\n            var options = _this.getOptions();\n            if (options.skip) {\n                result = __assign(__assign({}, result), { data: undefined, error: undefined, loading: false, called: true });\n            }\n            else {\n                var currentResult = _this.currentObservable.query.getCurrentResult();\n                var loading = currentResult.loading, partial = currentResult.partial, networkStatus = currentResult.networkStatus, errors = currentResult.errors;\n                var error = currentResult.error, data = currentResult.data;\n                if (errors && errors.length > 0) {\n                    error = new ApolloError({ graphQLErrors: errors });\n                }\n                result = __assign(__assign({}, result), { loading: loading,\n                    networkStatus: networkStatus,\n                    error: error, called: true });\n                if (loading) {\n                    var previousData = _this.previousData.result && _this.previousData.result.data;\n                    result.data =\n                        previousData && data\n                            ? __assign(__assign({}, previousData), data) : previousData || data;\n                }\n                else if (error) {\n                    Object.assign(result, {\n                        data: (_this.currentObservable.query.getLastResult() || {})\n                            .data\n                    });\n                }\n                else {\n                    var fetchPolicy = _this.currentObservable.query.options.fetchPolicy;\n                    var partialRefetch = options.partialRefetch;\n                    if (partialRefetch &&\n                        partial &&\n                        (!data || Object.keys(data).length === 0) &&\n                        fetchPolicy !== 'cache-only') {\n                        Object.assign(result, {\n                            loading: true,\n                            networkStatus: NetworkStatus.loading\n                        });\n                        result.refetch();\n                        return result;\n                    }\n                    result.data = data;\n                }\n            }\n            result.client = _this.client;\n            _this.setOptions(options, true);\n            _this.previousData.loading =\n                _this.previousData.result && _this.previousData.result.loading || false;\n            return _this.previousData.result = result;\n        };\n        _this.obsRefetch = function (variables) {\n            return _this.currentObservable.query.refetch(variables);\n        };\n        _this.obsFetchMore = function (fetchMoreOptions) { return _this.currentObservable.query.fetchMore(fetchMoreOptions); };\n        _this.obsUpdateQuery = function (mapFn) { return _this.currentObservable.query.updateQuery(mapFn); };\n        _this.obsStartPolling = function (pollInterval) {\n            _this.currentObservable &&\n                _this.currentObservable.query &&\n                _this.currentObservable.query.startPolling(pollInterval);\n        };\n        _this.obsStopPolling = function () {\n            _this.currentObservable &&\n                _this.currentObservable.query &&\n                _this.currentObservable.query.stopPolling();\n        };\n        _this.obsSubscribeToMore = function (options) { return _this.currentObservable.query.subscribeToMore(options); };\n        _this.forceUpdate = forceUpdate;\n        return _this;\n    }\n    QueryData.prototype.execute = function () {\n        this.refreshClient();\n        var _a = this.getOptions(), skip = _a.skip, query = _a.query;\n        if (skip || query !== this.previousData.query) {\n            this.removeQuerySubscription();\n            this.previousData.query = query;\n        }\n        this.updateObservableQuery();\n        if (this.isMounted)\n            this.startQuerySubscription();\n        return this.getExecuteSsrResult() || this.getExecuteResult();\n    };\n    QueryData.prototype.executeLazy = function () {\n        return !this.runLazy\n            ? [\n                this.runLazyQuery,\n                {\n                    loading: false,\n                    networkStatus: NetworkStatus.ready,\n                    called: false,\n                    data: undefined\n                }\n            ]\n            : [this.runLazyQuery, this.execute()];\n    };\n    QueryData.prototype.fetchData = function () {\n        var _this = this;\n        var options = this.getOptions();\n        if (options.skip || options.ssr === false)\n            return false;\n        return new Promise(function (resolve) { return _this.startQuerySubscription(resolve); });\n    };\n    QueryData.prototype.afterExecute = function (_a) {\n        var _this = this;\n        var queryResult = _a.queryResult, _b = _a.lazy, lazy = _b === void 0 ? false : _b;\n        this.isMounted = true;\n        if (!lazy || this.runLazy) {\n            this.handleErrorOrCompleted(queryResult);\n            setTimeout(function () {\n                _this.currentObservable.query &&\n                    _this.currentObservable.query.resetQueryStoreErrors();\n            });\n        }\n        this.previousOptions = this.getOptions();\n        return this.unmount.bind(this);\n    };\n    QueryData.prototype.cleanup = function () {\n        this.removeQuerySubscription();\n        delete this.currentObservable.query;\n        delete this.previousData.result;\n    };\n    QueryData.prototype.getOptions = function () {\n        var options = _super.prototype.getOptions.call(this);\n        if (this.lazyOptions) {\n            options.variables = __assign(__assign({}, options.variables), this.lazyOptions.variables);\n            options.context = __assign(__assign({}, options.context), this.lazyOptions.context);\n        }\n        if (this.runLazy) {\n            delete options.skip;\n        }\n        return options;\n    };\n    QueryData.prototype.getExecuteResult = function () {\n        var result = this.getQueryResult();\n        this.startQuerySubscription();\n        return result;\n    };\n    ;\n    QueryData.prototype.getExecuteSsrResult = function () {\n        var treeRenderingInitiated = this.context && this.context.renderPromises;\n        var ssrDisabled = this.getOptions().ssr === false;\n        var fetchDisabled = this.refreshClient().client.disableNetworkFetches;\n        var ssrLoading = {\n            loading: true,\n            networkStatus: NetworkStatus.loading,\n            called: true,\n            data: undefined\n        };\n        if (ssrDisabled && (treeRenderingInitiated || fetchDisabled)) {\n            return ssrLoading;\n        }\n        var result;\n        if (treeRenderingInitiated) {\n            result =\n                this.context.renderPromises.addQueryPromise(this, this.getQueryResult) || ssrLoading;\n        }\n        return result;\n    };\n    QueryData.prototype.prepareObservableQueryOptions = function () {\n        var options = this.getOptions();\n        this.verifyDocumentType(options.query, DocumentType.Query);\n        var displayName = options.displayName || 'Query';\n        if (this.context &&\n            this.context.renderPromises &&\n            (options.fetchPolicy === 'network-only' ||\n                options.fetchPolicy === 'cache-and-network')) {\n            options.fetchPolicy = 'cache-first';\n        }\n        return __assign(__assign({}, options), { displayName: displayName, context: options.context, metadata: { reactComponent: { displayName: displayName } } });\n    };\n    QueryData.prototype.initializeObservableQuery = function () {\n        if (this.context && this.context.renderPromises) {\n            this.currentObservable.query = this.context.renderPromises.getSSRObservable(this.getOptions());\n        }\n        if (!this.currentObservable.query) {\n            var observableQueryOptions = this.prepareObservableQueryOptions();\n            this.previousData.observableQueryOptions = __assign(__assign({}, observableQueryOptions), { children: null });\n            this.currentObservable.query = this.refreshClient().client.watchQuery(__assign({}, observableQueryOptions));\n            if (this.context && this.context.renderPromises) {\n                this.context.renderPromises.registerSSRObservable(this.currentObservable.query, observableQueryOptions);\n            }\n        }\n    };\n    QueryData.prototype.updateObservableQuery = function () {\n        if (!this.currentObservable.query) {\n            this.initializeObservableQuery();\n            return;\n        }\n        var newObservableQueryOptions = __assign(__assign({}, this.prepareObservableQueryOptions()), { children: null });\n        if (!equal(newObservableQueryOptions, this.previousData.observableQueryOptions)) {\n            this.previousData.observableQueryOptions = newObservableQueryOptions;\n            this.currentObservable\n                .query.setOptions(newObservableQueryOptions)\n                .catch(function () { });\n        }\n    };\n    QueryData.prototype.startQuerySubscription = function (onNewData) {\n        var _this = this;\n        if (onNewData === void 0) { onNewData = this.forceUpdate; }\n        if (this.currentObservable.subscription || this.getOptions().skip)\n            return;\n        var obsQuery = this.currentObservable.query;\n        this.currentObservable.subscription = obsQuery.subscribe({\n            next: function (_a) {\n                var loading = _a.loading, networkStatus = _a.networkStatus, data = _a.data;\n                var previousResult = _this.previousData.result;\n                if (previousResult &&\n                    previousResult.loading === loading &&\n                    previousResult.networkStatus === networkStatus &&\n                    equal(previousResult.data, data)) {\n                    return;\n                }\n                if (_this.previousOptions.skip) {\n                    return;\n                }\n                onNewData();\n            },\n            error: function (error) {\n                _this.resubscribeToQuery();\n                if (!error.hasOwnProperty('graphQLErrors'))\n                    throw error;\n                var previousResult = _this.previousData.result;\n                if ((previousResult && previousResult.loading) ||\n                    !equal(error, _this.previousData.error)) {\n                    _this.previousData.error = error;\n                    onNewData();\n                }\n            }\n        });\n    };\n    QueryData.prototype.resubscribeToQuery = function () {\n        this.removeQuerySubscription();\n        var lastError = this.currentObservable.query.getLastError();\n        var lastResult = this.currentObservable.query.getLastResult();\n        this.currentObservable.query.resetLastResults();\n        this.startQuerySubscription();\n        Object.assign(this.currentObservable.query, {\n            lastError: lastError,\n            lastResult: lastResult\n        });\n    };\n    QueryData.prototype.handleErrorOrCompleted = function (_a) {\n        var data = _a.data, loading = _a.loading, error = _a.error;\n        if (!loading) {\n            var _b = this.getOptions(), query = _b.query, variables = _b.variables, onCompleted = _b.onCompleted, onError = _b.onError;\n            if (this.previousOptions &&\n                !this.previousData.loading &&\n                equal(this.previousOptions.query, query) &&\n                equal(this.previousOptions.variables, variables)) {\n                return;\n            }\n            if (onCompleted && !error) {\n                onCompleted(data);\n            }\n            else if (onError && error) {\n                onError(error);\n            }\n        }\n    };\n    QueryData.prototype.removeQuerySubscription = function () {\n        if (this.currentObservable.subscription) {\n            this.currentObservable.subscription.unsubscribe();\n            delete this.currentObservable.subscription;\n        }\n    };\n    QueryData.prototype.observableQueryFields = function () {\n        var observable = this.currentObservable.query;\n        return {\n            variables: observable.variables,\n            refetch: this.obsRefetch,\n            fetchMore: this.obsFetchMore,\n            updateQuery: this.obsUpdateQuery,\n            startPolling: this.obsStartPolling,\n            stopPolling: this.obsStopPolling,\n            subscribeToMore: this.obsSubscribeToMore\n        };\n    };\n    return QueryData;\n}(OperationData));\nexport { QueryData };\n//# sourceMappingURL=QueryData.js.map","import { __assign } from \"tslib\";\nimport { QueryData } from '../../data/QueryData';\nimport { useDeepMemo } from './useDeepMemo';\nimport { getApolloContext } from '../../context/ApolloContext';\nimport { requireReactLazily } from '../../react';\nexport function useBaseQuery(query, options, lazy) {\n    if (lazy === void 0) { lazy = false; }\n    var React = requireReactLazily();\n    var useContext = React.useContext, useEffect = React.useEffect, useReducer = React.useReducer, useRef = React.useRef;\n    var context = useContext(getApolloContext());\n    var _a = useReducer(function (x) { return x + 1; }, 0), tick = _a[0], forceUpdate = _a[1];\n    var updatedOptions = options ? __assign(__assign({}, options), { query: query }) : { query: query };\n    var queryDataRef = useRef();\n    if (!queryDataRef.current) {\n        queryDataRef.current = new QueryData({\n            options: updatedOptions,\n            context: context,\n            forceUpdate: forceUpdate\n        });\n    }\n    var queryData = queryDataRef.current;\n    queryData.setOptions(updatedOptions);\n    queryData.context = context;\n    var memo = {\n        options: __assign(__assign({}, updatedOptions), { onError: undefined, onCompleted: undefined }),\n        context: context,\n        tick: tick\n    };\n    var result = useDeepMemo(function () { return (lazy ? queryData.executeLazy() : queryData.execute()); }, memo);\n    var queryResult = lazy\n        ? result[1]\n        : result;\n    useEffect(function () { return queryData.afterExecute({ queryResult: queryResult, lazy: lazy }); }, [\n        queryResult.loading,\n        queryResult.networkStatus,\n        queryResult.error,\n        queryResult.data\n    ]);\n    useEffect(function () {\n        return function () { return queryData.cleanup(); };\n    }, []);\n    return result;\n}\n//# sourceMappingURL=useBaseQuery.js.map","import { equal } from '@wry/equality';\nimport { requireReactLazily } from '../../react';\nexport function useDeepMemo(memoFn, key) {\n    var React = requireReactLazily();\n    var useRef = React.useRef;\n    var ref = useRef();\n    if (!ref.current || !equal(key, ref.current.key)) {\n        ref.current = { key: key, value: memoFn() };\n    }\n    return ref.current.value;\n}\n//# sourceMappingURL=useDeepMemo.js.map","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ListContext from './ListContext';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    listStyle: 'none',\n    margin: 0,\n    padding: 0,\n    position: 'relative'\n  },\n\n  /* Styles applied to the root element if `disablePadding={false}`. */\n  padding: {\n    paddingTop: 8,\n    paddingBottom: 8\n  },\n\n  /* Styles applied to the root element if dense. */\n  dense: {},\n\n  /* Styles applied to the root element if a `subheader` is provided. */\n  subheader: {\n    paddingTop: 0\n  }\n};\nvar List = React.forwardRef(function List(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'ul' : _props$component,\n      _props$dense = props.dense,\n      dense = _props$dense === void 0 ? false : _props$dense,\n      _props$disablePadding = props.disablePadding,\n      disablePadding = _props$disablePadding === void 0 ? false : _props$disablePadding,\n      subheader = props.subheader,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"component\", \"dense\", \"disablePadding\", \"subheader\"]);\n\n  var context = React.useMemo(function () {\n    return {\n      dense: dense\n    };\n  }, [dense]);\n  return React.createElement(ListContext.Provider, {\n    value: context\n  }, React.createElement(Component, _extends({\n    className: clsx(classes.root, className, dense && classes.dense, !disablePadding && classes.padding, subheader && classes.subheader),\n    ref: ref\n  }, other), subheader, children));\n});\nprocess.env.NODE_ENV !== \"production\" ? List.propTypes = {\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, compact vertical padding designed for keyboard and mouse input will be used for\n   * the list and list items.\n   * The prop is available to descendant components as the `dense` context.\n   */\n  dense: PropTypes.bool,\n\n  /**\n   * If `true`, vertical padding will be removed from the list.\n   */\n  disablePadding: PropTypes.bool,\n\n  /**\n   * The content of the subheader, normally `ListSubheader`.\n   */\n  subheader: PropTypes.node\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiList'\n})(List);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport { isFragment } from 'react-is';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport ownerDocument from '../utils/ownerDocument';\nimport List from '../List';\nimport getScrollbarSize from '../utils/getScrollbarSize';\nimport useForkRef from '../utils/useForkRef';\n\nfunction nextItem(list, item, disableListWrap) {\n  if (list === item) {\n    return list.firstChild;\n  }\n\n  if (item && item.nextElementSibling) {\n    return item.nextElementSibling;\n  }\n\n  return disableListWrap ? null : list.firstChild;\n}\n\nfunction previousItem(list, item, disableListWrap) {\n  if (list === item) {\n    return disableListWrap ? list.firstChild : list.lastChild;\n  }\n\n  if (item && item.previousElementSibling) {\n    return item.previousElementSibling;\n  }\n\n  return disableListWrap ? null : list.lastChild;\n}\n\nfunction textCriteriaMatches(nextFocus, textCriteria) {\n  if (textCriteria === undefined) {\n    return true;\n  }\n\n  var text = nextFocus.innerText;\n\n  if (text === undefined) {\n    // jsdom doesn't support innerText\n    text = nextFocus.textContent;\n  }\n\n  text = text.trim().toLowerCase();\n\n  if (text.length === 0) {\n    return false;\n  }\n\n  if (textCriteria.repeating) {\n    return text[0] === textCriteria.keys[0];\n  }\n\n  return text.indexOf(textCriteria.keys.join('')) === 0;\n}\n\nfunction moveFocus(list, currentFocus, disableListWrap, traversalFunction, textCriteria) {\n  var wrappedOnce = false;\n  var nextFocus = traversalFunction(list, currentFocus, currentFocus ? disableListWrap : false);\n\n  while (nextFocus) {\n    // Prevent infinite loop.\n    if (nextFocus === list.firstChild) {\n      if (wrappedOnce) {\n        return false;\n      }\n\n      wrappedOnce = true;\n    } // Move to the next element.\n\n\n    if (!nextFocus.hasAttribute('tabindex') || nextFocus.disabled || nextFocus.getAttribute('aria-disabled') === 'true' || !textCriteriaMatches(nextFocus, textCriteria)) {\n      nextFocus = traversalFunction(list, nextFocus, disableListWrap);\n    } else {\n      nextFocus.focus();\n      return true;\n    }\n  }\n\n  return false;\n}\n\nvar useEnhancedEffect = typeof window === 'undefined' ? React.useEffect : React.useLayoutEffect;\n/**\n * A permanently displayed menu following https://www.w3.org/TR/wai-aria-practices/#menubutton\n * It's exposed to help customization of the [`Menu`](/api/menu/) component. If you\n * use it separately you need to move focus into the component manually. Once\n * the focus is placed inside the component it is fully keyboard accessible.\n */\n\nvar MenuList = React.forwardRef(function MenuList(props, ref) {\n  var actions = props.actions,\n      _props$autoFocus = props.autoFocus,\n      autoFocus = _props$autoFocus === void 0 ? false : _props$autoFocus,\n      _props$autoFocusItem = props.autoFocusItem,\n      autoFocusItem = _props$autoFocusItem === void 0 ? false : _props$autoFocusItem,\n      children = props.children,\n      className = props.className,\n      onKeyDown = props.onKeyDown,\n      _props$disableListWra = props.disableListWrap,\n      disableListWrap = _props$disableListWra === void 0 ? false : _props$disableListWra,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'selectedMenu' : _props$variant,\n      other = _objectWithoutProperties(props, [\"actions\", \"autoFocus\", \"autoFocusItem\", \"children\", \"className\", \"onKeyDown\", \"disableListWrap\", \"variant\"]);\n\n  var listRef = React.useRef(null);\n  var textCriteriaRef = React.useRef({\n    keys: [],\n    repeating: true,\n    previousKeyMatched: true,\n    lastTime: null\n  });\n  useEnhancedEffect(function () {\n    if (autoFocus) {\n      listRef.current.focus();\n    }\n  }, [autoFocus]);\n  React.useImperativeHandle(actions, function () {\n    return {\n      adjustStyleForScrollbar: function adjustStyleForScrollbar(containerElement, theme) {\n        // Let's ignore that piece of logic if users are already overriding the width\n        // of the menu.\n        var noExplicitWidth = !listRef.current.style.width;\n\n        if (containerElement.clientHeight < listRef.current.clientHeight && noExplicitWidth) {\n          var scrollbarSize = \"\".concat(getScrollbarSize(true), \"px\");\n          listRef.current.style[theme.direction === 'rtl' ? 'paddingLeft' : 'paddingRight'] = scrollbarSize;\n          listRef.current.style.width = \"calc(100% + \".concat(scrollbarSize, \")\");\n        }\n\n        return listRef.current;\n      }\n    };\n  }, []);\n\n  var handleKeyDown = function handleKeyDown(event) {\n    var list = listRef.current;\n    var key = event.key;\n    /**\n     * @type {Element} - will always be defined since we are in a keydown handler\n     * attached to an element. A keydown event is either dispatched to the activeElement\n     * or document.body or document.documentElement. Only the first case will\n     * trigger this specific handler.\n     */\n\n    var currentFocus = ownerDocument(list).activeElement;\n\n    if (key === 'ArrowDown') {\n      // Prevent scroll of the page\n      event.preventDefault();\n      moveFocus(list, currentFocus, disableListWrap, nextItem);\n    } else if (key === 'ArrowUp') {\n      event.preventDefault();\n      moveFocus(list, currentFocus, disableListWrap, previousItem);\n    } else if (key === 'Home') {\n      event.preventDefault();\n      moveFocus(list, null, disableListWrap, nextItem);\n    } else if (key === 'End') {\n      event.preventDefault();\n      moveFocus(list, null, disableListWrap, previousItem);\n    } else if (key.length === 1) {\n      var criteria = textCriteriaRef.current;\n      var lowerKey = key.toLowerCase();\n      var currTime = performance.now();\n\n      if (criteria.keys.length > 0) {\n        // Reset\n        if (currTime - criteria.lastTime > 500) {\n          criteria.keys = [];\n          criteria.repeating = true;\n          criteria.previousKeyMatched = true;\n        } else if (criteria.repeating && lowerKey !== criteria.keys[0]) {\n          criteria.repeating = false;\n        }\n      }\n\n      criteria.lastTime = currTime;\n      criteria.keys.push(lowerKey);\n      var keepFocusOnCurrent = currentFocus && !criteria.repeating && textCriteriaMatches(currentFocus, criteria);\n\n      if (criteria.previousKeyMatched && (keepFocusOnCurrent || moveFocus(list, currentFocus, false, nextItem, criteria))) {\n        event.preventDefault();\n      } else {\n        criteria.previousKeyMatched = false;\n      }\n    }\n\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n  };\n\n  var handleOwnRef = React.useCallback(function (instance) {\n    // #StrictMode ready\n    listRef.current = ReactDOM.findDOMNode(instance);\n  }, []);\n  var handleRef = useForkRef(handleOwnRef, ref);\n  /**\n   * the index of the item should receive focus\n   * in a `variant=\"selectedMenu\"` it's the first `selected` item\n   * otherwise it's the very first item.\n   */\n\n  var activeItemIndex = -1; // since we inject focus related props into children we have to do a lookahead\n  // to check if there is a `selected` item. We're looking for the last `selected`\n  // item and use the first valid item as a fallback\n\n  React.Children.forEach(children, function (child, index) {\n    if (!React.isValidElement(child)) {\n      return;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (isFragment(child)) {\n        console.error([\"Material-UI: the Menu component doesn't accept a Fragment as a child.\", 'Consider providing an array instead.'].join('\\n'));\n      }\n    }\n\n    if (!child.props.disabled) {\n      if (variant === 'selectedMenu' && child.props.selected) {\n        activeItemIndex = index;\n      } else if (activeItemIndex === -1) {\n        activeItemIndex = index;\n      }\n    }\n  });\n  var items = React.Children.map(children, function (child, index) {\n    if (index === activeItemIndex) {\n      var newChildProps = {};\n\n      if (autoFocusItem) {\n        newChildProps.autoFocus = true;\n      }\n\n      if (child.props.tabIndex === undefined && variant === 'selectedMenu') {\n        newChildProps.tabIndex = 0;\n      }\n\n      if (newChildProps !== null) {\n        return React.cloneElement(child, newChildProps);\n      }\n    }\n\n    return child;\n  });\n  return React.createElement(List, _extends({\n    role: \"menu\",\n    ref: handleRef,\n    className: className,\n    onKeyDown: handleKeyDown,\n    tabIndex: autoFocus ? 0 : -1\n  }, other), items);\n});\nprocess.env.NODE_ENV !== \"production\" ? MenuList.propTypes = {\n  /**\n   * @ignore\n   */\n  actions: PropTypes.shape({\n    current: PropTypes.object\n  }),\n\n  /**\n   * If `true`, will focus the `[role=\"menu\"]` container and move into tab order\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * If `true`, will focus the first menuitem if `variant=\"menu\"` or selected item\n   * if `variant=\"selectedMenu\"`\n   */\n  autoFocusItem: PropTypes.bool,\n\n  /**\n   * MenuList contents, normally `MenuItem`s.\n   */\n  children: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the menu items will not wrap focus.\n   */\n  disableListWrap: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  onKeyDown: PropTypes.func,\n\n  /**\n   * The variant to use. Use `menu` to prevent selected items from impacting the initial focus\n   * and the vertical alignment relative to the anchor element.\n   */\n  variant: PropTypes.oneOf(['menu', 'selectedMenu'])\n} : void 0;\nexport default MenuList;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport { isFragment } from 'react-is';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Popover from '../Popover';\nimport MenuList from '../MenuList';\nimport ReactDOM from 'react-dom';\nimport setRef from '../utils/setRef';\nimport useTheme from '../styles/useTheme';\nvar RTL_ORIGIN = {\n  vertical: 'top',\n  horizontal: 'right'\n};\nvar LTR_ORIGIN = {\n  vertical: 'top',\n  horizontal: 'left'\n};\nexport var styles = {\n  /* Styles applied to the `Paper` component. */\n  paper: {\n    // specZ: The maximum height of a simple menu should be one or more rows less than the view\n    // height. This ensures a tapable area outside of the simple menu with which to dismiss\n    // the menu.\n    maxHeight: 'calc(100% - 96px)',\n    // Add iOS momentum scrolling.\n    WebkitOverflowScrolling: 'touch'\n  },\n\n  /* Styles applied to the `List` component via `MenuList`. */\n  list: {\n    // We disable the focus ring for mouse, touch and keyboard users.\n    outline: 0\n  }\n};\nvar Menu = React.forwardRef(function Menu(props, ref) {\n  var _props$autoFocus = props.autoFocus,\n      autoFocus = _props$autoFocus === void 0 ? true : _props$autoFocus,\n      children = props.children,\n      classes = props.classes,\n      _props$disableAutoFoc = props.disableAutoFocusItem,\n      disableAutoFocusItem = _props$disableAutoFoc === void 0 ? false : _props$disableAutoFoc,\n      _props$MenuListProps = props.MenuListProps,\n      MenuListProps = _props$MenuListProps === void 0 ? {} : _props$MenuListProps,\n      onClose = props.onClose,\n      onEntering = props.onEntering,\n      open = props.open,\n      _props$PaperProps = props.PaperProps,\n      PaperProps = _props$PaperProps === void 0 ? {} : _props$PaperProps,\n      PopoverClasses = props.PopoverClasses,\n      _props$transitionDura = props.transitionDuration,\n      transitionDuration = _props$transitionDura === void 0 ? 'auto' : _props$transitionDura,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'selectedMenu' : _props$variant,\n      other = _objectWithoutProperties(props, [\"autoFocus\", \"children\", \"classes\", \"disableAutoFocusItem\", \"MenuListProps\", \"onClose\", \"onEntering\", \"open\", \"PaperProps\", \"PopoverClasses\", \"transitionDuration\", \"variant\"]);\n\n  var theme = useTheme();\n  var autoFocusItem = autoFocus && !disableAutoFocusItem && open;\n  var menuListActionsRef = React.useRef(null);\n  var contentAnchorRef = React.useRef(null);\n\n  var getContentAnchorEl = function getContentAnchorEl() {\n    return contentAnchorRef.current;\n  };\n\n  var handleEntering = function handleEntering(element, isAppearing) {\n    if (menuListActionsRef.current) {\n      menuListActionsRef.current.adjustStyleForScrollbar(element, theme);\n    }\n\n    if (onEntering) {\n      onEntering(element, isAppearing);\n    }\n  };\n\n  var handleListKeyDown = function handleListKeyDown(event) {\n    if (event.key === 'Tab') {\n      event.preventDefault();\n\n      if (onClose) {\n        onClose(event, 'tabKeyDown');\n      }\n    }\n  };\n  /**\n   * the index of the item should receive focus\n   * in a `variant=\"selectedMenu\"` it's the first `selected` item\n   * otherwise it's the very first item.\n   */\n\n\n  var activeItemIndex = -1; // since we inject focus related props into children we have to do a lookahead\n  // to check if there is a `selected` item. We're looking for the last `selected`\n  // item and use the first valid item as a fallback\n\n  React.Children.map(children, function (child, index) {\n    if (!React.isValidElement(child)) {\n      return;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (isFragment(child)) {\n        console.error([\"Material-UI: the Menu component doesn't accept a Fragment as a child.\", 'Consider providing an array instead.'].join('\\n'));\n      }\n    }\n\n    if (!child.props.disabled) {\n      if (variant !== \"menu\" && child.props.selected) {\n        activeItemIndex = index;\n      } else if (activeItemIndex === -1) {\n        activeItemIndex = index;\n      }\n    }\n  });\n  var items = React.Children.map(children, function (child, index) {\n    if (index === activeItemIndex) {\n      return React.cloneElement(child, {\n        ref: function ref(instance) {\n          // #StrictMode ready\n          contentAnchorRef.current = ReactDOM.findDOMNode(instance);\n          setRef(child.ref, instance);\n        }\n      });\n    }\n\n    return child;\n  });\n  return React.createElement(Popover, _extends({\n    getContentAnchorEl: getContentAnchorEl,\n    classes: PopoverClasses,\n    onClose: onClose,\n    onEntering: handleEntering,\n    anchorOrigin: theme.direction === 'rtl' ? RTL_ORIGIN : LTR_ORIGIN,\n    transformOrigin: theme.direction === 'rtl' ? RTL_ORIGIN : LTR_ORIGIN,\n    PaperProps: _extends({}, PaperProps, {\n      classes: _extends({}, PaperProps.classes, {\n        root: classes.paper\n      })\n    }),\n    open: open,\n    ref: ref,\n    transitionDuration: transitionDuration\n  }, other), React.createElement(MenuList, _extends({\n    onKeyDown: handleListKeyDown,\n    actions: menuListActionsRef,\n    autoFocus: autoFocus && (activeItemIndex === -1 || disableAutoFocusItem),\n    autoFocusItem: autoFocusItem,\n    variant: variant\n  }, MenuListProps, {\n    className: clsx(classes.list, MenuListProps.className)\n  }), items));\n});\nprocess.env.NODE_ENV !== \"production\" ? Menu.propTypes = {\n  /**\n   * The DOM element used to set the position of the menu.\n   */\n  anchorEl: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n\n  /**\n   * If `true` (Default) will focus the `[role=\"menu\"]` if no focusable child is found. Disabled\n   * children are not focusable. If you set this prop to `false` focus will be placed\n   * on the parent modal container. This has severe accessibility implications\n   * and should only be considered if you manage focus otherwise.\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * Menu contents, normally `MenuItem`s.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * When opening the menu will not focus the active item but the `[role=\"menu\"]`\n   * unless `autoFocus` is also set to `false`. Not using the default means not\n   * following WAI-ARIA authoring practices. Please be considerate about possible\n   * accessibility implications.\n   */\n  disableAutoFocusItem: PropTypes.bool,\n\n  /**\n   * Props applied to the [`MenuList`](/api/menu-list/) element.\n   */\n  MenuListProps: PropTypes.object,\n\n  /**\n   * Callback fired when the component requests to be closed.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} reason Can be: `\"escapeKeyDown\"`, `\"backdropClick\"`, `\"tabKeyDown\"`.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback fired before the Menu enters.\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * Callback fired when the Menu has entered.\n   */\n  onEntered: PropTypes.func,\n\n  /**\n   * Callback fired when the Menu is entering.\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * Callback fired before the Menu exits.\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * Callback fired when the Menu has exited.\n   */\n  onExited: PropTypes.func,\n\n  /**\n   * Callback fired when the Menu is exiting.\n   */\n  onExiting: PropTypes.func,\n\n  /**\n   * If `true`, the menu is visible.\n   */\n  open: PropTypes.bool.isRequired,\n\n  /**\n   * @ignore\n   */\n  PaperProps: PropTypes.object,\n\n  /**\n   * `classes` prop applied to the [`Popover`](/api/popover/) element.\n   */\n  PopoverClasses: PropTypes.object,\n\n  /**\n   * The length of the transition in `ms`, or 'auto'\n   */\n  transitionDuration: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n    enter: PropTypes.number,\n    exit: PropTypes.number\n  }), PropTypes.oneOf(['auto'])]),\n\n  /**\n   * The variant to use. Use `menu` to prevent selected items from impacting the initial focus\n   * and the vertical alignment relative to the anchor element.\n   */\n  variant: PropTypes.oneOf(['menu', 'selectedMenu'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiMenu'\n})(Menu);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport debounce from '../utils/debounce';\nimport clsx from 'clsx';\nimport { chainPropTypes, elementTypeAcceptingRef, refType } from '@material-ui/utils';\nimport ownerDocument from '../utils/ownerDocument';\nimport ownerWindow from '../utils/ownerWindow';\nimport createChainedFunction from '../utils/createChainedFunction';\nimport withStyles from '../styles/withStyles';\nimport Modal from '../Modal';\nimport Grow from '../Grow';\nimport Paper from '../Paper';\nexport function getOffsetTop(rect, vertical) {\n  var offset = 0;\n\n  if (typeof vertical === 'number') {\n    offset = vertical;\n  } else if (vertical === 'center') {\n    offset = rect.height / 2;\n  } else if (vertical === 'bottom') {\n    offset = rect.height;\n  }\n\n  return offset;\n}\nexport function getOffsetLeft(rect, horizontal) {\n  var offset = 0;\n\n  if (typeof horizontal === 'number') {\n    offset = horizontal;\n  } else if (horizontal === 'center') {\n    offset = rect.width / 2;\n  } else if (horizontal === 'right') {\n    offset = rect.width;\n  }\n\n  return offset;\n}\n\nfunction getTransformOriginValue(transformOrigin) {\n  return [transformOrigin.horizontal, transformOrigin.vertical].map(function (n) {\n    return typeof n === 'number' ? \"\".concat(n, \"px\") : n;\n  }).join(' ');\n} // Sum the scrollTop between two elements.\n\n\nfunction getScrollParent(parent, child) {\n  var element = child;\n  var scrollTop = 0;\n\n  while (element && element !== parent) {\n    element = element.parentElement;\n    scrollTop += element.scrollTop;\n  }\n\n  return scrollTop;\n}\n\nfunction getAnchorEl(anchorEl) {\n  return typeof anchorEl === 'function' ? anchorEl() : anchorEl;\n}\n\nexport var styles = {\n  /* Styles applied to the root element */\n  root: {},\n\n  /* Styles applied to the `Paper` component. */\n  paper: {\n    position: 'absolute',\n    overflowY: 'auto',\n    overflowX: 'hidden',\n    // So we see the popover when it's empty.\n    // It's most likely on issue on userland.\n    minWidth: 16,\n    minHeight: 16,\n    maxWidth: 'calc(100% - 32px)',\n    maxHeight: 'calc(100% - 32px)',\n    // We disable the focus ring for mouse, touch and keyboard users.\n    outline: 0\n  }\n};\nvar Popover = React.forwardRef(function Popover(props, ref) {\n  var action = props.action,\n      anchorEl = props.anchorEl,\n      _props$anchorOrigin = props.anchorOrigin,\n      anchorOrigin = _props$anchorOrigin === void 0 ? {\n    vertical: 'top',\n    horizontal: 'left'\n  } : _props$anchorOrigin,\n      anchorPosition = props.anchorPosition,\n      _props$anchorReferenc = props.anchorReference,\n      anchorReference = _props$anchorReferenc === void 0 ? 'anchorEl' : _props$anchorReferenc,\n      children = props.children,\n      classes = props.classes,\n      className = props.className,\n      containerProp = props.container,\n      _props$elevation = props.elevation,\n      elevation = _props$elevation === void 0 ? 8 : _props$elevation,\n      getContentAnchorEl = props.getContentAnchorEl,\n      _props$marginThreshol = props.marginThreshold,\n      marginThreshold = _props$marginThreshol === void 0 ? 16 : _props$marginThreshol,\n      onEnter = props.onEnter,\n      onEntered = props.onEntered,\n      onEntering = props.onEntering,\n      onExit = props.onExit,\n      onExited = props.onExited,\n      onExiting = props.onExiting,\n      open = props.open,\n      _props$PaperProps = props.PaperProps,\n      PaperProps = _props$PaperProps === void 0 ? {} : _props$PaperProps,\n      _props$transformOrigi = props.transformOrigin,\n      transformOrigin = _props$transformOrigi === void 0 ? {\n    vertical: 'top',\n    horizontal: 'left'\n  } : _props$transformOrigi,\n      _props$TransitionComp = props.TransitionComponent,\n      TransitionComponent = _props$TransitionComp === void 0 ? Grow : _props$TransitionComp,\n      _props$transitionDura = props.transitionDuration,\n      transitionDurationProp = _props$transitionDura === void 0 ? 'auto' : _props$transitionDura,\n      _props$TransitionProp = props.TransitionProps,\n      TransitionProps = _props$TransitionProp === void 0 ? {} : _props$TransitionProp,\n      other = _objectWithoutProperties(props, [\"action\", \"anchorEl\", \"anchorOrigin\", \"anchorPosition\", \"anchorReference\", \"children\", \"classes\", \"className\", \"container\", \"elevation\", \"getContentAnchorEl\", \"marginThreshold\", \"onEnter\", \"onEntered\", \"onEntering\", \"onExit\", \"onExited\", \"onExiting\", \"open\", \"PaperProps\", \"transformOrigin\", \"TransitionComponent\", \"transitionDuration\", \"TransitionProps\"]);\n\n  var paperRef = React.useRef(); // Returns the top/left offset of the position\n  // to attach to on the anchor element (or body if none is provided)\n\n  var getAnchorOffset = React.useCallback(function (contentAnchorOffset) {\n    if (anchorReference === 'anchorPosition') {\n      if (process.env.NODE_ENV !== 'production') {\n        if (!anchorPosition) {\n          console.error('Material-UI: you need to provide a `anchorPosition` prop when using ' + '<Popover anchorReference=\"anchorPosition\" />.');\n        }\n      }\n\n      return anchorPosition;\n    }\n\n    var resolvedAnchorEl = getAnchorEl(anchorEl);\n    var containerWindow = ownerWindow(resolvedAnchorEl); // If an anchor element wasn't provided, just use the parent body element of this Popover\n\n    var anchorElement = resolvedAnchorEl instanceof containerWindow.Element ? resolvedAnchorEl : ownerDocument(paperRef.current).body;\n    var anchorRect = anchorElement.getBoundingClientRect();\n\n    if (process.env.NODE_ENV !== 'production') {\n      var box = anchorElement.getBoundingClientRect();\n\n      if (process.env.NODE_ENV !== 'test' && box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {\n        console.warn(['Material-UI: the `anchorEl` prop provided to the component is invalid.', 'The anchor element should be part of the document layout.', \"Make sure the element is present in the document or that it's not display none.\"].join('\\n'));\n      }\n    }\n\n    var anchorVertical = contentAnchorOffset === 0 ? anchorOrigin.vertical : 'center';\n    return {\n      top: anchorRect.top + getOffsetTop(anchorRect, anchorVertical),\n      left: anchorRect.left + getOffsetLeft(anchorRect, anchorOrigin.horizontal)\n    };\n  }, [anchorEl, anchorOrigin.horizontal, anchorOrigin.vertical, anchorPosition, anchorReference]); // Returns the vertical offset of inner content to anchor the transform on if provided\n\n  var getContentAnchorOffset = React.useCallback(function (element) {\n    var contentAnchorOffset = 0;\n\n    if (getContentAnchorEl && anchorReference === 'anchorEl') {\n      var contentAnchorEl = getContentAnchorEl(element);\n\n      if (contentAnchorEl && element.contains(contentAnchorEl)) {\n        var scrollTop = getScrollParent(element, contentAnchorEl);\n        contentAnchorOffset = contentAnchorEl.offsetTop + contentAnchorEl.clientHeight / 2 - scrollTop || 0;\n      } // != the default value\n\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (anchorOrigin.vertical !== 'top') {\n          console.error(['Material-UI: you can not change the default `anchorOrigin.vertical` value ', 'when also providing the `getContentAnchorEl` prop to the popover component.', 'Only use one of the two props.', 'Set `getContentAnchorEl` to `null | undefined`' + ' or leave `anchorOrigin.vertical` unchanged.'].join('\\n'));\n        }\n      }\n    }\n\n    return contentAnchorOffset;\n  }, [anchorOrigin.vertical, anchorReference, getContentAnchorEl]); // Return the base transform origin using the element\n  // and taking the content anchor offset into account if in use\n\n  var getTransformOrigin = React.useCallback(function (elemRect) {\n    var contentAnchorOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    return {\n      vertical: getOffsetTop(elemRect, transformOrigin.vertical) + contentAnchorOffset,\n      horizontal: getOffsetLeft(elemRect, transformOrigin.horizontal)\n    };\n  }, [transformOrigin.horizontal, transformOrigin.vertical]);\n  var getPositioningStyle = React.useCallback(function (element) {\n    // Check if the parent has requested anchoring on an inner content node\n    var contentAnchorOffset = getContentAnchorOffset(element);\n    var elemRect = {\n      width: element.offsetWidth,\n      height: element.offsetHeight\n    }; // Get the transform origin point on the element itself\n\n    var elemTransformOrigin = getTransformOrigin(elemRect, contentAnchorOffset);\n\n    if (anchorReference === 'none') {\n      return {\n        top: null,\n        left: null,\n        transformOrigin: getTransformOriginValue(elemTransformOrigin)\n      };\n    } // Get the offset of of the anchoring element\n\n\n    var anchorOffset = getAnchorOffset(contentAnchorOffset); // Calculate element positioning\n\n    var top = anchorOffset.top - elemTransformOrigin.vertical;\n    var left = anchorOffset.left - elemTransformOrigin.horizontal;\n    var bottom = top + elemRect.height;\n    var right = left + elemRect.width; // Use the parent window of the anchorEl if provided\n\n    var containerWindow = ownerWindow(getAnchorEl(anchorEl)); // Window thresholds taking required margin into account\n\n    var heightThreshold = containerWindow.innerHeight - marginThreshold;\n    var widthThreshold = containerWindow.innerWidth - marginThreshold; // Check if the vertical axis needs shifting\n\n    if (top < marginThreshold) {\n      var diff = top - marginThreshold;\n      top -= diff;\n      elemTransformOrigin.vertical += diff;\n    } else if (bottom > heightThreshold) {\n      var _diff = bottom - heightThreshold;\n\n      top -= _diff;\n      elemTransformOrigin.vertical += _diff;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (elemRect.height > heightThreshold && elemRect.height && heightThreshold) {\n        console.error(['Material-UI: the popover component is too tall.', \"Some part of it can not be seen on the screen (\".concat(elemRect.height - heightThreshold, \"px).\"), 'Please consider adding a `max-height` to improve the user-experience.'].join('\\n'));\n      }\n    } // Check if the horizontal axis needs shifting\n\n\n    if (left < marginThreshold) {\n      var _diff2 = left - marginThreshold;\n\n      left -= _diff2;\n      elemTransformOrigin.horizontal += _diff2;\n    } else if (right > widthThreshold) {\n      var _diff3 = right - widthThreshold;\n\n      left -= _diff3;\n      elemTransformOrigin.horizontal += _diff3;\n    }\n\n    return {\n      top: \"\".concat(Math.round(top), \"px\"),\n      left: \"\".concat(Math.round(left), \"px\"),\n      transformOrigin: getTransformOriginValue(elemTransformOrigin)\n    };\n  }, [anchorEl, anchorReference, getAnchorOffset, getContentAnchorOffset, getTransformOrigin, marginThreshold]);\n  var setPositioningStyles = React.useCallback(function () {\n    var element = paperRef.current;\n\n    if (!element) {\n      return;\n    }\n\n    var positioning = getPositioningStyle(element);\n\n    if (positioning.top !== null) {\n      element.style.top = positioning.top;\n    }\n\n    if (positioning.left !== null) {\n      element.style.left = positioning.left;\n    }\n\n    element.style.transformOrigin = positioning.transformOrigin;\n  }, [getPositioningStyle]);\n\n  var handleEntering = function handleEntering(element, isAppearing) {\n    if (onEntering) {\n      onEntering(element, isAppearing);\n    }\n\n    setPositioningStyles();\n  };\n\n  var handlePaperRef = React.useCallback(function (instance) {\n    // #StrictMode ready\n    paperRef.current = ReactDOM.findDOMNode(instance);\n  }, []);\n  React.useEffect(function () {\n    if (open) {\n      setPositioningStyles();\n    }\n  });\n  React.useImperativeHandle(action, function () {\n    return open ? {\n      updatePosition: function updatePosition() {\n        setPositioningStyles();\n      }\n    } : null;\n  }, [open, setPositioningStyles]);\n  React.useEffect(function () {\n    if (!open) {\n      return undefined;\n    }\n\n    var handleResize = debounce(function () {\n      setPositioningStyles();\n    });\n    window.addEventListener('resize', handleResize);\n    return function () {\n      handleResize.clear();\n      window.removeEventListener('rezise', handleResize);\n    };\n  }, [open, setPositioningStyles]);\n  var transitionDuration = transitionDurationProp;\n\n  if (transitionDurationProp === 'auto' && !TransitionComponent.muiSupportAuto) {\n    transitionDuration = undefined;\n  } // If the container prop is provided, use that\n  // If the anchorEl prop is provided, use its parent body element as the container\n  // If neither are provided let the Modal take care of choosing the container\n\n\n  var container = containerProp || (anchorEl ? ownerDocument(getAnchorEl(anchorEl)).body : undefined);\n  return React.createElement(Modal, _extends({\n    container: container,\n    open: open,\n    ref: ref,\n    BackdropProps: {\n      invisible: true\n    },\n    className: clsx(classes.root, className)\n  }, other), React.createElement(TransitionComponent, _extends({\n    appear: true,\n    in: open,\n    onEnter: onEnter,\n    onEntered: onEntered,\n    onExit: onExit,\n    onExited: onExited,\n    onExiting: onExiting,\n    timeout: transitionDuration\n  }, TransitionProps, {\n    onEntering: createChainedFunction(handleEntering, TransitionProps.onEntering)\n  }), React.createElement(Paper, _extends({\n    elevation: elevation,\n    ref: handlePaperRef\n  }, PaperProps, {\n    className: clsx(classes.paper, PaperProps.className)\n  }), children)));\n});\nprocess.env.NODE_ENV !== \"production\" ? Popover.propTypes = {\n  /**\n   * A ref for imperative actions.\n   * It currently only supports updatePosition() action.\n   */\n  action: refType,\n\n  /**\n   * This is the DOM element, or a function that returns the DOM element,\n   * that may be used to set the position of the popover.\n   */\n  anchorEl: chainPropTypes(PropTypes.oneOfType([PropTypes.object, PropTypes.func]), function (props) {\n    if (props.open && (!props.anchorReference || props.anchorReference === 'anchorEl')) {\n      var resolvedAnchorEl = getAnchorEl(props.anchorEl);\n      var containerWindow = ownerWindow(resolvedAnchorEl);\n\n      if (resolvedAnchorEl instanceof containerWindow.Element) {\n        var box = resolvedAnchorEl.getBoundingClientRect();\n\n        if (process.env.NODE_ENV !== 'test' && box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {\n          return new Error(['Material-UI: the `anchorEl` prop provided to the component is invalid.', 'The anchor element should be part of the document layout.', \"Make sure the element is present in the document or that it's not display none.\"].join('\\n'));\n        }\n      } else {\n        return new Error(['Material-UI: the `anchorEl` prop provided to the component is invalid.', \"It should be an Element instance but it's `\".concat(resolvedAnchorEl, \"` instead.\")].join('\\n'));\n      }\n    }\n\n    return null;\n  }),\n\n  /**\n   * This is the point on the anchor where the popover's\n   * `anchorEl` will attach to. This is not used when the\n   * anchorReference is 'anchorPosition'.\n   *\n   * Options:\n   * vertical: [top, center, bottom];\n   * horizontal: [left, center, right].\n   */\n  anchorOrigin: PropTypes.shape({\n    horizontal: PropTypes.oneOfType([PropTypes.number, PropTypes.oneOf(['left', 'center', 'right'])]).isRequired,\n    vertical: PropTypes.oneOfType([PropTypes.number, PropTypes.oneOf(['top', 'center', 'bottom'])]).isRequired\n  }),\n\n  /**\n   * This is the position that may be used\n   * to set the position of the popover.\n   * The coordinates are relative to\n   * the application's client area.\n   */\n  anchorPosition: PropTypes.shape({\n    left: PropTypes.number.isRequired,\n    top: PropTypes.number.isRequired\n  }),\n\n  /*\n   * This determines which anchor prop to refer to to set\n   * the position of the popover.\n   */\n  anchorReference: PropTypes.oneOf(['anchorEl', 'anchorPosition', 'none']),\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * A node, component instance, or function that returns either.\n   * The `container` will passed to the Modal component.\n   * By default, it uses the body of the anchorEl's top-level document object,\n   * so it's simply `document.body` most of the time.\n   */\n  container: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n\n  /**\n   * The elevation of the popover.\n   */\n  elevation: PropTypes.number,\n\n  /**\n   * This function is called in order to retrieve the content anchor element.\n   * It's the opposite of the `anchorEl` prop.\n   * The content anchor element should be an element inside the popover.\n   * It's used to correctly scroll and set the position of the popover.\n   * The positioning strategy tries to make the content anchor element just above the\n   * anchor element.\n   */\n  getContentAnchorEl: PropTypes.func,\n\n  /**\n   * Specifies how close to the edge of the window the popover can appear.\n   */\n  marginThreshold: PropTypes.number,\n\n  /**\n   * Callback fired when the component requests to be closed.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} reason Can be: `\"escapeKeyDown\"`, `\"backdropClick\"`.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback fired before the component is entering.\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * Callback fired when the component has entered.\n   */\n  onEntered: PropTypes.func,\n\n  /**\n   * Callback fired when the component is entering.\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * Callback fired before the component is exiting.\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * Callback fired when the component has exited.\n   */\n  onExited: PropTypes.func,\n\n  /**\n   * Callback fired when the component is exiting.\n   */\n  onExiting: PropTypes.func,\n\n  /**\n   * If `true`, the popover is visible.\n   */\n  open: PropTypes.bool.isRequired,\n\n  /**\n   * Props applied to the [`Paper`](/api/paper/) element.\n   */\n  PaperProps: PropTypes.shape({\n    component: elementTypeAcceptingRef\n  }),\n\n  /**\n   * This is the point on the popover which\n   * will attach to the anchor's origin.\n   *\n   * Options:\n   * vertical: [top, center, bottom, x(px)];\n   * horizontal: [left, center, right, x(px)].\n   */\n  transformOrigin: PropTypes.shape({\n    horizontal: PropTypes.oneOfType([PropTypes.number, PropTypes.oneOf(['left', 'center', 'right'])]).isRequired,\n    vertical: PropTypes.oneOfType([PropTypes.number, PropTypes.oneOf(['top', 'center', 'bottom'])]).isRequired\n  }),\n\n  /**\n   * The component used for the transition.\n   * [Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.\n   */\n  TransitionComponent: PropTypes.elementType,\n\n  /**\n   * Set to 'auto' to automatically calculate transition time based on height.\n   */\n  transitionDuration: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n    enter: PropTypes.number,\n    exit: PropTypes.number\n  }), PropTypes.oneOf(['auto'])]),\n\n  /**\n   * Props applied to the [`Transition`](http://reactcommunity.org/react-transition-group/transition#Transition-props) element.\n   */\n  TransitionProps: PropTypes.object\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiPopover'\n})(Popover);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { exactProp } from '@material-ui/utils';\nimport setRef from '../utils/setRef';\nimport useForkRef from '../utils/useForkRef';\n\nfunction getContainer(container) {\n  container = typeof container === 'function' ? container() : container; // #StrictMode ready\n\n  return ReactDOM.findDOMNode(container);\n}\n\nvar useEnhancedEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\n/**\n * Portals provide a first-class way to render children into a DOM node\n * that exists outside the DOM hierarchy of the parent component.\n */\n\nvar Portal = React.forwardRef(function Portal(props, ref) {\n  var children = props.children,\n      container = props.container,\n      _props$disablePortal = props.disablePortal,\n      disablePortal = _props$disablePortal === void 0 ? false : _props$disablePortal,\n      onRendered = props.onRendered;\n\n  var _React$useState = React.useState(null),\n      mountNode = _React$useState[0],\n      setMountNode = _React$useState[1];\n\n  var handleRef = useForkRef(React.isValidElement(children) ? children.ref : null, ref);\n  useEnhancedEffect(function () {\n    if (!disablePortal) {\n      setMountNode(getContainer(container) || document.body);\n    }\n  }, [container, disablePortal]);\n  useEnhancedEffect(function () {\n    if (mountNode && !disablePortal) {\n      setRef(ref, mountNode);\n      return function () {\n        setRef(ref, null);\n      };\n    }\n\n    return undefined;\n  }, [ref, mountNode, disablePortal]);\n  useEnhancedEffect(function () {\n    if (onRendered && (mountNode || disablePortal)) {\n      onRendered();\n    }\n  }, [onRendered, mountNode, disablePortal]);\n\n  if (disablePortal) {\n    if (React.isValidElement(children)) {\n      return React.cloneElement(children, {\n        ref: handleRef\n      });\n    }\n\n    return children;\n  }\n\n  return mountNode ? ReactDOM.createPortal(children, mountNode) : mountNode;\n});\nprocess.env.NODE_ENV !== \"production\" ? Portal.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The children to render into the `container`.\n   */\n  children: PropTypes.node,\n\n  /**\n   * A node, component instance, or function that returns either.\n   * The `container` will have the portal children appended to it.\n   * By default, it uses the body of the top-level document object,\n   * so it's simply `document.body` most of the time.\n   */\n  container: PropTypes.oneOfType([PropTypes.func, PropTypes.instanceOf(React.Component), PropTypes.instanceOf(typeof Element === 'undefined' ? Object : Element)]),\n\n  /**\n   * Disable the portal behavior.\n   * The children stay within it's parent DOM hierarchy.\n   */\n  disablePortal: PropTypes.bool,\n\n  /**\n   * Callback fired once the children has been mounted into the `container`.\n   *\n   * This prop will be deprecated and removed in v5, the ref can be used instead.\n   */\n  onRendered: PropTypes.func\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  Portal['propTypes' + ''] = exactProp(Portal.propTypes);\n}\n\nexport default Portal;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes } from '@material-ui/utils';\nimport withStyles from '../styles/withStyles';\nimport { fade } from '../styles/colorManipulator';\nimport ButtonBase from '../ButtonBase';\nimport capitalize from '../utils/capitalize';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      textAlign: 'center',\n      flex: '0 0 auto',\n      fontSize: theme.typography.pxToRem(24),\n      padding: 12,\n      borderRadius: '50%',\n      overflow: 'visible',\n      // Explicitly set the default value to solve a bug on IE 11.\n      color: theme.palette.action.active,\n      transition: theme.transitions.create('background-color', {\n        duration: theme.transitions.duration.shortest\n      }),\n      '&:hover': {\n        backgroundColor: fade(theme.palette.action.active, theme.palette.action.hoverOpacity),\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: 'transparent'\n        }\n      },\n      '&$disabled': {\n        backgroundColor: 'transparent',\n        color: theme.palette.action.disabled\n      }\n    },\n\n    /* Styles applied to the root element if `edge=\"start\"`. */\n    edgeStart: {\n      marginLeft: -12,\n      '$sizeSmall&': {\n        marginLeft: -3\n      }\n    },\n\n    /* Styles applied to the root element if `edge=\"end\"`. */\n    edgeEnd: {\n      marginRight: -12,\n      '$sizeSmall&': {\n        marginRight: -3\n      }\n    },\n\n    /* Styles applied to the root element if `color=\"inherit\"`. */\n    colorInherit: {\n      color: 'inherit'\n    },\n\n    /* Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: {\n      color: theme.palette.primary.main,\n      '&:hover': {\n        backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: 'transparent'\n        }\n      }\n    },\n\n    /* Styles applied to the root element if `color=\"secondary\"`. */\n    colorSecondary: {\n      color: theme.palette.secondary.main,\n      '&:hover': {\n        backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: 'transparent'\n        }\n      }\n    },\n\n    /* Pseudo-class applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Styles applied to the root element if `size=\"small\"`. */\n    sizeSmall: {\n      padding: 3,\n      fontSize: theme.typography.pxToRem(18)\n    },\n\n    /* Styles applied to the children container element. */\n    label: {\n      width: '100%',\n      display: 'flex',\n      alignItems: 'inherit',\n      justifyContent: 'inherit'\n    }\n  };\n};\n/**\n * Refer to the [Icons](/components/icons/) section of the documentation\n * regarding the available icon options.\n */\n\nvar IconButton = React.forwardRef(function IconButton(props, ref) {\n  var _props$edge = props.edge,\n      edge = _props$edge === void 0 ? false : _props$edge,\n      children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'default' : _props$color,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$disableFocusRi = props.disableFocusRipple,\n      disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'medium' : _props$size,\n      other = _objectWithoutProperties(props, [\"edge\", \"children\", \"classes\", \"className\", \"color\", \"disabled\", \"disableFocusRipple\", \"size\"]);\n\n  return React.createElement(ButtonBase, _extends({\n    className: clsx(classes.root, className, color !== 'default' && classes[\"color\".concat(capitalize(color))], disabled && classes.disabled, size === \"small\" && classes[\"size\".concat(capitalize(size))], {\n      'start': classes.edgeStart,\n      'end': classes.edgeEnd\n    }[edge]),\n    centerRipple: true,\n    focusRipple: !disableFocusRipple,\n    disabled: disabled,\n    ref: ref\n  }, other), React.createElement(\"span\", {\n    className: classes.label\n  }, children));\n});\nprocess.env.NODE_ENV !== \"production\" ? IconButton.propTypes = {\n  /**\n   * The icon element.\n   */\n  children: chainPropTypes(PropTypes.node, function (props) {\n    var found = React.Children.toArray(props.children).some(function (child) {\n      return React.isValidElement(child) && child.props.onClick;\n    });\n\n    if (found) {\n      return new Error(['Material-UI: you are providing an onClick event listener ' + 'to a child of a button element.', 'Firefox will never trigger the event.', 'You should move the onClick listener to the parent button element.', 'https://github.com/mui-org/material-ui/issues/13957'].join('\\n'));\n    }\n\n    return null;\n  }),\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['default', 'inherit', 'primary', 'secondary']),\n\n  /**\n   * If `true`, the button will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the  keyboard focus ripple will be disabled.\n   * `disableRipple` must also be true.\n   */\n  disableFocusRipple: PropTypes.bool,\n\n  /**\n   * If `true`, the ripple effect will be disabled.\n   */\n  disableRipple: PropTypes.bool,\n\n  /**\n   * If given, uses a negative margin to counteract the padding on one\n   * side (this is often helpful for aligning the left or right\n   * side of the icon with content above or below, without ruining the border\n   * size and shape).\n   */\n  edge: PropTypes.oneOf(['start', 'end', false]),\n\n  /**\n   * The size of the button.\n   * `small` is equivalent to the dense button styling.\n   */\n  size: PropTypes.oneOf(['small', 'medium'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiIconButton'\n})(IconButton);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes } from '@material-ui/utils';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\nvar SIZE = 44;\n\nfunction getRelativeValue(value, min, max) {\n  return (Math.min(Math.max(min, value), max) - min) / (max - min);\n}\n\nfunction easeOut(t) {\n  t = getRelativeValue(t, 0, 1); // https://gist.github.com/gre/1650294\n\n  t = (t -= 1) * t * t + 1;\n  return t;\n}\n\nfunction easeIn(t) {\n  return t * t;\n}\n\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      display: 'inline-block'\n    },\n\n    /* Styles applied to the root element if `variant=\"static\"`. */\n    static: {\n      transition: theme.transitions.create('transform')\n    },\n\n    /* Styles applied to the root element if `variant=\"indeterminate\"`. */\n    indeterminate: {\n      animation: '$circular-rotate 1.4s linear infinite'\n    },\n\n    /* Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: {\n      color: theme.palette.primary.main\n    },\n\n    /* Styles applied to the root element if `color=\"secondary\"`. */\n    colorSecondary: {\n      color: theme.palette.secondary.main\n    },\n\n    /* Styles applied to the `svg` element. */\n    svg: {\n      display: 'block' // Keeps the progress centered\n\n    },\n\n    /* Styles applied to the `circle` svg path. */\n    circle: {\n      stroke: 'currentColor' // Use butt to follow the specification, by chance, it's already the default CSS value.\n      // strokeLinecap: 'butt',\n\n    },\n\n    /* Styles applied to the `circle` svg path if `variant=\"static\"`. */\n    circleStatic: {\n      transition: theme.transitions.create('stroke-dashoffset')\n    },\n\n    /* Styles applied to the `circle` svg path if `variant=\"indeterminate\"`. */\n    circleIndeterminate: {\n      animation: '$circular-dash 1.4s ease-in-out infinite',\n      // Some default value that looks fine waiting for the animation to kicks in.\n      strokeDasharray: '80px, 200px',\n      strokeDashoffset: '0px' // Add the unit to fix a Edge 16 and below bug.\n\n    },\n    '@keyframes circular-rotate': {\n      '100%': {\n        transform: 'rotate(360deg)'\n      }\n    },\n    '@keyframes circular-dash': {\n      '0%': {\n        strokeDasharray: '1px, 200px',\n        strokeDashoffset: '0px'\n      },\n      '50%': {\n        strokeDasharray: '100px, 200px',\n        strokeDashoffset: '-15px'\n      },\n      '100%': {\n        strokeDasharray: '100px, 200px',\n        strokeDashoffset: '-125px'\n      }\n    },\n\n    /* Styles applied to the `circle` svg path if `disableShrink={true}`. */\n    circleDisableShrink: {\n      animation: 'none'\n    }\n  };\n};\n/**\n * ## ARIA\n *\n * If the progress bar is describing the loading progress of a particular region of a page,\n * you should use `aria-describedby` to point to the progress bar, and set the `aria-busy`\n * attribute to `true` on that region until it has finished loading.\n */\n\nvar CircularProgress = React.forwardRef(function CircularProgress(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'primary' : _props$color,\n      _props$disableShrink = props.disableShrink,\n      disableShrink = _props$disableShrink === void 0 ? false : _props$disableShrink,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 40 : _props$size,\n      style = props.style,\n      _props$thickness = props.thickness,\n      thickness = _props$thickness === void 0 ? 3.6 : _props$thickness,\n      _props$value = props.value,\n      value = _props$value === void 0 ? 0 : _props$value,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'indeterminate' : _props$variant,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"color\", \"disableShrink\", \"size\", \"style\", \"thickness\", \"value\", \"variant\"]);\n\n  var circleStyle = {};\n  var rootStyle = {};\n  var rootProps = {};\n\n  if (variant === 'determinate' || variant === 'static') {\n    var circumference = 2 * Math.PI * ((SIZE - thickness) / 2);\n    circleStyle.strokeDasharray = circumference.toFixed(3);\n    rootProps['aria-valuenow'] = Math.round(value);\n\n    if (variant === 'static') {\n      circleStyle.strokeDashoffset = \"\".concat(((100 - value) / 100 * circumference).toFixed(3), \"px\");\n      rootStyle.transform = 'rotate(-90deg)';\n    } else {\n      circleStyle.strokeDashoffset = \"\".concat((easeIn((100 - value) / 100) * circumference).toFixed(3), \"px\");\n      rootStyle.transform = \"rotate(\".concat((easeOut(value / 70) * 270).toFixed(3), \"deg)\");\n    }\n  }\n\n  return React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, color !== 'inherit' && classes[\"color\".concat(capitalize(color))], {\n      'indeterminate': classes.indeterminate,\n      'static': classes.static\n    }[variant]),\n    style: _extends({\n      width: size,\n      height: size\n    }, rootStyle, {}, style),\n    ref: ref,\n    role: \"progressbar\"\n  }, rootProps, other), React.createElement(\"svg\", {\n    className: classes.svg,\n    viewBox: \"\".concat(SIZE / 2, \" \").concat(SIZE / 2, \" \").concat(SIZE, \" \").concat(SIZE)\n  }, React.createElement(\"circle\", {\n    className: clsx(classes.circle, disableShrink && classes.circleDisableShrink, {\n      'indeterminate': classes.circleIndeterminate,\n      'static': classes.circleStatic\n    }[variant]),\n    style: circleStyle,\n    cx: SIZE,\n    cy: SIZE,\n    r: (SIZE - thickness) / 2,\n    fill: \"none\",\n    strokeWidth: thickness\n  })));\n});\nprocess.env.NODE_ENV !== \"production\" ? CircularProgress.propTypes = {\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary', 'inherit']),\n\n  /**\n   * If `true`, the shrink animation is disabled.\n   * This only works if variant is `indeterminate`.\n   */\n  disableShrink: chainPropTypes(PropTypes.bool, function (props) {\n    if (props.disableShrink && props.variant && props.variant !== 'indeterminate') {\n      return new Error('Material-UI: you have provided the `disableShrink` prop ' + 'with a variant other than `indeterminate`. This will have no effect.');\n    }\n\n    return null;\n  }),\n\n  /**\n   * The size of the circle.\n   * If using a number, the pixel unit is assumed.\n   * If using a string, you need to provide the CSS unit, e.g '3rem'.\n   */\n  size: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n\n  /**\n   * The thickness of the circle.\n   */\n  thickness: PropTypes.number,\n\n  /**\n   * The value of the progress indicator for the determinate and static variants.\n   * Value between 0 and 100.\n   */\n  value: PropTypes.number,\n\n  /**\n   * The variant to use.\n   * Use indeterminate when there is no progress value.\n   */\n  variant: PropTypes.oneOf(['determinate', 'indeterminate', 'static'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCircularProgress',\n  flip: false\n})(CircularProgress);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: _defineProperty({\n      width: '100%',\n      marginLeft: 'auto',\n      boxSizing: 'border-box',\n      marginRight: 'auto',\n      paddingLeft: theme.spacing(2),\n      paddingRight: theme.spacing(2)\n    }, theme.breakpoints.up('sm'), {\n      paddingLeft: theme.spacing(3),\n      paddingRight: theme.spacing(3)\n    }),\n\n    /* Styles applied to the root element if `disableGutters={true}`. */\n    disableGutters: {\n      paddingLeft: 0,\n      paddingRight: 0\n    },\n\n    /* Styles applied to the root element if `fixed={true}`. */\n    fixed: Object.keys(theme.breakpoints.values).reduce(function (acc, breakpoint) {\n      var value = theme.breakpoints.values[breakpoint];\n\n      if (value !== 0) {\n        acc[theme.breakpoints.up(breakpoint)] = {\n          maxWidth: value\n        };\n      }\n\n      return acc;\n    }, {}),\n\n    /* Styles applied to the root element if `maxWidth=\"xs\"`. */\n    maxWidthXs: _defineProperty({}, theme.breakpoints.up('xs'), {\n      maxWidth: Math.max(theme.breakpoints.values.xs, 444)\n    }),\n\n    /* Styles applied to the root element if `maxWidth=\"sm\"`. */\n    maxWidthSm: _defineProperty({}, theme.breakpoints.up('sm'), {\n      maxWidth: theme.breakpoints.values.sm\n    }),\n\n    /* Styles applied to the root element if `maxWidth=\"md\"`. */\n    maxWidthMd: _defineProperty({}, theme.breakpoints.up('md'), {\n      maxWidth: theme.breakpoints.values.md\n    }),\n\n    /* Styles applied to the root element if `maxWidth=\"lg\"`. */\n    maxWidthLg: _defineProperty({}, theme.breakpoints.up('lg'), {\n      maxWidth: theme.breakpoints.values.lg\n    }),\n\n    /* Styles applied to the root element if `maxWidth=\"xl\"`. */\n    maxWidthXl: _defineProperty({}, theme.breakpoints.up('xl'), {\n      maxWidth: theme.breakpoints.values.xl\n    })\n  };\n};\nvar Container = React.forwardRef(function Container(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      _props$disableGutters = props.disableGutters,\n      disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters,\n      _props$fixed = props.fixed,\n      fixed = _props$fixed === void 0 ? false : _props$fixed,\n      _props$maxWidth = props.maxWidth,\n      maxWidth = _props$maxWidth === void 0 ? 'lg' : _props$maxWidth,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\", \"disableGutters\", \"fixed\", \"maxWidth\"]);\n\n  return React.createElement(Component, _extends({\n    className: clsx(classes.root, className, fixed && classes.fixed, disableGutters && classes.disableGutters, maxWidth !== false && classes[\"maxWidth\".concat(capitalize(String(maxWidth)))]),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Container.propTypes = {\n  children: PropTypes.node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, the left and right padding is removed.\n   */\n  disableGutters: PropTypes.bool,\n\n  /**\n   * Set the max-width to match the min-width of the current breakpoint.\n   * This is useful if you'd prefer to design for a fixed set of sizes\n   * instead of trying to accommodate a fully fluid viewport.\n   * It's fluid by default.\n   */\n  fixed: PropTypes.bool,\n\n  /**\n   * Determine the max-width of the container.\n   * The container width grows with the size of the screen.\n   * Set to `false` to disable `maxWidth`.\n   */\n  maxWidth: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl', false])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiContainer'\n})(Container);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport { fade } from '../styles/colorManipulator';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      height: 1,\n      margin: 0,\n      // Reset browser default style.\n      border: 'none',\n      flexShrink: 0,\n      backgroundColor: theme.palette.divider\n    },\n\n    /* Styles applied to the root element if `absolute={true}`. */\n    absolute: {\n      position: 'absolute',\n      bottom: 0,\n      left: 0,\n      width: '100%'\n    },\n\n    /* Styles applied to the root element if `variant=\"inset\"`. */\n    inset: {\n      marginLeft: 72\n    },\n\n    /* Styles applied to the root element if `light={true}`. */\n    light: {\n      backgroundColor: fade(theme.palette.divider, 0.08)\n    },\n\n    /* Styles applied to the root element if `variant=\"middle\"`. */\n    middle: {\n      marginLeft: theme.spacing(2),\n      marginRight: theme.spacing(2)\n    },\n\n    /* Styles applied to the root element if `orientation=\"vertical\"`. */\n    vertical: {\n      height: '100%',\n      width: 1\n    },\n\n    /* Styles applied to the root element if `flexItem={true}`. */\n    flexItem: {\n      alignSelf: 'stretch',\n      height: 'auto'\n    }\n  };\n};\nvar Divider = React.forwardRef(function Divider(props, ref) {\n  var _props$absolute = props.absolute,\n      absolute = _props$absolute === void 0 ? false : _props$absolute,\n      classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'hr' : _props$component,\n      _props$flexItem = props.flexItem,\n      flexItem = _props$flexItem === void 0 ? false : _props$flexItem,\n      _props$light = props.light,\n      light = _props$light === void 0 ? false : _props$light,\n      _props$orientation = props.orientation,\n      orientation = _props$orientation === void 0 ? 'horizontal' : _props$orientation,\n      _props$role = props.role,\n      role = _props$role === void 0 ? Component !== 'hr' ? 'separator' : undefined : _props$role,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'fullWidth' : _props$variant,\n      other = _objectWithoutProperties(props, [\"absolute\", \"classes\", \"className\", \"component\", \"flexItem\", \"light\", \"orientation\", \"role\", \"variant\"]);\n\n  return React.createElement(Component, _extends({\n    className: clsx(classes.root, className, variant !== 'fullWidth' && classes[variant], absolute && classes.absolute, flexItem && classes.flexItem, light && classes.light, orientation === 'vertical' && classes.vertical),\n    role: role,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Divider.propTypes = {\n  /**\n   * Absolutely position the element.\n   */\n  absolute: PropTypes.bool,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, a vertical divider will have the correct height when used in flex container.\n   * (By default, a vertical divider will have a calculated height of `0px` if it is the child of a flex container.)\n   */\n  flexItem: PropTypes.bool,\n\n  /**\n   * If `true`, the divider will have a lighter color.\n   */\n  light: PropTypes.bool,\n\n  /**\n   * The divider orientation.\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n\n  /**\n   * @ignore\n   */\n  role: PropTypes.string,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['fullWidth', 'inset', 'middle'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiDivider'\n})(Divider);"],"sourceRoot":""}