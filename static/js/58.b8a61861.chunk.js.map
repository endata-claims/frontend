{"version":3,"sources":["components/Formik/DateField/index.tsx","pages/app/Claims/ClaimDetails/tabs/JobNotes/useChangeAppointment.tsx"],"names":["DateField","variant","startAdornment","endAdornment","props","component","DatePicker","inputVariant","format","placeholder","InputProps","position","gql","claim","claimMeta","useClaimMeta","userType","me","isBuilder","React","useMemo","isRestorer","isQuoting","user","company","companyId","claimJob","building","scopingSupplier","restoration","isDisplayChangeAppointment","includes","claimStatus","statusId","useState","isOpen","setIsOpen","handleClose","useChangeAppointmentMutation","changeAppointment","enqueueSnackbar","useSnackbar","handleChangeAppointment","ChangeApointmentDialog","open","onClose","PaperProps","style","minWidth","maxWidth","initialValues","appointmentDate","Date","onSubmit","values","a","id","variables","input","res","data","claimMakeAppointment","messages","forEach","message","success","claimDetailsRefetch","console","log","isSubmitting","name","label","fullWidth","onClick","disabled","type","color"],"mappings":"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","file":"static/js/58.b8a61861.chunk.js","sourcesContent":["import React from 'react'\n\nimport { Field } from 'formik'\nimport { DatePicker } from 'formik-material-ui-pickers' // DatePickerProps\n// import { DatePickerProps } from '@material-ui/pickers'\nimport { InputAdornment } from '@material-ui/core'\n\n// export type DateFieldProps = Omit<DatePickerProps, 'variant'>\n// & {\n//   name: string\n\n//   variant?: 'standard' | 'outlined' | 'filled'\n//   startAdornment?: React.ReactElement\n//   endAdornment?: React.ReactElement,\n// }\n\nconst DateField: React.FC<any> = ({ variant = 'standard', startAdornment, endAdornment, ...props }) => {\n  return (\n    <Field component={DatePicker}\n      {...props}\n      variant='inline'\n      inputVariant={variant}\n      format='dd/MM/yyyy'\n      placeholder='DD/MM/YYYY'\n\n      InputProps={{\n        ...props.InputProps,\n        startAdornment: !startAdornment ? null : (\n          <InputAdornment position='start'>\n            {startAdornment}\n          </InputAdornment>\n        ),\n        endAdornment: !endAdornment ? null : (\n          <InputAdornment position='end'>\n            {endAdornment}\n          </InputAdornment>\n        )\n      }}\n    />\n  )\n}\nexport default DateField","import React from 'react'\nimport { useClaimMeta } from '../../ClaimMetaContext'\nimport { Dialog, DialogTitle, DialogContent, DialogActions, Button } from '@material-ui/core'\nimport { Formik, Form } from 'formik'\nimport DateField from 'components/Formik/DateField'\nimport { gql } from '@apollo/client'\nimport { useChangeAppointmentMutation } from 'generated/graphql'\nimport { useSnackbar } from 'notistack'\ngql`\n  mutation ChangeAppointment($id: ID!, $input: AppointmentInput!) {\n    claimMakeAppointment(\n      where: { id: $id }\n      input: $input\n    ) {\n      success\n      messages\n    }\n  }\n`\n\nexport default ({ claim }: any) => {\n  const claimMeta = useClaimMeta()\n  const userType = claimMeta?.me?.userType\n  const isBuilder = React.useMemo(() => userType === 'Builder', [userType])\n  const isRestorer = React.useMemo(() => userType === 'Restorer', [userType])\n\n  const companyId = claimMeta?.user?.company?.companyId\n  const scopingId =\n    isBuilder ? claim?.claimJob?.building?.scopingSupplier?.companyId :\n    isRestorer ? claim?.claimJob?.restoration?.scopingSupplier?.companyId :\n    ''\n  const isQuoting = companyId !== scopingId\n  const isDisplayChangeAppointment =\n    (isBuilder && !isQuoting && [1, 37].includes(claim?.claimJob?.building?.claimStatus?.statusId ?? -1))\n    ||\n    (isRestorer && !isQuoting && [1, 37].includes(claim?.claimJob?.restoration?.claimStatus?.statusId ?? -1))\n\n  const [isOpen, setIsOpen] = React.useState(false)\n  const handleChangeAppointment = () => setIsOpen(true)\n  const handleClose = () => setIsOpen(false)\n  const [changeAppointment] = useChangeAppointmentMutation()\n  const { enqueueSnackbar } = useSnackbar()\n  const ChangeApointmentDialog = () => (\n    <Dialog open={isOpen} onClose={handleClose} PaperProps={{ style: { minWidth: '40%', maxWidth: '65%' } }}>\n      <Formik\n        initialValues={{\n          appointmentDate: new Date()\n        }}\n        onSubmit={async values => {\n          if (claimMeta?.claim?.id) {\n            const res = await changeAppointment({\n              variables: {\n                id: claimMeta.claim.id,\n                input: values\n              }\n            })\n            res?.data?.claimMakeAppointment?.messages.forEach(message => enqueueSnackbar(message))\n\n            if (res?.data?.claimMakeAppointment?.success) {\n              claimMeta.claimDetailsRefetch()\n            }\n          }\n          else {\n            console.log('claim meta error')\n          }\n        }}\n      >\n        {({ isSubmitting }) => (\n          <Form>\n            <DialogTitle>\n              Change Appointment\n            </DialogTitle>\n            <DialogContent>\n              <DateField\n                name='appointmentDate'\n                label='Appointment Date'\n                variant='outlined'\n                fullWidth\n              />\n            </DialogContent>\n            <DialogActions>\n              <Button onClick={handleClose} disabled={isSubmitting}>\n                Cancel\n              </Button>\n              <Button type='submit' color='primary' disabled={isSubmitting}>\n                Make appointment\n              </Button>\n            </DialogActions>\n          </Form>\n        )}\n      </Formik>\n    </Dialog>\n  )\n\n  return {\n    isDisplayChangeAppointment,\n    handleChangeAppointment,\n    ChangeApointmentDialog\n  }\n}"],"sourceRoot":""}