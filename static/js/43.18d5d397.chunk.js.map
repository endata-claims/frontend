{"version":3,"sources":["components/Formik/DateField/index.tsx","components/Formik/CheckboxGroupField/index.tsx","components/Formik/ComboBoxField/index.tsx","components/Formik/InfoField/index.tsx","components/Formik/EditorField/index.tsx","components/Formik/CheckboxField/index.tsx","components/Formik/DateTimeField/index.tsx","components/Formik/TimeField/index.tsx","components/FormikCustom/PhoneField/index.tsx","components/FormikCustom/PostcodeField/index.tsx","components/Formik/Formik.stories.tsx","components/FormikCustom/MoneyField/index.tsx","../node_modules/@material-ui/icons/YouTube.js"],"names":["DateField","variant","startAdornment","endAdornment","props","component","DatePicker","inputVariant","format","placeholder","InputProps","position","CheckboxGroupField","name","label","options","disabled","readOnly","display","color","maxHeight","classes","useStyles","isSubmitting","useFormikContext","useField","field","meta","setValue","error","touched","isError","Boolean","fieldValue","value","fieldValueString","JSON","stringify","optionsString","currentState","React","useMemo","map","id","includes","style","overflow","className","root","row","key","control","checked","onChange","newFieldValue","s","filter","handleChange","helperText","String","makeStyles","width","alignItems","justifyContent","transform","switch","marginLeft","marginRight","ComboBoxField","multiple","fullWidth","loading","helpers","useState","optionString","useEffect","length","currentValue","option","find","e","selected","x","disableCloseOnSelect","filterSelectedOptions","getOptionLabel","groupBy","group","renderInput","params","mappedStartAdornment","mappedEndAdornment","height","flexWrap","renderTags","join","margin","paddingLeft","whiteSpace","textOverflow","renderOption","Fragment","icon","fontSize","checkedIcon","FormikInfoField","rowsMax","multiline","InputLabelProps","shrink","borderBottom","initialValue","RichTextEditor","createValueFromString","createEmptyValue","toolbarConfig","INLINE_STYLE_BUTTONS","BLOCK_TYPE_DROPDOWN","BLOCK_TYPE_BUTTONS","toString","setTouched","FormikSwitch","onClick","DateTimeField","DateTimePicker","TimeField","TimePicker","PhoneField","TextField","inputComponent","PhoneFormat","inputProps","autoComplete","inputRef","allowNegative","decimalScale","getInputRef","onValueChange","values","target","floatValue","PostcodeField","title","Default","renderField","Comp","xs","Grid","item","renderGroup","items","Typography","gutterBottom","marginTop","container","spacing","d","utils","DateFnsUtils","Paper","padding","onSubmit","console","log","initialValues","text","textarea","select","money","phone","postcode","info","date","time","datetime","combo","comboMulti","editor","file","checkbox","checkboxgroup","InfoField","MoneyField","TextAreaField","rows","SelectField","SwitchField","FileField","CheckboxField","EditorField","fixedDecimal","MoneyFormat","fixedDecimalScale","_interopRequireDefault","require","Object","defineProperty","exports","default","_react","_default","createElement"],"mappings":"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","file":"static/js/43.18d5d397.chunk.js","sourcesContent":["import React from 'react'\n\nimport { Field } from 'formik'\nimport { DatePicker } from 'formik-material-ui-pickers' // DatePickerProps\n// import { DatePickerProps } from '@material-ui/pickers'\nimport { InputAdornment } from '@material-ui/core'\n\n// export type DateFieldProps = Omit<DatePickerProps, 'variant'>\n// & {\n//   name: string\n\n//   variant?: 'standard' | 'outlined' | 'filled'\n//   startAdornment?: React.ReactElement\n//   endAdornment?: React.ReactElement,\n// }\n\nconst DateField: React.FC<any> = ({ variant = 'standard', startAdornment, endAdornment, ...props }) => {\n  return (\n    <Field component={DatePicker}\n      {...props}\n      variant='inline'\n      inputVariant={variant}\n      format='dd/MM/yyyy'\n      placeholder='DD/MM/YYYY'\n\n      InputProps={{\n        ...props.InputProps,\n        startAdornment: !startAdornment ? null : (\n          <InputAdornment position='start'>\n            {startAdornment}\n          </InputAdornment>\n        ),\n        endAdornment: !endAdornment ? null : (\n          <InputAdornment position='end'>\n            {endAdornment}\n          </InputAdornment>\n        )\n      }}\n    />\n  )\n}\nexport default DateField","import React from 'react'\nimport { FormControl, makeStyles, FormGroup, FormLabel, FormHelperText, FormControlLabel, Checkbox } from '@material-ui/core'\nimport { useField, useFormikContext } from 'formik'\n\nexport type CheckboxGroupFieldProps = {\n  name: string\n  label?: string\n  options?: Option[] | null\n  disabled?: boolean\n  readOnly?: boolean\n\n  display?: 'grid' | 'flex'\n  color?: 'primary' | 'secondary' | 'default'\n  maxHeight?: string\n}\ntype Option = {\n  label?: string\n  value: string\n}\nconst CheckboxGroupField: React.FC<CheckboxGroupFieldProps> = ({\n  name, label,\n  options,\n  disabled = false, readOnly = false,\n  display = 'grid', color = 'primary',\n  maxHeight = '100%',\n}) => {\n  const classes = useStyles()\n\n  const { isSubmitting } = useFormikContext()\n  const [field, meta, { setValue }] = useField(name)\n\n  const { error, touched } = meta\n  const isError = Boolean(touched && error)\n\n  const fieldValue = field.value\n  const fieldValueString = JSON.stringify(fieldValue)\n  const optionsString = JSON.stringify(options)\n  const currentState: any = React.useMemo(\n    () => options?.map(({ label, value }) => ({ label, id: value, value: fieldValue.includes(value) })),\n    // TODO\n    // eslint-disable-next-line\n    [fieldValueString, optionsString]\n  )\n\n  const handleChange = (value: any) => {\n    const newState = currentState.map((s: any) => {\n      if (s.id === value) return { ...s, value: !s.value}\n      return s\n    })\n    const newFieldValue = newState.filter(({ value }: any) => value).map(({ id }: any) => id)\n    setValue(newFieldValue)\n  }\n\n  return (\n    <div style={{ maxHeight, overflow: 'auto' }}>\n      <FormControl component='fieldset' className={classes.root} error={isError} disabled={isSubmitting || disabled || readOnly}>\n        <FormLabel component='legend' className={classes.label}>\n          {label}\n        </FormLabel>\n        <FormGroup row className={classes.root} style={{ display: display }}>\n          {options?.map(({ label, value }) => (\n            <FormControlLabel\n              key={value}\n              label={label}\n              control={(\n                <Checkbox\n                  {...field}\n                  value={value}\n                  checked={fieldValue.includes(value)}\n                  onChange={() => handleChange(value)}\n                  disabled={isSubmitting || disabled || readOnly}\n                  color={color}\n                />\n              )}\n            />\n          ))}\n        </FormGroup>\n        {isError && (\n          <FormHelperText className={classes.helperText}>\n            {String(error)}\n          </FormHelperText>\n        )}\n      </FormControl>\n    </div>\n  )\n}\nexport default CheckboxGroupField\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n    // display: 'grid',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  label: {\n    transform: 'scale(0.75)'\n  },\n  switch: {\n    marginLeft: 'calc(50% - 31px)'\n  },\n  helperText: {\n    marginLeft: 14,\n    marginRight: 14\n  }\n})","import React from 'react'\n\nimport { useField, useFormikContext } from 'formik'\nimport Autocomplete from '@material-ui/lab/Autocomplete' // , { AutocompleteProps }\nimport { TextField, Checkbox, TextFieldProps, CircularProgress } from '@material-ui/core' // InputAdornment\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank'\nimport CheckBoxIcon from '@material-ui/icons/CheckBox'\n\nexport type ComboBoxFieldProps =\n  // AutocompleteProps &\n  TextFieldProps &\n  {\n    startAdornment?: React.ReactElement\n    options?: ComboBoxFieldOption[]\n    name: string\n    multiple?: boolean\n    readOnly?: boolean\n    loading?: boolean\n  }\nexport type ComboBoxFieldOption = {\n  label?: string\n  value: string\n  group?: string\n}\nconst ComboBoxField: React.FC<ComboBoxFieldProps> = ({ options = [], name, multiple = false, disabled, readOnly, fullWidth, loading, startAdornment, ...props }) => {\n  const { isSubmitting } = useFormikContext()\n\n  const [field, meta, helpers] = useField(name)\n  const [value, setValue] = React.useState<any>('')\n  const fieldValue = field.value\n  const optionString = JSON.stringify(options)\n  React.useEffect(() => {\n    if(options && options.length) {\n      // TODO\n      const currentValue = multiple\n        // eslint-disable-next-line\n        ? options.filter(option => fieldValue.includes(option.value))\n        // eslint-disable-next-line\n        : options.find(option => option.value == fieldValue)\n\n      setValue(currentValue)\n    }\n    // eslint-disable-next-line\n  }, [fieldValue, multiple, optionString]) // optionString\n  const handleValueChange = (e: any, selected: any) => {\n    if (!selected) return helpers.setValue('')\n\n    const value = !multiple\n      ? selected.value\n      : selected.map((x: any) => x.value)\n    helpers.setValue(value)\n  }\n\n  const { error, touched } = meta\n  const isError = Boolean(touched && error)\n\n  return (\n    // @ts-ignore\n    <Autocomplete\n      {...props}\n      value={value}\n      onChange={handleValueChange}\n\n      disabled={loading || disabled || readOnly || isSubmitting}\n\n      multiple={multiple}\n      disableCloseOnSelect={multiple}\n      filterSelectedOptions={!multiple}\n\n      // @ts-ignore\n      options={options}\n      getOptionLabel={(option: any) => option.label || ''}\n      groupBy={(option: any) => option.group}\n      renderInput={params => {\n        const mappedStartAdornment = multiple ? params.InputProps.startAdornment :\n          startAdornment ? startAdornment :\n          null\n\n        const mappedEndAdornment = loading\n          ? <CircularProgress style={{ width: 30, height: 30 }} />\n          : params.InputProps.endAdornment\n\n        return (\n          // @ts-ignore\n          <TextField\n            error={isError}\n            helperText={isError ? error : null}\n            fullWidth={fullWidth}\n            // {...field}\n            {...props}\n            {...params}\n            InputProps={{\n              ...params.InputProps,\n              style: { flexWrap: 'nowrap' },\n              startAdornment: mappedStartAdornment,\n              endAdornment: mappedEndAdornment,\n            }}\n          />\n        )\n      }}\n      renderTags={(value: any) => {\n        const label = value.map(({ label }: any) => label).join(', ')\n\n        return (\n          <p style={{\n            margin: 0, paddingLeft: 6,\n            whiteSpace: 'nowrap',\n            overflow: 'hidden',\n            textOverflow: 'ellipsis'\n          }}>\n            {label}\n          </p>\n        )\n      }}\n      renderOption={(option: any, { selected }) => (\n        <React.Fragment key={option.value}>\n          {multiple && (\n            <Checkbox\n              icon={<CheckBoxOutlineBlankIcon fontSize='small' />}\n              checkedIcon={<CheckBoxIcon fontSize='small' />}\n              style={{ marginRight: 8 }}\n              checked={selected}\n            />\n          )}\n          {option.label}\n        </React.Fragment>\n      )}\n    />\n  )\n}\nexport default ComboBoxField","import React from 'react'\n\nimport TextField, { FormikTextFieldProps } from 'components/Formik/TextField'\nimport { makeStyles } from '@material-ui/core'\n\nexport type FormikInfoFieldProps = FormikTextFieldProps\n\nconst FormikInfoField: React.FC<FormikInfoFieldProps> = ({ InputProps, rowsMax = 3, className, variant, ...props }) => {\n  const classes = useStyles()\n\n  return (\n    <TextField {...props}\n      className={`${className} ${classes.root}`}\n      multiline\n      rowsMax={rowsMax}\n      InputProps={{\n        ...InputProps,\n        readOnly: true\n      }}\n      InputLabelProps={{ shrink: true }}\n    />\n  )\n}\nexport default FormikInfoField\n\nconst useStyles = makeStyles({\n  root: {\n    '& .MuiInput-underline:before': {\n      borderBottom: 'none'\n    }\n  }\n})","import React from 'react'\n\nimport { useField, useFormikContext } from 'formik'\nimport RichTextEditor from 'react-rte'\nimport FormControl from '@material-ui/core/FormControl'\nimport FormHelperText from '@material-ui/core/FormHelperText'\n\nexport default ({ name, label, placeholder, disabled, ...props }: any) => {\n  const { isSubmitting } = useFormikContext()\n\n  const [field, meta, helpers] = useField(name)\n  const { error, touched } = meta\n  const isError = Boolean(touched && error)\n\n  const initialValue = field.value\n    ? RichTextEditor.createValueFromString(field.value, 'html')\n    : RichTextEditor.createEmptyValue()\n  const [value, setValue] = React.useState<any>(initialValue)\n\n  return (\n    <FormControl error={isError} style={{ width: '100%' }} id={field.name}>\n      <RichTextEditor\n        {...props}\n        disabled={disabled || isSubmitting}\n        placeholder={placeholder || label}\n        toolbarConfig={{\n          display: [\n            'INLINE_STYLE_BUTTONS',\n            'BLOCK_TYPE_BUTTONS',\n            'BLOCK_TYPE_DROPDOWN',\n            'HISTORY_BUTTONS'\n          ],\n          INLINE_STYLE_BUTTONS: [\n            { label: 'Bold', style: 'BOLD', className: 'custom-css-class' },\n            { label: 'Italic', style: 'ITALIC' },\n            { label: 'Underline', style: 'UNDERLINE' }\n          ],\n          BLOCK_TYPE_DROPDOWN: [\n            { label: 'Normal', style: 'unstyled' },\n            { label: 'Heading Large', style: 'header-one' },\n            { label: 'Heading Medium', style: 'header-two' },\n            { label: 'Heading Small', style: 'header-three' }\n          ],\n          BLOCK_TYPE_BUTTONS: [\n            { label: 'UL', style: 'unordered-list-item' },\n            { label: 'OL', style: 'ordered-list-item' }\n          ]\n        }}\n        value={value}\n        onChange={(value: any) => {\n          setValue(value)\n          helpers.setValue(value.toString('html'))\n          helpers.setTouched(true)\n        }}\n      />\n      {isError && (\n        <FormHelperText style={{ marginLeft: 14, marginRight: 14 }}>\n          {error}\n        </FormHelperText>\n      )}\n    </FormControl>\n  )\n}","import React from 'react'\n\nimport {\n  Checkbox, CheckboxProps,\n  makeStyles,\n  FormControl, FormLabel, FormGroup, FormHelperText\n} from '@material-ui/core'\nimport { useField, useFormikContext } from 'formik'\n\ntype FormikCheckboxProps = CheckboxProps & {\n  name: string\n  label?: string\n}\nconst FormikSwitch: React.FC<FormikCheckboxProps> = ({ label, disabled, readOnly, ...props }) => {\n  const classes = useStyles()\n\n  const { isSubmitting } = useFormikContext()\n\n  const [field, meta, helpers] = useField(props.name)\n  const { error, touched } = meta\n  const isError = Boolean(touched && error)\n\n  return (\n    <FormControl component='fieldset' className={classes.root} error={isError}\n      disabled={disabled || readOnly || isSubmitting}\n    >\n      <FormLabel component='legend' className={classes.label}>\n        {label}\n      </FormLabel>\n      <FormGroup row className={classes.root}>\n        <Checkbox\n          {...props}\n          disabled={disabled || readOnly || isSubmitting}\n          checked={field.value}\n          onClick={() => helpers.setValue(!field.value)}\n        />\n      </FormGroup>\n      {isError && (\n        <FormHelperText className={classes.helperText}>\n          {String(error)}\n        </FormHelperText>\n      )}\n    </FormControl>\n  )\n}\nexport default FormikSwitch\n\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  label: {\n    transform: 'scale(0.75)'\n  },\n  helperText: {\n    marginLeft: 14,\n    marginRight: 14\n  }\n})","import React from 'react'\n\nimport { Field } from 'formik'\nimport { DateTimePicker } from 'formik-material-ui-pickers'\nimport { DateTimePickerProps } from '@material-ui/pickers'\nimport { InputAdornment } from '@material-ui/core'\n\nexport type DateTimeFieldProps = Omit<DateTimePickerProps, 'variant'> & {\n  name: string\n\n  variant: 'standard' | 'outlined' | 'filled'\n  startAdornment?: React.ReactElement\n  endAdornment?: React.ReactElement,\n}\n\nconst DateTimeField: React.FC<DateTimeFieldProps> = ({ variant, startAdornment, endAdornment, ...props }) => {\n  return (\n    <Field component={DateTimePicker}\n      {...props}\n      variant='inline'\n      inputVariant={variant}\n      format='dd/MM/yyyy hh:mm a'\n\n      InputProps={{\n        ...props.InputProps,\n        startAdornment: !startAdornment ? null : (\n          <InputAdornment position='start'>\n            {startAdornment}\n          </InputAdornment>\n        ),\n        endAdornment: !endAdornment ? null : (\n          <InputAdornment position='end'>\n            {endAdornment}\n          </InputAdornment>\n        )\n      }}\n    />\n  )\n}\nexport default DateTimeField","import React from 'react'\n\nimport { Field } from 'formik'\nimport { TimePicker } from 'formik-material-ui-pickers'\nimport { TimePickerProps } from '@material-ui/pickers'\nimport { InputAdornment } from '@material-ui/core'\n\nexport type TimeFieldProps = Omit<TimePickerProps, 'variant'> & {\n  name: string\n\n  variant: 'standard' | 'outlined' | 'filled'\n  startAdornment?: React.ReactElement\n  endAdornment?: React.ReactElement,\n}\n\nconst TimeField: React.FC<TimeFieldProps> = ({ variant, startAdornment, endAdornment, ...props }) => {\n  return (\n    <Field component={TimePicker}\n      {...props}\n      variant='inline'\n      inputVariant={variant}\n\n      InputProps={{\n        ...props.InputProps,\n        startAdornment: !startAdornment ? null : (\n          <InputAdornment position='start'>\n            {startAdornment}\n          </InputAdornment>\n        ),\n        endAdornment: !endAdornment ? null : (\n          <InputAdornment position='end'>\n            {endAdornment}\n          </InputAdornment>\n        )\n      }}\n    />\n  )\n}\nexport default TimeField","import React from 'react'\n\nimport TextField, { FormikTextFieldProps } from 'components/Formik/TextField'\nimport NumberFormat from 'react-number-format'\n\ntype PhoneFieldProps = FormikTextFieldProps & {\n  format?: string\n}\nconst PhoneField: React.FC<PhoneFieldProps> = ({ format, ...props }) => {\n  return (\n    <TextField\n      {...props}\n      InputProps={{\n        inputComponent: PhoneFormat,\n        inputProps: {\n          autoComplete: 'disabled_auto_complete',\n          format\n        }\n      }}\n    />\n  )\n}\nexport default PhoneField\n\nconst PhoneFormat = ({\n  inputRef,\n  onChange, name,\n  ...props\n}: any) => {\n  return (\n    <NumberFormat\n      {...props}\n\n      allowNegative={false}\n      decimalScale={0}\n      format='#### ### ###'\n\n      name={name}\n      getInputRef={inputRef}\n      onValueChange={(values: any) => {\n        onChange({\n          target: {\n            name,\n            value: values.floatValue\n          }\n        })\n      }}\n    />\n  )\n}","import React from 'react'\n\nimport TextField, { FormikTextFieldProps } from 'components/Formik/TextField'\nimport NumberFormat from 'react-number-format'\n\ntype PostcodeFieldProps = FormikTextFieldProps & {\n  format?: string\n}\nconst PostcodeField: React.FC<PostcodeFieldProps> = ({ format, ...props }) => {\n  return (\n    <TextField\n      {...props}\n      InputProps={{\n        inputComponent: PhoneFormat,\n        inputProps: {\n          autoComplete: 'disabled_auto_complete',\n          format,\n        }\n      }}\n    />\n  )\n}\nexport default PostcodeField\n\nconst PhoneFormat = ({\n  inputRef,\n  onChange, name,\n  ...props\n}: any) => {\n  return (\n    <NumberFormat\n      {...props}\n\n      allowNegative={false}\n      decimalScale={0}\n      format='####'\n\n      name={name}\n      getInputRef={inputRef}\n      onValueChange={(values: any) => {\n        onChange({\n          target: {\n            name,\n            value: values.floatValue\n          }\n        })\n      }}\n    />\n  )\n}","import React from 'react'\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers'\nimport DateFnsUtils from '@date-io/date-fns'\nimport { Form, Formik } from 'formik'\nimport { Grid, Typography, Paper } from '@material-ui/core'\nimport YouTubeIcon from '@material-ui/icons/YouTube'\n\nimport InfoField from './InfoField'\nimport MoneyField from '../FormikCustom/MoneyField'\nimport PhoneField from '../FormikCustom/PhoneField'\nimport PostcodeField from '../FormikCustom/PostcodeField'\n\nimport TextField from './TextField'\nimport TextAreaField from './TextAreaField'\nimport SelectField from './SelectField'\nimport DateField from './DateField'\nimport TimeField from './TimeField'\nimport DateTimeField from './DateTimeField'\nimport SwitchField from './SwitchField'\nimport ComboBoxField from './ComboBoxField'\nimport EditorField from './EditorField'\nimport FileField from './FileField'\nimport CheckboxField from './CheckboxField'\nimport CheckboxGroupField from './CheckboxGroupField'\n\nexport default {\n  title: 'Formik fields',\n}\n\nexport const Default = () => {\n  const renderField = ({ component: Comp, xs = 2, ...props }: any) => {\n    return (\n      <Grid item xs={xs} key={props.name}>\n        <Comp {...props} variant='outlined' startAdornment={<YouTubeIcon />} fullWidth />\n      </Grid>\n    )\n  }\n  const renderGroup = ({ title, items }: any) => {\n    return (\n      <>\n        {title && (\n          <Typography variant='h5' gutterBottom style={{ marginTop: 16 }}>\n            {title}\n          </Typography>\n        )}\n        <Grid container spacing={2}>\n          {items.map(renderField)}\n        </Grid>\n      </>\n    )\n  }\n\n  const options = ['Red', 'Yellow', 'Green', 'Blue'].map(d => ({ label: d, value: d }))\n\n  return (\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n      <Paper style={{ padding: 16 }}>\n        <Formik\n          onSubmit={values => console.log(values)}\n          initialValues={{\n            text: 'some text',\n            textarea: 'some text',\n            select: '',\n            money: 50.20,\n            phone: '0426893799',\n            postcode: '',\n            info: 'there is some text here as info, no edit',\n            date: '',\n            time: '',\n            datetime: '',\n            switch: true,\n            combo: '',\n            comboMulti: '',\n            editor: '',\n            file: '',\n            checkbox: true,\n            checkboxgroup: ''\n          }}\n        >\n          <Form>\n            {renderGroup({\n              title: 'Text Fields',\n              items: [\n                { label: 'Info field', name: 'info', component: InfoField },\n                { label: 'Text field', name: 'text', component: TextField },\n\n                { label: 'Money field', name: 'money', component: MoneyField },\n                { label: 'Phone field', name: 'phone', component: PhoneField },\n                { label: 'Postcode field', name: 'postcode', component: PostcodeField },\n                { label: 'Text area', name: 'textarea', component: TextAreaField, rows: 3, rowsMax: 5 },\n              ]\n            })}\n            {renderGroup({\n              title: 'Combo',\n              items: [\n                { label: 'Select field no options', name: 'select', component: SelectField },\n                { label: 'Select field', name: 'select', component: SelectField, options },\n                { label: 'ComboBox', name: 'combo', component: ComboBoxField, options },\n                {\n                  component: ComboBoxField,\n                  label: 'Multi ComboBox', name: 'comboMulti',\n                  options, multiple: true\n                },\n              ]\n            })}\n            {renderGroup({\n              title: 'Date time pickers',\n              items: [\n                { label: 'Date', name: 'date', component: DateField },\n                { label: 'Time', name: 'time', component: TimeField },\n                { label: 'DateTime', name: 'datetime', component: DateTimeField },\n              ]\n            })}\n            {renderGroup({\n              title: 'Others',\n              items: [\n                { label: 'Switch', name: 'switch', component: SwitchField },\n                {\n                  component: FileField, xs: 4,\n                  label: 'File', name: 'file'\n                },\n                {\n                  component: CheckboxField,\n                  label: 'Checkbox', name: 'checkbox'\n                },\n                {\n                  component: CheckboxGroupField,\n                  label: 'Checkbox Groups', name: 'checkboxgroup',\n                  options\n                },\n                {\n                  component: EditorField, xs: 8,\n                  label: 'Editor', name: 'editor'\n                },\n              ]\n            })}\n          </Form>\n        </Formik>\n      </Paper>\n    </MuiPickersUtilsProvider>\n  )\n}","import React from 'react'\n\nimport NumberFormat from 'react-number-format'\nimport AttachMoneyIcon from '@material-ui/icons/AttachMoney'\nimport TextField, { FormikTextFieldProps } from 'components/Formik/TextField'\n\ntype MoneyFieldProps = FormikTextFieldProps & {\n  fixedDecimal?: boolean\n  decimalScale?: number\n  format?: string\n  allowNegative?: boolean\n}\nconst MoneyField: React.FC<MoneyFieldProps> = ({ fixedDecimal, decimalScale, format, allowNegative, ...props }) => {\n  return (\n    <TextField\n      {...props}\n      startAdornment={<AttachMoneyIcon />}\n      // @ts-ignore\n      InputProps={{\n        inputComponent: MoneyFormat,\n        inputProps: {\n          autoComplete: 'disabled_auto_complete',\n          fixedDecimal,\n          decimalScale,\n          format,\n          allowNegative\n        }\n      }}\n    />\n  )\n}\nexport default MoneyField\n\nconst MoneyFormat = ({\n  fixedDecimal = true,\n  decimalScale = 2,\n  allowNegative = true,\n  inputRef,\n  onChange, name,\n  ...props\n}: any) => {\n  return (\n    <NumberFormat\n      {...props}\n\n      allowNegative={allowNegative}\n      decimalScale={decimalScale}\n      fixedDecimalScale={fixedDecimal}\n\n      name={name}\n      getInputRef={inputRef}\n      onValueChange={(values: any) => {\n        onChange({\n          target: {\n            name,\n            value: values.floatValue\n          }\n        })\n      }}\n    />\n  )\n}","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M10 15l5.19-3L10 9v6m11.56-7.83c.13.47.22 1.1.28 1.9.07.8.1 1.49.1 2.09L22 12c0 2.19-.16 3.8-.44 4.83-.25.9-.83 1.48-1.73 1.73-.47.13-1.33.22-2.65.28-1.3.07-2.49.1-3.59.1L12 19c-4.19 0-6.8-.16-7.83-.44-.9-.25-1.48-.83-1.73-1.73-.13-.47-.22-1.1-.28-1.9-.07-.8-.1-1.49-.1-2.09L2 12c0-2.19.16-3.8.44-4.83.25-.9.83-1.48 1.73-1.73.47-.13 1.33-.22 2.65-.28 1.3-.07 2.49-.1 3.59-.1L12 5c4.19 0 6.8.16 7.83.44.9.25 1.48.83 1.73 1.73z\"\n}), 'YouTube');\n\nexports.default = _default;"],"sourceRoot":""}