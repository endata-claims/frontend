{"version":3,"sources":["components/Formik/CheckboxGroupField/index.tsx"],"names":["CheckboxGroupField","name","label","options","disabled","readOnly","display","color","maxHeight","classes","useStyles","isSubmitting","useFormikContext","useField","field","meta","setValue","error","touched","isError","Boolean","fieldValue","value","fieldValueString","JSON","stringify","optionsString","currentState","React","useMemo","map","id","includes","style","overflow","component","className","root","row","key","control","checked","onChange","newFieldValue","s","filter","handleChange","helperText","String","makeStyles","width","alignItems","justifyContent","transform","switch","marginLeft","marginRight"],"mappings":"4NAsFeA,UAnE+C,SAAC,GAMxD,IALLC,EAKI,EALJA,KAAMC,EAKF,EALEA,MACNC,EAII,EAJJA,QAII,IAHJC,gBAGI,aAHcC,gBAGd,aAFJC,eAEI,MAFM,OAEN,MAFcC,aAEd,MAFsB,UAEtB,MADJC,iBACI,MADQ,OACR,EACEC,EAAUC,IAERC,EAAiBC,cAAjBD,aAHJ,EAIgCE,YAASZ,GAJzC,mBAIGa,EAJH,KAIUC,EAJV,KAIkBC,EAJlB,KAIkBA,SAEdC,EAAmBF,EAAnBE,MAAOC,EAAYH,EAAZG,QACTC,EAAUC,QAAQF,GAAWD,GAE7BI,EAAaP,EAAMQ,MACnBC,EAAmBC,KAAKC,UAAUJ,GAClCK,EAAgBF,KAAKC,UAAUtB,GAC/BwB,EAAoBC,IAAMC,SAC9B,yBAAM1B,QAAN,IAAMA,OAAN,EAAMA,EAAS2B,KAAI,gBAAG5B,EAAH,EAAGA,MAAOoB,EAAV,EAAUA,MAAV,MAAuB,CAAEpB,QAAO6B,GAAIT,EAAOA,MAAOD,EAAWW,SAASV,SAGzF,CAACC,EAAkBG,IAYrB,OACE,yBAAKO,MAAO,CAAEzB,YAAW0B,SAAU,SACjC,kBAAC,IAAD,CAAaC,UAAU,WAAWC,UAAW3B,EAAQ4B,KAAMpB,MAAOE,EAASf,SAAUO,GAAgBP,GAAYC,GAC/G,kBAAC,IAAD,CAAW8B,UAAU,SAASC,UAAW3B,EAAQP,OAC9CA,GAEH,kBAAC,IAAD,CAAWoC,KAAG,EAACF,UAAW3B,EAAQ4B,KAAMJ,MAAO,CAAE3B,QAASA,IAA1D,OACGH,QADH,IACGA,OADH,EACGA,EAAS2B,KAAI,gBAAG5B,EAAH,EAAGA,MAAOoB,EAAV,EAAUA,MAAV,OACZ,kBAAC,IAAD,CACEiB,IAAKjB,EACLpB,MAAOA,EACPsC,QACE,kBAAC,IAAD,iBACM1B,EADN,CAEEQ,MAAOA,EACPmB,QAASpB,EAAWW,SAASV,GAC7BoB,SAAU,kBAzBL,SAACpB,GACpB,IAIMqB,EAJWhB,EAAaG,KAAI,SAACc,GACjC,OAAIA,EAAEb,KAAOT,EAAc,eAAKsB,EAAZ,CAAetB,OAAQsB,EAAEtB,QACtCsB,KAEsBC,QAAO,qBAAGvB,SAAwBQ,KAAI,qBAAGC,MACxEf,EAAS2B,GAmBqBG,CAAaxB,IAC7BlB,SAAUO,GAAgBP,GAAYC,EACtCE,MAAOA,WAMhBY,GACC,kBAAC,IAAD,CAAgBiB,UAAW3B,EAAQsC,YAChCC,OAAO/B,OAQpB,IAAMP,EAAYuC,YAAW,CAC3BZ,KAAM,CACJa,MAAO,OAEPC,WAAY,SACZC,eAAgB,UAElBlD,MAAO,CACLmD,UAAW,eAEbC,OAAQ,CACNC,WAAY,oBAEdR,WAAY,CACVQ,WAAY,GACZC,YAAa","file":"static/js/18.bebf5050.chunk.js","sourcesContent":["import React from 'react'\nimport { FormControl, makeStyles, FormGroup, FormLabel, FormHelperText, FormControlLabel, Checkbox } from '@material-ui/core'\nimport { useField, useFormikContext } from 'formik'\n\nexport type CheckboxGroupFieldProps = {\n  name: string\n  label?: string\n  options?: Option[] | null\n  disabled?: boolean\n  readOnly?: boolean\n\n  display?: 'grid' | 'flex'\n  color?: 'primary' | 'secondary' | 'default'\n  maxHeight?: string\n}\ntype Option = {\n  label?: string\n  value: string\n}\nconst CheckboxGroupField: React.FC<CheckboxGroupFieldProps> = ({\n  name, label,\n  options,\n  disabled = false, readOnly = false,\n  display = 'grid', color = 'primary',\n  maxHeight = '100%',\n}) => {\n  const classes = useStyles()\n\n  const { isSubmitting } = useFormikContext()\n  const [field, meta, { setValue }] = useField(name)\n\n  const { error, touched } = meta\n  const isError = Boolean(touched && error)\n\n  const fieldValue = field.value\n  const fieldValueString = JSON.stringify(fieldValue)\n  const optionsString = JSON.stringify(options)\n  const currentState: any = React.useMemo(\n    () => options?.map(({ label, value }) => ({ label, id: value, value: fieldValue.includes(value) })),\n    // TODO\n    // eslint-disable-next-line\n    [fieldValueString, optionsString]\n  )\n\n  const handleChange = (value: any) => {\n    const newState = currentState.map((s: any) => {\n      if (s.id === value) return { ...s, value: !s.value}\n      return s\n    })\n    const newFieldValue = newState.filter(({ value }: any) => value).map(({ id }: any) => id)\n    setValue(newFieldValue)\n  }\n\n  return (\n    <div style={{ maxHeight, overflow: 'auto' }}>\n      <FormControl component='fieldset' className={classes.root} error={isError} disabled={isSubmitting || disabled || readOnly}>\n        <FormLabel component='legend' className={classes.label}>\n          {label}\n        </FormLabel>\n        <FormGroup row className={classes.root} style={{ display: display }}>\n          {options?.map(({ label, value }) => (\n            <FormControlLabel\n              key={value}\n              label={label}\n              control={(\n                <Checkbox\n                  {...field}\n                  value={value}\n                  checked={fieldValue.includes(value)}\n                  onChange={() => handleChange(value)}\n                  disabled={isSubmitting || disabled || readOnly}\n                  color={color}\n                />\n              )}\n            />\n          ))}\n        </FormGroup>\n        {isError && (\n          <FormHelperText className={classes.helperText}>\n            {String(error)}\n          </FormHelperText>\n        )}\n      </FormControl>\n    </div>\n  )\n}\nexport default CheckboxGroupField\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n    // display: 'grid',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  label: {\n    transform: 'scale(0.75)'\n  },\n  switch: {\n    marginLeft: 'calc(50% - 31px)'\n  },\n  helperText: {\n    marginLeft: 14,\n    marginRight: 14\n  }\n})"],"sourceRoot":""}