{"version":3,"sources":["components/Formik/ComboBoxField/index.tsx","components/Formik/ComboBoxField/ComboBoxField.stories.tsx"],"names":["ComboBoxField","options","name","multiple","disabled","readOnly","fullWidth","loading","startAdornment","props","isSubmitting","useFormikContext","useField","field","meta","helpers","React","useState","value","setValue","fieldValue","optionString","JSON","stringify","useEffect","length","currentValue","filter","option","includes","find","error","touched","isError","Boolean","onChange","e","selected","map","x","disableCloseOnSelect","filterSelectedOptions","getOptionLabel","label","groupBy","group","renderInput","params","mappedStartAdornment","InputProps","mappedEndAdornment","style","width","height","endAdornment","helperText","flexWrap","renderTags","join","margin","paddingLeft","whiteSpace","overflow","textOverflow","renderOption","Fragment","key","icon","fontSize","checkedIcon","marginRight","checked","title","ComboBoxFieldStories","padding","initialValues","multi","onSubmit","values","console","log","validate","variant"],"mappings":"kPAkIeA,UA1GqC,SAAC,GAAgH,IAAD,IAA7GC,eAA6G,MAAnG,GAAmG,EAA/FC,EAA+F,EAA/FA,KAA+F,IAAzFC,gBAAyF,SAAvEC,EAAuE,EAAvEA,SAAUC,EAA6D,EAA7DA,SAAUC,EAAmD,EAAnDA,UAAWC,EAAwC,EAAxCA,QAASC,EAA+B,EAA/BA,eAAmBC,EAAY,0GAC1JC,EAAiBC,cAAjBD,aAD0J,EAGnIE,YAASV,GAH0H,mBAG3JW,EAH2J,KAGpJC,EAHoJ,KAG9IC,EAH8I,OAIxIC,IAAMC,SAAc,IAJoH,mBAI3JC,EAJ2J,KAIpJC,EAJoJ,KAK5JC,EAAaP,EAAMK,MACnBG,EAAeC,KAAKC,UAAUtB,GACpCe,IAAMQ,WAAU,WACd,GAAGvB,GAAWA,EAAQwB,OAAQ,CAE5B,IAAMC,EAAevB,EAEjBF,EAAQ0B,QAAO,SAAAC,GAAM,OAAIR,EAAWS,SAASD,EAAOV,UAEpDjB,EAAQ6B,MAAK,SAAAF,GAAM,OAAIA,EAAOV,OAASE,KAE3CD,EAASO,MAGV,CAACN,EAAYjB,EAAUkB,IAC1B,IASQU,EAAmBjB,EAAnBiB,MAAOC,EAAYlB,EAAZkB,QACTC,EAAUC,QAAQF,GAAWD,GAEnC,OAEE,kBAAC,IAAD,iBACMtB,EADN,CAEES,MAAOA,EACPiB,SAjBsB,SAACC,EAAQC,GACjC,IAAKA,EAAU,OAAOtB,EAAQI,SAAS,IAEvC,IAAMD,EAASf,EAEXkC,EAASC,KAAI,SAACC,GAAD,OAAYA,EAAErB,SAD3BmB,EAASnB,MAEbH,EAAQI,SAASD,IAafd,SAAUG,GAAWH,GAAYC,GAAYK,EAE7CP,SAAUA,EACVqC,qBAAsBrC,EACtBsC,uBAAwBtC,EAGxBF,QAASA,EACTyC,eAAgB,SAACd,GAAD,OAAiBA,EAAOe,OAAS,IACjDC,QAAS,SAAChB,GAAD,OAAiBA,EAAOiB,OACjCC,YAAa,SAAAC,GACX,IAAMC,EAAuB7C,EAAW4C,EAAOE,WAAWzC,eACxDA,GACA,KAEI0C,EAAqB3C,EACvB,kBAAC,IAAD,CAAkB4C,MAAO,CAAEC,MAAO,GAAIC,OAAQ,MAC9CN,EAAOE,WAAWK,aAEtB,OAEE,kBAAC,IAAD,eACEvB,MAAOE,EACPsB,WAAYtB,EAAUF,EAAQ,KAC9BzB,UAAWA,GAEPG,EACAsC,EANN,CAOEE,WAAU,eACLF,EAAOE,WADF,CAERE,MAAO,CAAEK,SAAU,UACnBhD,eAAgBwC,EAChBM,aAAcJ,QAKtBO,WAAY,SAACvC,GACX,IAAMyB,EAAQzB,EAAMoB,KAAI,qBAAGK,SAAwBe,KAAK,MAExD,OACE,uBAAGP,MAAO,CACRQ,OAAQ,EAAGC,YAAa,EACxBC,WAAY,SACZC,SAAU,SACVC,aAAc,aAEbpB,IAIPqB,aAAc,SAACpC,EAAD,OAAgBS,EAAhB,EAAgBA,SAAhB,OACZ,kBAAC,IAAM4B,SAAP,CAAgBC,IAAKtC,EAAOV,OACzBf,GACC,kBAAC,IAAD,CACEgE,KAAM,kBAAC,IAAD,CAA0BC,SAAS,UACzCC,YAAa,kBAAC,IAAD,CAAcD,SAAS,UACpCjB,MAAO,CAAEmB,YAAa,GACtBC,QAASlC,IAGZT,EAAOe,a,iCC5HlB,2GAKe,WACb6B,MAAO,iBAGF,IAAMC,EAAuB,WAClC,OACE,kBAAC,IAAD,CAAOtB,MAAO,CAAEuB,QAAS,KACvB,kBAAC,IAAD,CACEC,cAAe,CACbC,MAAO,IAETC,SAAU,SAAAC,GACRC,QAAQC,IAAIF,IAEdG,SAAU,SAAAH,GACRC,QAAQC,IAAIF,KAGd,kBAAC,IAAD,KACM,kBAAC,UAAD,CACEnC,MAAM,QAAQzC,KAAK,QACnBC,UAAQ,EACRG,WAAS,EACT4E,QAAQ,WACRjF,QAAS,CACP,CAAE0C,MAAO,MAAOzB,MAAO,KACvB,CAAEyB,MAAO,MAAOzB,MAAO,KACvB,CAAEyB,MAAO,QAASzB,MAAO,KACzB,CAAEyB,MAAO,OAAQzB,MAAO","file":"static/js/45.6a769d42.chunk.js","sourcesContent":["import React from 'react'\n\nimport { useField, useFormikContext } from 'formik'\nimport Autocomplete from '@material-ui/lab/Autocomplete' // , { AutocompleteProps }\nimport { TextField, Checkbox, TextFieldProps, CircularProgress } from '@material-ui/core' // InputAdornment\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank'\nimport CheckBoxIcon from '@material-ui/icons/CheckBox'\n\nexport type ComboBoxFieldProps =\n  // AutocompleteProps &\n  TextFieldProps &\n  {\n    startAdornment?: React.ReactElement\n    options?: ComboBoxFieldOption[]\n    name: string\n    multiple?: boolean\n    readOnly?: boolean\n    loading?: boolean\n  }\nexport type ComboBoxFieldOption = {\n  label?: string\n  value: string\n  group?: string\n}\nconst ComboBoxField: React.FC<ComboBoxFieldProps> = ({ options = [], name, multiple = false, disabled, readOnly, fullWidth, loading, startAdornment, ...props }) => {\n  const { isSubmitting } = useFormikContext()\n\n  const [field, meta, helpers] = useField(name)\n  const [value, setValue] = React.useState<any>('')\n  const fieldValue = field.value\n  const optionString = JSON.stringify(options)\n  React.useEffect(() => {\n    if(options && options.length) {\n      // TODO\n      const currentValue = multiple\n        // eslint-disable-next-line\n        ? options.filter(option => fieldValue.includes(option.value))\n        // eslint-disable-next-line\n        : options.find(option => option.value == fieldValue)\n\n      setValue(currentValue)\n    }\n    // eslint-disable-next-line\n  }, [fieldValue, multiple, optionString]) // optionString\n  const handleValueChange = (e: any, selected: any) => {\n    if (!selected) return helpers.setValue('')\n\n    const value = !multiple\n      ? selected.value\n      : selected.map((x: any) => x.value)\n    helpers.setValue(value)\n  }\n\n  const { error, touched } = meta\n  const isError = Boolean(touched && error)\n\n  return (\n    // @ts-ignore\n    <Autocomplete\n      {...props}\n      value={value}\n      onChange={handleValueChange}\n\n      disabled={loading || disabled || readOnly || isSubmitting}\n\n      multiple={multiple}\n      disableCloseOnSelect={multiple}\n      filterSelectedOptions={!multiple}\n\n      // @ts-ignore\n      options={options}\n      getOptionLabel={(option: any) => option.label || ''}\n      groupBy={(option: any) => option.group}\n      renderInput={params => {\n        const mappedStartAdornment = multiple ? params.InputProps.startAdornment :\n          startAdornment ? startAdornment :\n          null\n\n        const mappedEndAdornment = loading\n          ? <CircularProgress style={{ width: 30, height: 30 }} />\n          : params.InputProps.endAdornment\n\n        return (\n          // @ts-ignore\n          <TextField\n            error={isError}\n            helperText={isError ? error : null}\n            fullWidth={fullWidth}\n            // {...field}\n            {...props}\n            {...params}\n            InputProps={{\n              ...params.InputProps,\n              style: { flexWrap: 'nowrap' },\n              startAdornment: mappedStartAdornment,\n              endAdornment: mappedEndAdornment,\n            }}\n          />\n        )\n      }}\n      renderTags={(value: any) => {\n        const label = value.map(({ label }: any) => label).join(', ')\n\n        return (\n          <p style={{\n            margin: 0, paddingLeft: 6,\n            whiteSpace: 'nowrap',\n            overflow: 'hidden',\n            textOverflow: 'ellipsis'\n          }}>\n            {label}\n          </p>\n        )\n      }}\n      renderOption={(option: any, { selected }) => (\n        <React.Fragment key={option.value}>\n          {multiple && (\n            <Checkbox\n              icon={<CheckBoxOutlineBlankIcon fontSize='small' />}\n              checkedIcon={<CheckBoxIcon fontSize='small' />}\n              style={{ marginRight: 8 }}\n              checked={selected}\n            />\n          )}\n          {option.label}\n        </React.Fragment>\n      )}\n    />\n  )\n}\nexport default ComboBoxField","import React from 'react'\nimport ComboBoxField from '.'\nimport { Paper } from '@material-ui/core'\nimport { Formik, Form } from 'formik'\n\nexport default {\n  title: 'Formik fields',\n}\n\nexport const ComboBoxFieldStories = () => {\n  return (\n    <Paper style={{ padding: 16 }}>\n      <Formik\n        initialValues={{\n          multi: ''\n        }}\n        onSubmit={values => {\n          console.log(values)\n        }}\n        validate={values => {\n          console.log(values)\n        }}\n      >\n        <Form>\n              <ComboBoxField\n                label='multi' name='multi'\n                multiple\n                fullWidth\n                variant='outlined'\n                options={[\n                  { label: 'One', value: '1' },\n                  { label: 'Two', value: '2' },\n                  { label: 'Three', value: '3' },\n                  { label: 'Four', value: '4' },\n                ]}\n              />\n            </Form>\n      </Formik>\n    </Paper>\n  )\n}"],"sourceRoot":""}